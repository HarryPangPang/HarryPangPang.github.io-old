(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{245:function(n,e,t){"use strict";t.r(e);var a=t(0),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("ol",[t("li",[n._v("两数之和")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Solution:\n    def twoSum(self, nums: [int], target: int):\n        my_map = {}\n        result = []\n        for index, value in enumerate(nums):\n            my_map[value] = index\n        for i, value in enumerate(nums):\n            complete = target-value\n            if complete in my_map and my_map.get(complete) != i:\n                result.extend([my_map.get(complete),i])\n                return result\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[n._v("寻找两个有序数组的中位数")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。\n\n请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。\n\n你可以假设 nums1 和 nums2 不会同时为空。\n\n示例 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\n则中位数是 2.0\n示例 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n则中位数是 (2 + 3)/2 = 2.5\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);