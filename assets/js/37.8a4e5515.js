(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{236:function(n,e,s){"use strict";s.r(e);var a=s(0),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h4",{attrs:{id:"docker部署jenkins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker部署jenkins"}},[n._v("#")]),n._v(" docker部署jenkins")]),n._v(" "),s("p",[n._v("如何使用docker部署Jenkins？按下面步骤走：")]),n._v(" "),s("ol",[s("li",[n._v("安装docker,mac用户可以使用")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("brew install docker\n")])])]),s("p",[n._v("最好参照官网安装，一路next\n2. 查看docker是否安装成功\n执行：")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("docker info\n")])])]),s("p",[n._v("出现下面这样就是成功了")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Server:\n Containers: 1\n  Running: 1\n  Paused: 0\n  Stopped: 0\n Images: 30\n Server Version: 19.03.2\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb\n runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f\n init version: fec3683\n Security Options:\n  seccomp\n   Profile: default\n Kernel Version: 4.9.184-linuxkit\n Operating System: Docker Desktop\n OSType: linux\n Architecture: x86_64\n CPUs: 6\n Total Memory: 1.952GiB\n Name: docker-desktop\n ID: 3SL2:C77F:5JW2:IOHJ:SMTS\n ...\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[n._v("新建目录")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("mkdir jenkins\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[n._v("新建两个文件，分别是Dockerfile和docker-compose.yml\n他们的区别可以看一下")])]),n._v(" "),s("p",[n._v("Dockerfile")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('FROM openjdk:8-jdk\n\nRUN apt-get update && apt-get install -y git curl && rm -rf /var/lib/apt/lists/*\n\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\n\nENV JENKINS_HOME /var/jenkins_home\nENV JENKINS_SLAVE_AGENT_PORT ${agent_port}\n\n# Jenkins is run with user `jenkins`, uid = 1000\n# If you bind mount a volume from the host or a data container, \n# ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n    && useradd -d "$JENKINS_HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n\n# Jenkins home directory is a volume, so configuration and build history \n# can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want \n# to set on a fresh new installation. Use it to bundle additional plugins \n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\nENV TINI_VERSION 0.14.0\nENV TINI_SHA 6c41ec7d33e857d4779f14d9c74924cab0c7973485d2972419a3b7c7620ff5fd\n\n# Use tini as subreaper in Docker container to adopt zombie processes \nRUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static-amd64 -o /bin/tini && chmod +x /bin/tini \\\n  && echo "$TINI_SHA  /bin/tini" | sha256sum -c -\n\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n\n# jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION ${JENKINS_VERSION:-2.60.3}\n\n# jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=2d71b8f87c8417f9303a73d52901a59678ee6c0eefcf7325efed6035ff39372a\n\n# Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n\n# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum \n# see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n  && echo "${JENKINS_SHA}  /usr/share/jenkins/jenkins.war" | sha256sum -c -\n\nENV JENKINS_UC https://updates.jenkins.io\nENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental\nRUN chown -R ${user} "$JENKINS_HOME" /usr/share/jenkins/ref\n\n# for main web interface:\nEXPOSE ${http_port}\n\n# will be used by attached slave agents:\nEXPOSE ${agent_port}\n\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\n\nUSER ${user}\n\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENTRYPOINT ["/bin/tini", "--", "/usr/local/bin/jenkins.sh"]\n\n# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n')])])]),s("p",[n._v("docker-compose.yml:")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("version: '3'\nservices:\n  jenkins:\n    build: .\n    image: 'jenkins/jenkins:lts' #镜像\n    container_name: jenkins #容器名\n    restart: always\n    ports:\n      - '127.0.0.1:2001:8080' #本机端口号：容器端口\n      - '127.0.0.1:2002:50000'\n    volumes:\n      - '.:/var/jenkins_home' #数据持久目录,默认是当前目录\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[n._v("启动容器")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("docker-compose up -d\n")])])]),s("p",[n._v("如果有报错的话，这个时候会提示，当有显示done时，就代表成功了。\n6. 查看运行中容器")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("docker-compose ps  \n")])])]),s("p",[n._v("你会看到")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Name                Command               State                          Ports                       \n------------------------------------------------------------------------------------------------------\njenkins   /sbin/tini -- /usr/local/b ...   Up      127.0.0.1:2002->50000/tcp, 127.0.0.1:2001->8080/tcp\n")])])]),s("ol",{attrs:{start:"7"}},[s("li",[n._v("打开浏览器输入127.0.0.1:2001或者服务器ip+:2001")])])])}),[],!1,null,null,null);e.default=t.exports}}]);