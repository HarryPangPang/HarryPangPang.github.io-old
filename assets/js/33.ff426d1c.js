(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{234:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("本文将介绍强制缓存（200）和协商缓存（304）的区别")]),e._v(" "),a("h4",{attrs:{id:"_1-什么是缓存？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是缓存？"}},[e._v("#")]),e._v(" 1. 什么是缓存？")]),e._v(" "),a("p",[e._v("浏览器缓存(Brower Caching)是浏览器对之前请求过的文件进行缓存，以便下一次访问时重复使用，节省带宽，提高访问速度，降低服务器压力")]),e._v(" "),a("p",[e._v("http缓存机制主要在http响应头中设定，响应头中相关字段为Expires、Cache-Control、Last-Modified、If-Modified-Since、Etag。")]),e._v(" "),a("p",[e._v("HTTP 1.0协议中的。简而言之，就是告诉浏览器在约定的这个时间前，可以直接从缓存中获取资源（representations），而无需跑到服务器去获取。")]),e._v(" "),a("p",[e._v("另：Expires因为是对时间设定的，且时间是Greenwich Mean Time （GMT），而不是本地时间，所以对时间要求较高。")]),e._v(" "),a("h4",{attrs:{id:"_2-浏览器是如何判断是否使用缓存的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器是如何判断是否使用缓存的"}},[e._v("#")]),e._v(" 2. 浏览器是如何判断是否使用缓存的")]),e._v(" "),a("p",[e._v("第一次请求：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/6/16a8bbc2df77f4f6?w=411&h=369&f=png&s=26885",alt:""}}),e._v("\n第二次请求相同网页：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/6/16a8bbaefa56810f?w=554&h=528&f=png&s=103197",alt:""}})]),e._v(" "),a("h4",{attrs:{id:"_3-缓存的类别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓存的类别"}},[e._v("#")]),e._v(" 3. 缓存的类别")]),e._v(" "),a("p",[e._v("浏览器缓存分为强缓存和协商缓存")]),e._v(" "),a("h5",{attrs:{id:"强缓存：浏览器不会像服务器发送任何请求，直接从本地缓存中读取文件并返回status-code-200-ok"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存：浏览器不会像服务器发送任何请求，直接从本地缓存中读取文件并返回status-code-200-ok"}},[e._v("#")]),e._v(" 强缓存：浏览器不会像服务器发送任何请求，直接从本地缓存中读取文件并返回Status Code: 200 OK")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/6/16a8bc0c7e54f6ec?w=317&h=112&f=png&s=9790",alt:""}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/6/16a8bdbc4b9c8720?w=280&h=96&f=png&s=7498",alt:""}})]),e._v(" "),a("blockquote",[a("p",[e._v("200 form memory cache :\n不访问服务器，一般已经加载过该资源且缓存在了内存当中，直接从内存中读取缓存。浏览器关闭后，数据将不存在（资源被释放掉了），再次打开相同的页面时，不会出现from memory cache。")])]),e._v(" "),a("blockquote",[a("p",[e._v("200 from disk cache：\n不访问服务器，已经在之前的某个时间加载过该资源，直接从硬盘中读取缓存，关闭浏览器后，数据依然存在，此资源不会随着该页面的关闭而释放掉下次打开仍然会是from disk cache。")])]),e._v(" "),a("blockquote",[a("p",[e._v("优先访问memory cache,其次是disk cache，最后是请求网络资源")])]),e._v(" "),a("h5",{attrs:{id:"协商缓存-向服务器发送请求，服务器会根据这个请求的request-header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response-header通知浏览器从缓存中读取资源；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存-向服务器发送请求，服务器会根据这个请求的request-header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response-header通知浏览器从缓存中读取资源；"}},[e._v("#")]),e._v(" 协商缓存: 向服务器发送请求，服务器会根据这个请求的request header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response header通知浏览器从缓存中读取资源；")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/6/16a8bc3172e3a167?w=293&h=47&f=png&s=3340",alt:""}})]),e._v(" "),a("h4",{attrs:{id:"_4-强缓存和协商缓存的header参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-强缓存和协商缓存的header参数"}},[e._v("#")]),e._v(" 4. 强缓存和协商缓存的header参数")]),e._v(" "),a("p",[e._v("强缓存：")]),e._v(" "),a("p",[e._v("Expires：过期时间，如果设置了时间，则浏览器会在设置的时间内直接读取缓存，不再请求")]),e._v(" "),a("p",[e._v("Cache-Control：当值设为max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。")]),e._v(" "),a("p",[e._v("cache-control：除了该字段外，还有下面几个比较常用的设置值：")]),e._v(" "),a("pre",[a("code",[e._v("（1） max-age：用来设置资源（representations）可以被缓存多长时间，单位为秒；\n（2） s-maxage：和max-age是一样的，不过它只针对代理服务器缓存而言；\n（3）public：指示响应可被任何缓存区缓存；\n（4）private：只能针对个人用户，而不能被代理服务器缓存；\n（5）no-cache：强制客户端直接向服务器发送请求,也就是说每次请求都必须向服务器发送。服务器接收到     请求，然后判断资源是否变更，是则返回新内容，否则返回304，未变更。这个很容易让人产生误解，使人误     以为是响应不被缓存。实际上Cache-Control:     no-cache是会被缓存的，只不过每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性。\n（6）no-store：禁止一切缓存（这个才是响应不被缓存的意思）。\n")])]),e._v(" "),a("p",[e._v("协商缓存：")]),e._v(" "),a("p",[e._v("Last-Modifued/If-Modified-Since和Etag/If-None-Match是分别成对出现的，呈一一对应关系")]),e._v(" "),a("h5",{attrs:{id:"etag-if-none-match："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match："}},[e._v("#")]),e._v(" Etag/If-None-Match：")]),e._v(" "),a("p",[e._v("Etag：")]),e._v(" "),a("blockquote",[a("p",[e._v("Etag是属于HTTP 1.1属性，它是由服务器（Apache或者其他工具）生成返回给前端，用来帮助服务器控制Web端的缓存验证。\nApache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。")])]),e._v(" "),a("p",[e._v("If-None-Match:")]),e._v(" "),a("blockquote",[a("p",[e._v("当资源过期时，浏览器发现响应头里有Etag,则再次像服务器请求时带上请求头if-none-match(值是Etag的值)。服务器收到请求进行比对，决定返回200或304")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/6/16a8c60fb0ef49f0?w=918&h=279&f=png&s=20766",alt:""}})]),e._v(" "),a("h5",{attrs:{id:"last-modifued-if-modified-since："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-modifued-if-modified-since："}},[e._v("#")]),e._v(" Last-Modifued/If-Modified-Since：")]),e._v(" "),a("p",[e._v("Last-Modified：")]),e._v(" "),a("blockquote",[a("p",[e._v("浏览器向服务器发送资源最后的修改时间")])]),e._v(" "),a("p",[e._v("If-Modified-Since：")]),e._v(" "),a("blockquote",[a("p",[e._v("当资源过期时（浏览器判断Cache-Control标识的max-age过期），发现响应头具有Last-Modified声明，则再次像服务器请求时带上头if-modified-since，表示请求时间。服务器收到请求后发现有if-modified-since则与被请求资源的最后修改时间进行对比（Last-Modified）,若最后修改时间较新（大），说明资源又被改过，则返回最新资源，HTTP 200 OK;若最后修改时间较旧（小），说明资源无新修改，响应HTTP 304 走缓存。")])]),e._v(" "),a("blockquote",[a("p",[e._v("Last-Modifued/If-Modified-Since的时间精度是秒，而Etag可以更精确。\nEtag优先级是高于Last-Modifued的，所以服务器会优先验证Etag")])])])}),[],!1,null,null,null);t.default=r.exports}}]);