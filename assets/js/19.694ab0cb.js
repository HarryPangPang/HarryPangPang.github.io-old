(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{220:function(n,t,e){"use strict";e.r(t);var o=e(0),r=Object(o.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("blockquote",[e("p",[n._v("生命周期函数：在某一个时刻组件会自动调用执行的函数")])]),n._v(" "),e("h3",{attrs:{id:"react-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期"}},[n._v("#")]),n._v(" React 生命周期")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/11/88e11709488aeea3f9c6595ee4083bf3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),n._v(" "),e("blockquote",[e("p",[n._v("如图，React生命周期主要包括三个阶段：初始化阶段、运行中阶段和销毁阶段，在React不同的生命周期里，会依次触发不同的钩子函数，下面我们就来详细介绍一下React的生命周期函数")])]),n._v(" "),e("h4",{attrs:{id:"一、初始化阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、初始化阶段"}},[n._v("#")]),n._v(" 一、初始化阶段")]),n._v(" "),e("h5",{attrs:{id:"_1、设置组件的默认属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、设置组件的默认属性"}},[n._v("#")]),n._v(" 1、设置组件的默认属性")]),n._v(" "),e("pre",[e("code",[n._v("static defaultProps = {\n    name: 'sls',\n    age:23\n};\n//or\nCounter.defaltProps={name:'sls'}\n复制代码\n")])]),n._v(" "),e("h5",{attrs:{id:"_2、设置组件的初始化状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、设置组件的初始化状态"}},[n._v("#")]),n._v(" 2、设置组件的初始化状态")]),n._v(" "),e("pre",[e("code",[n._v("constructor() {\n    super();\n    this.state = {number: 0}\n}\n复制代码\n")])]),n._v(" "),e("h5",{attrs:{id:"_3、componentwillmount"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、componentwillmount"}},[n._v("#")]),n._v(" 3、componentWillMount()")]),n._v(" "),e("blockquote",[e("p",[n._v("组件即将被渲染到页面之前触发，此时可以进行开启定时器、向服务器发送请求等操作")])]),n._v(" "),e("h5",{attrs:{id:"_4、render"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、render"}},[n._v("#")]),n._v(" 4、render()")]),n._v(" "),e("blockquote",[e("p",[n._v("组件渲染")])]),n._v(" "),e("h5",{attrs:{id:"_5、componentdidmount"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、componentdidmount"}},[n._v("#")]),n._v(" 5、componentDidMount()")]),n._v(" "),e("blockquote",[e("p",[n._v("组件已经被渲染到页面中后触发：此时页面中有了真正的DOM的元素，可以进行DOM相关的操作")])]),n._v(" "),e("h4",{attrs:{id:"二、运行中阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、运行中阶段"}},[n._v("#")]),n._v(" 二、运行中阶段")]),n._v(" "),e("h5",{attrs:{id:"_1、componentwillreceiveprops"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、componentwillreceiveprops"}},[n._v("#")]),n._v(" 1、componentWillReceiveProps()")]),n._v(" "),e("blockquote",[e("p",[n._v("组件接收到属性时触发")])]),n._v(" "),e("h5",{attrs:{id:"_2、shouldcomponentupdate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、shouldcomponentupdate"}},[n._v("#")]),n._v(" 2、shouldComponentUpdate()")]),n._v(" "),e("blockquote",[e("p",[n._v("当组件接收到新属性，或者组件的状态发生改变时触发。组件首次渲染时并不会触发")])]),n._v(" "),e("pre",[e("code",[n._v("shouldComponentUpdate(newProps, newState) {\n    if (newProps.number < 5) return true;\n    return false\n}\n//该钩子函数可以接收到两个参数，新的属性和状态，返回true/false来控制组件是否需要更新。\n复制代码\n")])]),n._v(" "),e("blockquote",[e("p",[n._v("一般我们通过该函数来优化性能：")])]),n._v(" "),e("blockquote",[e("p",[n._v("一个React项目需要更新一个小组件时，很可能需要父组件更新自己的状态。而一个父组件的重新更新会造成它旗下所有的子组件重新执行render()方法，形成新的虚拟DOM，再用diff算法对新旧虚拟DOM进行结构和属性的比较，决定组件是否需要重新渲染")])]),n._v(" "),e("blockquote",[e("p",[n._v("无疑这样的操作会造成很多的性能浪费，所以我们开发者可以根据项目的业务逻辑，在"),e("code",[n._v("shouldComponentUpdate()")]),n._v("中加入条件判断，从而优化性能")])]),n._v(" "),e("blockquote",[e("p",[n._v("例如React中的就提供了一个"),e("code",[n._v("PureComponent")]),n._v("的类，当我们的组件继承于它时，组件更新时就会默认先比较新旧属性和状态，从而决定组件是否更新。值得注意的是，"),e("code",[n._v("PureComponent")]),n._v("进行的是浅比较，所以组件状态或属性改变时，都需要返回一个新的对象或数组")])]),n._v(" "),e("h5",{attrs:{id:"_3、componentwillupdate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、componentwillupdate"}},[n._v("#")]),n._v(" 3、componentWillUpdate()")]),n._v(" "),e("blockquote",[e("p",[n._v("组件即将被更新时触发")])]),n._v(" "),e("h5",{attrs:{id:"_4、componentdidupdate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、componentdidupdate"}},[n._v("#")]),n._v(" 4、componentDidUpdate()")]),n._v(" "),e("blockquote",[e("p",[n._v("组件被更新完成后触发。页面中产生了新的DOM的元素，可以进行DOM操作")])]),n._v(" "),e("h4",{attrs:{id:"三、销毁阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、销毁阶段"}},[n._v("#")]),n._v(" 三、销毁阶段")]),n._v(" "),e("h5",{attrs:{id:"_1、componentwillunmount"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、componentwillunmount"}},[n._v("#")]),n._v(" 1、componentWillUnmount()")]),n._v(" "),e("blockquote",[e("p",[n._v("组件被销毁时触发。这里我们可以进行一些清理操作，例如清理定时器，取消Redux的订阅事件等等。")])]),n._v(" "),e("h3",{attrs:{id:"有兴趣的同学也可以用下面的代码进行测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有兴趣的同学也可以用下面的代码进行测试"}},[n._v("#")]),n._v(" 有兴趣的同学也可以用下面的代码进行测试")]),n._v(" "),e("h4",{attrs:{id:"废话少说，放码过来"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#废话少说，放码过来"}},[n._v("#")]),n._v(" 废话少说，放码过来!")]),n._v(" "),e("pre",[e("code",[n._v("import React from 'react'\nimport ReactDOM from 'react-dom';\n\nclass SubCounter extends React.Component {\n    componentWillReceiveProps() {\n        console.log('9、子组件将要接收到新属性');\n    }\n\n    shouldComponentUpdate(newProps, newState) {\n        console.log('10、子组件是否需要更新');\n        if (newProps.number < 5) return true;\n        return false\n    }\n\n    componentWillUpdate() {\n        console.log('11、子组件将要更新');\n    }\n\n    componentDidUpdate() {\n        console.log('13、子组件更新完成');\n    }\n\n    componentWillUnmount() {\n        console.log('14、子组件将卸载');\n    }\n\n    render() {\n        console.log('12、子组件挂载中');\n        return (\n                <p>{this.props.number}</p>\n        )\n    }\n}\n\nclass Counter extends React.Component {\n    static defaultProps = {\n        //1、加载默认属性\n        name: 'sls',\n        age:23\n    };\n\n    constructor() {\n        super();\n        //2、加载默认状态\n        this.state = {number: 0}\n    }\n\n    componentWillMount() {\n        console.log('3、父组件挂载之前');\n    }\n\n    componentDidMount() {\n        console.log('5、父组件挂载完成');\n    }\n\n    shouldComponentUpdate(newProps, newState) {\n        console.log('6、父组件是否需要更新');\n        if (newState.number<15) return true;\n        return false\n    }\n\n    componentWillUpdate() {\n        console.log('7、父组件将要更新');\n    }\n\n    componentDidUpdate() {\n        console.log('8、父组件更新完成');\n    }\n\n    handleClick = () => {\n        this.setState({\n            number: this.state.number + 1\n        })\n    };\n\n    render() {\n        console.log('4、render(父组件挂载)');\n        return (\n            <div>\n                <p>{this.state.number}</p>\n                <button onClick={this.handleClick}>+</button>\n                {this.state.number<10?<SubCounter number={this.state.number}/>:null}\n            </div>\n        )\n    }\n}\nReactDOM.render(<Counter/>, document.getElementById('root'));\n")])])])}),[],!1,null,null,null);t.default=r.exports}}]);