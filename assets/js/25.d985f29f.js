(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{224:function(v,_,e){"use strict";e.r(_);var t=e(0),n=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"一面-1：es-基础知识点与高频考题解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一面-1：es-基础知识点与高频考题解析"}},[v._v("#")]),v._v(" "),e("strong",[v._v("一面 1：ES 基础知识点与高频考题解析")])]),v._v(" "),e("p",[v._v("JavaScript 是 ECMAScript 规范的一种实现，本小节重点梳理下 ECMAScript 中的常考知识点，然后就一些容易出现的题目进行解析。")]),v._v(" "),e("h2",{attrs:{id:"知识点梳理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知识点梳理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("知识点梳理")])]),v._v(" "),e("ul",[e("li",[v._v("变量类型\n"),e("ul",[e("li",[v._v("JS 的数据类型分类和判断")]),v._v(" "),e("li",[v._v("值类型和引用类型")])])]),v._v(" "),e("li",[v._v("原型与原型链（继承）\n"),e("ul",[e("li",[v._v("原型和原型链定义")]),v._v(" "),e("li",[v._v("继承写法")])])]),v._v(" "),e("li",[v._v("作用域和闭包\n"),e("ul",[e("li",[v._v("执行上下文")]),v._v(" "),e("li",[v._v("this")]),v._v(" "),e("li",[v._v("闭包是什么")])])]),v._v(" "),e("li",[v._v("异步\n"),e("ul",[e("li",[v._v("同步 vs 异步")]),v._v(" "),e("li",[v._v("异步和单线程")]),v._v(" "),e("li",[v._v("前端异步的场景")])])]),v._v(" "),e("li",[v._v("ES6/7 新标准的考查\n"),e("ul",[e("li",[v._v("箭头函数")]),v._v(" "),e("li",[v._v("Module")]),v._v(" "),e("li",[v._v("Class")]),v._v(" "),e("li",[v._v("Set 和 Map")]),v._v(" "),e("li",[v._v("Promise")])])])]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"变量类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量类型"}},[v._v("#")]),v._v(" "),e("strong",[v._v("变量类型")])]),v._v(" "),e("p",[v._v("JavaScript 是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。")]),v._v(" "),e("p",[v._v("ECMAScript 中定义了 6 种原始类型：")]),v._v(" "),e("ul",[e("li",[v._v("Boolean")]),v._v(" "),e("li",[v._v("String")]),v._v(" "),e("li",[v._v("Number")]),v._v(" "),e("li",[v._v("Null")]),v._v(" "),e("li",[v._v("Undefined")]),v._v(" "),e("li",[v._v("Symbol（ES6 新定义）")])]),v._v(" "),e("p",[e("strong",[v._v("注意")]),v._v("：原始类型不包含 Object。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：类型判断用到哪些方法？")])]),v._v(" "),e("h3",{attrs:{id:"typeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[v._v("#")]),v._v(" "),e("strong",[e("code",[v._v("typeof")])])]),v._v(" "),e("p",[e("code",[v._v("typeof xxx")]),v._v("得到的值有以下几种类型："),e("code",[v._v("undefined``boolean``number``string``object``function")]),v._v("、"),e("code",[v._v("symbol")]),v._v(" ，比较简单，不再一一演示了。这里需要注意的有三点：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("typeof null")]),v._v("结果是"),e("code",[v._v("object")]),v._v(" ，实际这是"),e("code",[v._v("typeof")]),v._v("的一个bug，null是原始值，非引用类型")]),v._v(" "),e("li",[e("code",[v._v("typeof [1, 2]")]),v._v("结果是"),e("code",[v._v("object")]),v._v("，结果中没有"),e("code",[v._v("array")]),v._v("这一项，引用类型除了"),e("code",[v._v("function")]),v._v("其他的全部都是"),e("code",[v._v("object")])]),v._v(" "),e("li",[e("code",[v._v("typeof Symbol()")]),v._v(" 用"),e("code",[v._v("typeof")]),v._v("获取"),e("code",[v._v("symbol")]),v._v("类型的值得到的是"),e("code",[v._v("symbol")]),v._v("，这是 ES6 新增的知识点")])]),v._v(" "),e("h3",{attrs:{id:"instanceof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[v._v("#")]),v._v(" "),e("strong",[e("code",[v._v("instanceof")])])]),v._v(" "),e("p",[v._v("用于实例和构造函数的对应。例如判断一个变量是否是数组，使用"),e("code",[v._v("typeof")]),v._v("无法判断，但可以使用"),e("code",[v._v("[1, 2] instanceof Array")]),v._v("来判断。因为，"),e("code",[v._v("[1, 2]")]),v._v("是数组，它的构造函数就是"),e("code",[v._v("Array")]),v._v("。同理：")]),v._v(" "),e("pre",[e("code",[v._v("function Foo(name) {\n    this.name = name\n}\nvar foo = new Foo('bar')\nconsole.log(foo instanceof Foo) // true\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：值类型和引用类型的区别")])]),v._v(" "),e("h3",{attrs:{id:"值类型-vs-引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#值类型-vs-引用类型"}},[v._v("#")]),v._v(" "),e("strong",[v._v("值类型 vs 引用类型")])]),v._v(" "),e("p",[v._v("除了原始类型，ES 还有引用类型，上文提到的"),e("code",[v._v("typeof")]),v._v("识别出来的类型中，只有"),e("code",[v._v("object")]),v._v("和"),e("code",[v._v("function")]),v._v("是引用类型，其他都是值类型。")]),v._v(" "),e("p",[v._v("根据 JavaScript 中的变量类型传递方式，又分为"),e("strong",[v._v("值类型")]),v._v("和"),e("strong",[v._v("引用类型")]),v._v("，值类型变量包括 Boolean、String、Number、Undefined、Null，引用类型包括了 Object 类的所有，如 Date、Array、Function 等。在参数传递方式上，值类型是按值传递，引用类型是按共享传递。")]),v._v(" "),e("p",[v._v("下面通过一个小题目，来看下两者的主要区别，以及实际开发中需要注意的地方。")]),v._v(" "),e("pre",[e("code",[v._v("// 值类型\nvar a = 10\nvar b = a\nb = 20\nconsole.log(a)  // 10\nconsole.log(b)  // 20\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("上述代码中，"),e("code",[v._v("a``b")]),v._v("都是值类型，两者分别修改赋值，相互之间没有任何影响。再看引用类型的例子：")]),v._v(" "),e("pre",[e("code",[v._v("// 引用类型\nvar a = {x: 10, y: 20}\nvar b = a\nb.x = 100\nb.y = 200\nconsole.log(a)  // {x: 100, y: 200}\nconsole.log(b)  // {x: 100, y: 200}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("上述代码中，"),e("code",[v._v("a``b")]),v._v("都是引用类型。在执行了"),e("code",[v._v("b = a")]),v._v("之后，修改"),e("code",[v._v("b")]),v._v("的属性值，"),e("code",[v._v("a")]),v._v("的也跟着变化。因为"),e("code",[v._v("a")]),v._v("和"),e("code",[v._v("b")]),v._v("都是引用类型，指向了同一个内存地址，即两者引用的是同一个值，因此"),e("code",[v._v("b")]),v._v("修改属性时，"),e("code",[v._v("a")]),v._v("的值随之改动。")]),v._v(" "),e("p",[v._v("再借助题目进一步讲解一下。")]),v._v(" "),e("blockquote",[e("p",[v._v("说出下面代码的执行结果，并分析其原因。")])]),v._v(" "),e("pre",[e("code",[v._v("function foo(a){\n    a = a * 10;\n}\nfunction bar(b){\n    b.value = 'new';\n}\nvar a = 1;\nvar b = {value: 'old'};\nfoo(a);\nbar(b);\nconsole.log(a); // 1\nconsole.log(b); // value: new\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("通过代码执行，会发现：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("a")]),v._v("的值没有发生改变")]),v._v(" "),e("li",[v._v("而"),e("code",[v._v("b")]),v._v("的值发生了改变")])]),v._v(" "),e("p",[v._v("这就是因为"),e("code",[v._v("Number")]),v._v("类型的"),e("code",[v._v("a")]),v._v("是按值传递的，而"),e("code",[v._v("Object")]),v._v("类型的"),e("code",[v._v("b")]),v._v("是按共享传递的。")]),v._v(" "),e("p",[v._v("JS 中这种设计的原因是：按值传递的类型，复制一份存入栈内存，这类类型一般不占用太多内存，而且按值传递保证了其访问速度。按共享传递的类型，是复制其引用，而不是整个复制其值（C 语言中的指针），保证过大的对象等不会因为不停复制内容而造成内存的浪费。")]),v._v(" "),e("p",[v._v("引用类型经常会在代码中按照下面的写法使用，或者说"),e("strong",[v._v("容易不知不觉中造成错误")]),v._v("！")]),v._v(" "),e("pre",[e("code",[v._v("var obj = {\n    a: 1,\n    b: [1,2,3]\n}\nvar a = obj.a\nvar b = obj.b\na = 2\nb.push(4)\nconsole.log(obj, a, b)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("虽然"),e("code",[v._v("obj")]),v._v("本身是个引用类型的变量（对象），但是内部的"),e("code",[v._v("a")]),v._v("和"),e("code",[v._v("b")]),v._v("一个是值类型一个是引用类型，"),e("code",[v._v("a")]),v._v("的赋值不会改变"),e("code",[v._v("obj.a")]),v._v("，但是"),e("code",[v._v("b")]),v._v("的操作却会反映到"),e("code",[v._v("obj")]),v._v("对象上。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"原型和原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型和原型链"}},[v._v("#")]),v._v(" "),e("strong",[v._v("原型和原型链")])]),v._v(" "),e("p",[v._v("JavaScript 是基于原型的语言，原型理解起来非常简单，但却特别重要，下面还是通过题目来理解下JavaScript 的原型概念。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何理解 JavaScript 的原型")])]),v._v(" "),e("p",[v._v("对于这个问题，可以从下面这几个要点来理解和回答，"),e("strong",[v._v("下面几条必须记住并且理解")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（"),e("code",[v._v("null")]),v._v("除外）")])]),v._v(" "),e("li",[e("strong",[v._v("所有的引用类型（数组、对象、函数），都有一个"),e("code",[v._v("__proto__")]),v._v("属性，属性值是一个普通的对象")])]),v._v(" "),e("li",[e("strong",[v._v("所有的函数，都有一个"),e("code",[v._v("prototype")]),v._v("属性，属性值也是一个普通的对象")])]),v._v(" "),e("li",[e("strong",[v._v("所有的引用类型（数组、对象、函数），"),e("code",[v._v("__proto__")]),v._v("属性值指向它的构造函数的"),e("code",[v._v("prototype")]),v._v("属性值")])])]),v._v(" "),e("p",[v._v("通过代码解释一下，大家可自行运行以下代码，看结果。")]),v._v(" "),e("pre",[e("code",[v._v("// 要点一：自由扩展属性\nvar obj = {}; obj.a = 100;\nvar arr = []; arr.a = 100;\nfunction fn () {}\nfn.a = 100;\n\n// 要点二：__proto__\nconsole.log(obj.__proto__);\nconsole.log(arr.__proto__);\nconsole.log(fn.__proto__);\n\n// 要点三：函数有 prototype\nconsole.log(fn.prototype)\n\n// 要点四：引用类型的 __proto__ 属性值指向它的构造函数的 prototype 属性值\nconsole.log(obj.__proto__ === Object.prototype)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h3",{attrs:{id:"原型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[v._v("#")]),v._v(" "),e("strong",[v._v("原型")])]),v._v(" "),e("p",[v._v("先写一个简单的代码示例。")]),v._v(" "),e("pre",[e("code",[v._v("// 构造函数\nfunction Foo(name, age) {\n    this.name = name\n}\nFoo.prototype.alertName = function () {\n    alert(this.name)\n}\n// 创建示例\nvar f = new Foo('zhangsan')\nf.printName = function () {\n    console.log(this.name)\n}\n// 测试\nf.printName()\nf.alertName()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("执行"),e("code",[v._v("printName")]),v._v("时很好理解，但是执行"),e("code",[v._v("alertName")]),v._v("时发生了什么？这里再记住一个重点 "),e("strong",[v._v("当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的"),e("code",[v._v("__proto__")]),v._v("（即它的构造函数的"),e("code",[v._v("prototype")]),v._v("）中寻找")]),v._v("，因此"),e("code",[v._v("f.alertName")]),v._v("就会找到"),e("code",[v._v("Foo.prototype.alertName")]),v._v("。")]),v._v(" "),e("p",[v._v("那么如何判断这个属性是不是对象本身的属性呢？使用"),e("code",[v._v("hasOwnProperty")]),v._v("，常用的地方是遍历一个对象的时候。")]),v._v(" "),e("pre",[e("code",[v._v("var item\nfor (item in f) {\n    // 高级浏览器已经在 for in 中屏蔽了来自原型的属性，但是这里建议大家还是加上这个判断，保证程序的健壮性\n    if (f.hasOwnProperty(item)) {\n        console.log(item)\n    }\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何理解 JS 的原型链")])]),v._v(" "),e("h3",{attrs:{id:"原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[v._v("#")]),v._v(" "),e("strong",[v._v("原型链")])]),v._v(" "),e("p",[v._v("还是接着上面的示例，如果执行"),e("code",[v._v("f.toString()")]),v._v("时，又发生了什么？")]),v._v(" "),e("pre",[e("code",[v._v("// 省略 N 行\n\n// 测试\nf.printName()\nf.alertName()\nf.toString()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("因为"),e("code",[v._v("f")]),v._v("本身没有"),e("code",[v._v("toString()")]),v._v("，并且"),e("code",[v._v("f.__proto__")]),v._v("（即"),e("code",[v._v("Foo.prototype")]),v._v("）中也没有"),e("code",[v._v("toString")]),v._v("。这个问题还是得拿出刚才那句话——"),e("strong",[v._v("当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的"),e("code",[v._v("__proto__")]),v._v("（即它的构造函数的"),e("code",[v._v("prototype")]),v._v("）中寻找")]),v._v("。")]),v._v(" "),e("p",[v._v("如果在"),e("code",[v._v("f.__proto__")]),v._v("中没有找到"),e("code",[v._v("toString")]),v._v("，那么就继续去"),e("code",[v._v("f.__proto__.__proto__")]),v._v("中寻找，因为"),e("code",[v._v("f.__proto__")]),v._v("就是一个普通的对象而已嘛！")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("f.__proto__")]),v._v("即"),e("code",[v._v("Foo.prototype")]),v._v("，没有找到"),e("code",[v._v("toString")]),v._v("，继续往上找")]),v._v(" "),e("li",[e("code",[v._v("f.__proto__.__proto__")]),v._v("即"),e("code",[v._v("Foo.prototype.__proto__")]),v._v("。"),e("code",[v._v("Foo.prototype")]),v._v("就是一个普通的对象，因此"),e("code",[v._v("Foo.prototype.__proto__")]),v._v("就是"),e("code",[v._v("Object.prototype")]),v._v("，在这里可以找到"),e("code",[v._v("toString")])]),v._v(" "),e("li",[v._v("因此"),e("code",[v._v("f.toString")]),v._v("最终对应到了"),e("code",[v._v("Object.prototype.toString")])])]),v._v(" "),e("p",[v._v("这样一直往上找，你会发现是一个链式的结构，所以叫做“原型链”。如果一直找到最上层都没有找到，那么就宣告失败，返回"),e("code",[v._v("undefined")]),v._v("。最上层是什么 —— "),e("code",[v._v("Object.prototype.__proto__ === null")])]),v._v(" "),e("h3",{attrs:{id:"原型链中的this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型链中的this"}},[v._v("#")]),v._v(" "),e("strong",[v._v("原型链中的"),e("code",[v._v("this")])])]),v._v(" "),e("p",[v._v("所有从原型或更高级原型中得到、执行的方法，其中的"),e("code",[v._v("this")]),v._v("在执行时，就指向了当前这个触发事件执行的对象。因此"),e("code",[v._v("printName")]),v._v("和"),e("code",[v._v("alertName")]),v._v("中的"),e("code",[v._v("this")]),v._v("都是"),e("code",[v._v("f")]),v._v("。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"作用域和闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域和闭包"}},[v._v("#")]),v._v(" "),e("strong",[v._v("作用域和闭包")])]),v._v(" "),e("p",[v._v("作用域和闭包是前端面试中，最可能考查的知识点。例如下面的题目：")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：现在有个 HTML 片段，要求编写代码，点击编号为几的链接就"),e("code",[v._v("alert")]),v._v("弹出其编号")])]),v._v(" "),e("pre",[e("code",[v._v("<ul>\n    <li>编号1，点击我请弹出1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n</ul>\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("一般不知道这个题目用闭包的话，会写出下面的代码：")]),v._v(" "),e("pre",[e("code",[v._v("var list = document.getElementsByTagName('li');\nfor (var i = 0; i < list.length; i++) {\n    list[i].addEventListener('click', function(){\n        alert(i + 1)\n    }, true)\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("实际上执行才会发现始终弹出的是"),e("code",[v._v("6")]),v._v("，这时候就应该通过闭包来解决：")]),v._v(" "),e("pre",[e("code",[v._v("var list = document.getElementsByTagName('li');\nfor (var i = 0; i < list.length; i++) {\n    list[i].addEventListener('click', function(i){\n        return function(){\n            alert(i + 1)\n        }\n    }(i), true)\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("要理解闭包，就需要我们从「执行上下文」开始讲起。")]),v._v(" "),e("h3",{attrs:{id:"执行上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[v._v("#")]),v._v(" "),e("strong",[v._v("执行上下文")])]),v._v(" "),e("p",[v._v("先讲一个关于 "),e("strong",[v._v("变量提升")]),v._v(" 的知识点，面试中可能会遇见下面的问题，很多候选人都回答错误：")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：说出下面执行的结果（这里笔者直接注释输出了）")])]),v._v(" "),e("pre",[e("code",[v._v("console.log(a)  // undefined\nvar a = 100\n\nfn('zhangsan')  // 'zhangsan' 20\nfunction fn(name) {\n    age = 20\n    console.log(name, age)\n    var age\n}\n\nconsole.log(b); // 这里报错\n// Uncaught ReferenceError: b is not defined\nb = 100;\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("在一段 JS 脚本（即一个"),e("code",[v._v("<script>")]),v._v("标签中）执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个 "),e("strong",[v._v("全局执行上下文")]),v._v(" 环境，先把代码中即将执行的（内部函数的不算，因为你不知道函数何时执行）变量、函数声明都拿出来。变量先暂时赋值为"),e("code",[v._v("undefined")]),v._v("，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。再次强调，这是在代码执行之前才开始的工作。")]),v._v(" "),e("p",[v._v("我们来看下上面的面试小题目，为什么"),e("code",[v._v("a")]),v._v("是"),e("code",[v._v("undefined")]),v._v("，而"),e("code",[v._v("b")]),v._v("却报错了，实际 JS 在代码执行之前，要「全文解析」，发现"),e("code",[v._v("var a")]),v._v("，知道有个"),e("code",[v._v("a")]),v._v("的变量，存入了执行上下文，而"),e("code",[v._v("b")]),v._v("没有找到"),e("code",[v._v("var")]),v._v("关键字，这时候没有在执行上下文提前「占位」，所以代码执行的时候，提前报到的"),e("code",[v._v("a")]),v._v("是有记录的，只不过值暂时还没有赋值，即为"),e("code",[v._v("undefined")]),v._v("，而"),e("code",[v._v("b")]),v._v("在执行上下文没有找到，自然会报错（没有找到"),e("code",[v._v("b")]),v._v("的引用）。")]),v._v(" "),e("p",[v._v("另外，一个函数在执行之前，也会创建一个 "),e("strong",[v._v("函数执行上下文")]),v._v(" 环境，跟 "),e("strong",[v._v("全局上下文")]),v._v(" 差不多，不过 "),e("strong",[v._v("函数执行上下文")]),v._v(" 中会多出"),e("code",[v._v("this``arguments")]),v._v("和函数的参数。参数和"),e("code",[v._v("arguments")]),v._v("好理解，这里的"),e("code",[v._v("this")]),v._v("咱们需要专门讲解。")]),v._v(" "),e("p",[v._v("总结一下：")]),v._v(" "),e("ul",[e("li",[v._v("范围：一段"),e("code",[v._v("<script>")]),v._v("、js 文件或者一个函数")]),v._v(" "),e("li",[v._v("全局上下文：变量定义，函数声明")]),v._v(" "),e("li",[v._v("函数上下文：变量定义，函数声明，"),e("code",[v._v("this")]),v._v("，"),e("code",[v._v("arguments")])])]),v._v(" "),e("h3",{attrs:{id:"this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[v._v("#")]),v._v(" "),e("strong",[e("code",[v._v("this")])])]),v._v(" "),e("p",[v._v("先搞明白一个很重要的概念 —— "),e("strong",[e("code",[v._v("this")]),v._v("的值是在执行的时候才能确认，定义的时候不能确认！")]),v._v(" 为什么呢 —— 因为"),e("code",[v._v("this")]),v._v("是执行上下文环境的一部分，而执行上下文需要在代码执行之前确定，而不是定义的时候。看如下例子")]),v._v(" "),e("pre",[e("code",[v._v("var a = {\n    name: 'A',\n    fn: function () {\n        console.log(this.name)\n    }\n}\na.fn()  // this === a\na.fn.call({name: 'B'})  // this === {name: 'B'}\nvar fn1 = a.fn\nfn1()  // this === window\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[e("code",[v._v("this")]),v._v("执行会有不同，主要集中在这几个场景中")]),v._v(" "),e("ul",[e("li",[v._v("作为构造函数执行，构造函数中")]),v._v(" "),e("li",[v._v("作为对象属性执行，上述代码中"),e("code",[v._v("a.fn()")])]),v._v(" "),e("li",[v._v("作为普通函数执行，上述代码中"),e("code",[v._v("fn1()")])]),v._v(" "),e("li",[v._v("用于"),e("code",[v._v("call``apply``bind")]),v._v("，上述代码中"),e("code",[v._v("a.fn.call({name: 'B'})")])])]),v._v(" "),e("p",[v._v("下面再来讲解下什么是作用域和作用域链，作用域链和作用域也是常考的题目。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何理解 JS 的作用域和作用域链")])]),v._v(" "),e("h3",{attrs:{id:"作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[v._v("#")]),v._v(" "),e("strong",[v._v("作用域")])]),v._v(" "),e("p",[v._v("ES6 之前 JS 没有块级作用域。例如")]),v._v(" "),e("pre",[e("code",[v._v("if (true) {\n    var name = 'zhangsan'\n}\nconsole.log(name)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("从上面的例子可以体会到作用域的概念，作用域就是一个独立的地盘，让变量不会外泄、暴露出去。上面的"),e("code",[v._v("name")]),v._v("就被暴露出去了，因此，"),e("strong",[v._v("JS 没有块级作用域，只有全局作用域和函数作用域")]),v._v("。")]),v._v(" "),e("pre",[e("code",[v._v("var a = 100\nfunction fn() {\n    var a = 200\n    console.log('fn', a)\n}\nconsole.log('global', a)\nfn()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("全局作用域就是最外层的作用域，如果我们写了很多行 JS 代码，变量定义都没有用函数包括，那么它们就全部都在全局作用域中。这样的坏处就是很容易撞车、冲突。")]),v._v(" "),e("pre",[e("code",[v._v("// 张三写的代码中\nvar data = {a: 100}\n\n// 李四写的代码中\nvar data = {x: true}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("这就是为何 jQuery、Zepto 等库的源码，所有的代码都会放在"),e("code",[v._v("(function(){....})()")]),v._v("中。因为放在里面的所有变量，都不会被外泄和暴露，不会污染到外面，不会对其他的库或者 JS 脚本造成影响。这是函数作用域的一个体现。")]),v._v(" "),e("p",[v._v("附：ES6 中开始加入了块级作用域，使用"),e("code",[v._v("let")]),v._v("定义变量即可，如下：")]),v._v(" "),e("pre",[e("code",[v._v("if (true) {\n    let name = 'zhangsan'\n}\nconsole.log(name)  // undefined\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h3",{attrs:{id:"作用域链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[v._v("#")]),v._v(" "),e("strong",[v._v("作用域链")])]),v._v(" "),e("p",[v._v("首先认识一下什么叫做 "),e("strong",[v._v("自由变量")]),v._v(" 。如下代码中，"),e("code",[v._v("console.log(a)")]),v._v("要得到"),e("code",[v._v("a")]),v._v("变量，但是在当前的作用域中没有定义"),e("code",[v._v("a")]),v._v("（可对比一下"),e("code",[v._v("b")]),v._v("）。当前作用域没有定义的变量，这成为 "),e("strong",[v._v("自由变量")]),v._v(" 。自由变量如何得到 —— 向父级作用域寻找。")]),v._v(" "),e("pre",[e("code",[v._v("var a = 100\nfunction fn() {\n    var b = 200\n    console.log(a)\n    console.log(b)\n}\nfn()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("如果父级也没呢？再一层一层向上寻找，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是 "),e("strong",[v._v("作用域链")]),v._v(" 。")]),v._v(" "),e("pre",[e("code",[v._v("var a = 100\nfunction F1() {\n    var b = 200\n    function F2() {\n        var c = 300\n        console.log(a) // 自由变量，顺作用域链向父作用域找\n        console.log(b) // 自由变量，顺作用域链向父作用域找\n        console.log(c) // 本作用域的变量\n    }\n    F2()\n}\nF1()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h3",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[v._v("#")]),v._v(" "),e("strong",[v._v("闭包")])]),v._v(" "),e("p",[v._v("讲完这些内容，我们再来看一个例子，通过例子来理解闭包。")]),v._v(" "),e("pre",[e("code",[v._v("function F1() {\n    var a = 100\n    return function () {\n        console.log(a)\n    }\n}\nvar f1 = F1()\nvar a = 200\nf1()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("自由变量将从作用域链中去寻找，但是 "),e("strong",[v._v("依据的是函数定义时的作用域链，而不是函数执行时")]),v._v("，以上这个例子就是闭包。闭包主要有两个应用场景：")]),v._v(" "),e("ul",[e("li",[e("p",[e("strong",[v._v("函数作为返回值")]),v._v("，上面的例子就是")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("函数作为参数传递")]),v._v("，看以下例子")]),v._v(" "),e("p",[v._v("function F1() {\nvar a = 100\nreturn function () {\nconsole.log(a)\n}\n}\nfunction F2(f1) {\nvar a = 200\nconsole.log(f1())\n}\nvar f1 = F1()\nF2(f1)")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("至此，对应着「作用域和闭包」这部分一开始的点击弹出"),e("code",[v._v("alert")]),v._v("的代码再看闭包，就很好理解了。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"异步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[v._v("#")]),v._v(" "),e("strong",[v._v("异步")])]),v._v(" "),e("p",[v._v("异步和同步也是面试中常考的内容，下面笔者来讲解下同步和异步的区别。")]),v._v(" "),e("h3",{attrs:{id:"同步-vs-异步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步-vs-异步"}},[v._v("#")]),v._v(" "),e("strong",[v._v("同步 vs 异步")])]),v._v(" "),e("p",[v._v("先看下面的 demo，根据程序阅读起来表达的意思，应该是先打印"),e("code",[v._v("100")]),v._v("，1秒钟之后打印"),e("code",[v._v("200")]),v._v("，最后打印"),e("code",[v._v("300")]),v._v("。但是实际运行根本不是那么回事。")]),v._v(" "),e("pre",[e("code",[v._v("console.log(100)\nsetTimeout(function () {\n    console.log(200)\n}, 1000)\nconsole.log(300)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("再对比以下程序。先打印"),e("code",[v._v("100")]),v._v("，再弹出"),e("code",[v._v("200")]),v._v("（等待用户确认），最后打印"),e("code",[v._v("300")]),v._v("。这个运行效果就符合预期要求。")]),v._v(" "),e("pre",[e("code",[v._v("console.log(100)\nalert(200)  // 1秒钟之后点击确认\nconsole.log(300)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("这俩到底有何区别？—— 第一个示例中间的步骤根本没有阻塞接下来程序的运行，而第二个示例却阻塞了后面程序的运行。前面这种表现就叫做 "),e("strong",[v._v("异步")]),v._v("（后面这个叫做 "),e("strong",[v._v("同步")]),v._v(" ），即"),e("strong",[v._v("不会阻塞后面程序的运行")]),v._v("。")]),v._v(" "),e("h3",{attrs:{id:"异步和单线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步和单线程"}},[v._v("#")]),v._v(" "),e("strong",[v._v("异步和单线程")])]),v._v(" "),e("p",[v._v("JS 需要异步的根本原因是 "),e("strong",[v._v("JS 是单线程运行的")]),v._v("，即在同一时间只能做一件事，不能“一心二用”。")]),v._v(" "),e("p",[v._v("一个 Ajax 请求由于网络比较慢，请求需要 5 秒钟。如果是同步，这 5 秒钟页面就卡死在这里啥也干不了了。异步的话，就好很多了，5 秒等待就等待了，其他事情不耽误做，至于那 5 秒钟等待是网速太慢，不是因为 JS 的原因。")]),v._v(" "),e("p",[v._v("讲到单线程，我们再来看个真题：")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：讲解下面代码的执行过程和结果")])]),v._v(" "),e("pre",[e("code",[v._v("var a = true;\nsetTimeout(function(){\n    a = false;\n}, 100)\nwhile(a){\n    console.log('while执行了')\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("这是一个很有迷惑性的题目，不少候选人认为"),e("code",[v._v("100ms")]),v._v("之后，由于"),e("code",[v._v("a")]),v._v("变成了"),e("code",[v._v("false")]),v._v("，所以"),e("code",[v._v("while")]),v._v("就中止了，实际不是这样，因为JS是单线程的，所以进入"),e("code",[v._v("while")]),v._v("循环之后，没有「时间」（线程）去跑定时器了，所以这个代码跑起来是个死循环！")]),v._v(" "),e("h3",{attrs:{id:"前端异步的场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端异步的场景"}},[v._v("#")]),v._v(" "),e("strong",[v._v("前端异步的场景")])]),v._v(" "),e("ul",[e("li",[v._v("定时 "),e("code",[v._v("setTimeout``setInverval")])]),v._v(" "),e("li",[v._v("网络请求，如 "),e("code",[v._v("Ajax``<img>")]),v._v("加载")])]),v._v(" "),e("p",[v._v("Ajax 代码示例")]),v._v(" "),e("pre",[e("code",[v._v("console.log('start')\n$.get('./data1.json', function (data1) {\n    console.log(data1)\n})\nconsole.log('end')\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("img 代码示例（常用于打点统计）")]),v._v(" "),e("pre",[e("code",[v._v("console.log('start')\nvar img = document.createElement('img')\n// 或者 img = new Image()\nimg.onload = function () {\n    console.log('loaded')\n    img.onload = null\n}\nimg.src = '/xxx.png'\nconsole.log('end')\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"es6-7-新标准的考查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-7-新标准的考查"}},[v._v("#")]),v._v(" "),e("strong",[v._v("ES6/7 新标准的考查")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：ES6 箭头函数中的"),e("code",[v._v("this")]),v._v("和普通函数中的有什么不同")])]),v._v(" "),e("h3",{attrs:{id:"箭头函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[v._v("#")]),v._v(" "),e("strong",[v._v("箭头函数")])]),v._v(" "),e("p",[v._v("箭头函数是 ES6 中新的函数定义形式，"),e("code",[v._v("function name(arg1, arg2) {...}")]),v._v("可以使用"),e("code",[v._v("(arg1, arg2) => {...}")]),v._v("来定义。示例如下：")]),v._v(" "),e("pre",[e("code",[v._v("// JS 普通函数\nvar arr = [1, 2, 3]\narr.map(function (item) {\n    console.log(index)\n    return item + 1\n})\n\n// ES6 箭头函数\nconst arr = [1, 2, 3]\narr.map((item, index) => {\n    console.log(index)\n    return item + 1\n})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("箭头函数存在的意义，第一写起来更加简洁，第二可以解决 ES6 之前函数执行中"),e("code",[v._v("this")]),v._v("是全局变量的问题，看如下代码")]),v._v(" "),e("pre",[e("code",[v._v("function fn() {\n    console.log('real', this)  // {a: 100} ，该作用域下的 this 的真实的值\n    var arr = [1, 2, 3]\n    // 普通 JS\n    arr.map(function (item) {\n        console.log('js', this)  // window 。普通函数，这里打印出来的是全局变量，令人费解\n        return item + 1\n    })\n    // 箭头函数\n    arr.map(item => {\n        console.log('es6', this)  // {a: 100} 。箭头函数，这里打印的就是父作用域的 this\n        return item + 1\n    })\n}\nfn.call({a: 100})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：ES6 模块化如何使用？")])]),v._v(" "),e("h3",{attrs:{id:"module"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[v._v("#")]),v._v(" "),e("strong",[v._v("Module")])]),v._v(" "),e("p",[v._v("ES6 中模块化语法更加简洁，直接看示例。")]),v._v(" "),e("p",[v._v("如果只是输出一个唯一的对象，使用"),e("code",[v._v("export default")]),v._v("即可，代码如下")]),v._v(" "),e("pre",[e("code",[v._v("// 创建 util1.js 文件，内容如\nexport default {\n    a: 100\n}\n\n// 创建 index.js 文件，内容如\nimport obj from './util1.js'\nconsole.log(obj)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("如果想要输出许多个对象，就不能用"),e("code",[v._v("default")]),v._v("了，且"),e("code",[v._v("import")]),v._v("时候要加"),e("code",[v._v("{...}")]),v._v("，代码如下")]),v._v(" "),e("pre",[e("code",[v._v("// 创建 util2.js 文件，内容如\nexport function fn1() {\n    alert('fn1')\n}\nexport function fn2() {\n    alert('fn2')\n}\n\n// 创建 index.js 文件，内容如\nimport { fn1, fn2 } from './util2.js'\nfn1()\nfn2()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：ES6 class 和普通构造函数的区别")])]),v._v(" "),e("h3",{attrs:{id:"class"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[v._v("#")]),v._v(" "),e("strong",[v._v("class")])]),v._v(" "),e("p",[v._v("class 其实一直是 JS 的关键字（保留字），但是一直没有正式使用，直到 ES6 。 ES6 的 class 就是取代之前构造函数初始化对象的形式，从语法上更加符合面向对象的写法。例如：")]),v._v(" "),e("p",[v._v("JS 构造函数的写法")]),v._v(" "),e("pre",[e("code",[v._v("function MathHandle(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nMathHandle.prototype.add = function () {\n  return this.x + this.y;\n};\n\nvar m = new MathHandle(1, 2);\nconsole.log(m.add())\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("用 ES6 class 的写法")]),v._v(" "),e("pre",[e("code",[v._v("class MathHandle {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add() {\n    return this.x + this.y;\n  }\n}\nconst m = new MathHandle(1, 2);\nconsole.log(m.add())\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("注意以下几点，全都是关于 class 语法的：")]),v._v(" "),e("ul",[e("li",[v._v("class 是一种新的语法形式，是"),e("code",[v._v("class Name {...}")]),v._v("这种形式，和函数的写法完全不一样")]),v._v(" "),e("li",[v._v("两者对比，构造函数函数体的内容要放在 class 中的"),e("code",[v._v("constructor")]),v._v("函数中，"),e("code",[v._v("constructor")]),v._v("即构造器，初始化实例时默认执行")]),v._v(" "),e("li",[v._v("class 中函数的写法是"),e("code",[v._v("add() {...}")]),v._v("这种形式，并没有"),e("code",[v._v("function")]),v._v("关键字")])]),v._v(" "),e("p",[v._v("使用 class 来实现继承就更加简单了，至少比构造函数实现继承简单很多。看下面例子")]),v._v(" "),e("p",[v._v("JS 构造函数实现继承")]),v._v(" "),e("pre",[e("code",[v._v("// 动物\nfunction Animal() {\n    this.eat = function () {\n        console.log('animal eat')\n    }\n}\n// 狗\nfunction Dog() {\n    this.bark = function () {\n        console.log('dog bark')\n    }\n}\nDog.prototype = new Animal()\n// 哈士奇\nvar hashiqi = new Dog()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("ES6 class 实现继承")]),v._v(" "),e("pre",[e("code",[v._v("class Animal {\n    constructor(name) {\n        this.name = name\n    }\n    eat() {\n        console.log(`${this.name} eat`)\n    }\n}\n\nclass Dog extends Animal {\n    constructor(name) {\n        super(name)\n        this.name = name\n    }\n    say() {\n        console.log(`${this.name} say`)\n    }\n}\nconst dog = new Dog('哈士奇')\ndog.say()\ndog.eat()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("注意以下两点：")]),v._v(" "),e("ul",[e("li",[v._v("使用"),e("code",[v._v("extends")]),v._v("即可实现继承，更加符合经典面向对象语言的写法，如 Java")]),v._v(" "),e("li",[v._v("子类的"),e("code",[v._v("constructor")]),v._v("一定要执行"),e("code",[v._v("super()")]),v._v("，以调用父类的"),e("code",[v._v("constructor")])])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：ES6 中新增的数据类型有哪些？")])]),v._v(" "),e("h3",{attrs:{id:"set-和-map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set-和-map"}},[v._v("#")]),v._v(" "),e("strong",[v._v("Set 和 Map")])]),v._v(" "),e("p",[v._v("Set 和 Map 都是 ES6 中新增的数据结构，是对当前 JS 数组和对象这两种重要数据结构的扩展。由于是新增的数据结构，目前尚未被大规模使用，但是作为前端程序员，提前了解是必须做到的。先总结一下两者最关键的地方：")]),v._v(" "),e("ul",[e("li",[v._v("Set 类似于数组，但数组可以允许元素重复，Set 不允许元素重复")]),v._v(" "),e("li",[v._v("Map 类似于对象，但普通对象的 key 必须是字符串或者数字，而 Map 的 key 可以是任何数据类型")])]),v._v(" "),e("p",[e("strong",[v._v("Set")])]),v._v(" "),e("p",[v._v("Set 实例不允许元素有重复，可以通过以下示例证明。可以通过一个数组初始化一个 Set 实例，或者通过"),e("code",[v._v("add")]),v._v("添加元素，元素不能重复，重复的会被忽略。")]),v._v(" "),e("pre",[e("code",[v._v("// 例1\nconst set = new Set([1, 2, 3, 4, 4]);\nconsole.log(set) // Set(4) {1, 2, 3, 4}\n\n// 例2\nconst set = new Set();\n[2, 3, 5, 4, 5, 8, 8].forEach(item => set.add(item));\nfor (let item of set) {\n  console.log(item);\n}\n// 2 3 5 4 8\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("Set 实例的属性和方法有")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("size")]),v._v("：获取元素数量。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("add(value)")]),v._v("：添加元素，返回 Set 实例本身。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("delete(value)")]),v._v("：删除元素，返回一个布尔值，表示删除是否成功。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("has(value)")]),v._v("：返回一个布尔值，表示该值是否是 Set 实例的元素。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("clear()")]),v._v("：清除所有元素，没有返回值。")]),v._v(" "),e("p",[v._v("const s = new Set();\ns.add(1).add(2).add(2); // 添加元素")]),v._v(" "),e("p",[v._v("s.size // 2")]),v._v(" "),e("p",[v._v("s.has(1) // true\ns.has(2) // true\ns.has(3) // false")]),v._v(" "),e("p",[v._v("s.delete(2);\ns.has(2) // false")]),v._v(" "),e("p",[v._v("s.clear();\nconsole.log(s);  // Set(0) {}")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("Set 实例的遍历，可使用如下方法")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("keys()")]),v._v("：返回键名的遍历器。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("values()")]),v._v("：返回键值的遍历器。不过由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以"),e("code",[v._v("keys()")]),v._v("和"),e("code",[v._v("values()")]),v._v("返回结果一致。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("entries()")]),v._v("：返回键值对的遍历器。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("forEach()")]),v._v("：使用回调函数遍历每个成员。")]),v._v(" "),e("p",[v._v("let set = new Set(['aaa', 'bbb', 'ccc']);")]),v._v(" "),e("p",[v._v("for (let item of set.keys()) {\nconsole.log(item);\n}\n// aaa\n// bbb\n// ccc")]),v._v(" "),e("p",[v._v("for (let item of set.values()) {\nconsole.log(item);\n}\n// aaa\n// bbb\n// ccc")]),v._v(" "),e("p",[v._v('for (let item of set.entries()) {\nconsole.log(item);\n}\n// ["aaa", "aaa"]\n// ["bbb", "bbb"]\n// ["ccc", "ccc"]')]),v._v(" "),e("p",[v._v("set.forEach((value, key) => console.log(key + ' : ' + value))\n// aaa : aaa\n// bbb : bbb\n// ccc : ccc")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[e("strong",[v._v("Map")])]),v._v(" "),e("p",[v._v("Map 的用法和普通对象基本一致，先看一下它能用非字符串或者数字作为 key 的特性。")]),v._v(" "),e("pre",[e("code",[v._v("const map = new Map();\nconst obj = {p: 'Hello World'};\n\nmap.set(obj, 'OK')\nmap.get(obj) // \"OK\"\n\nmap.has(obj) // true\nmap.delete(obj) // true\nmap.has(obj) // false\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("需要使用"),e("code",[v._v("new Map()")]),v._v("初始化一个实例，下面代码中"),e("code",[v._v("set``get``has``delete")]),v._v("顾名即可思义（下文也会演示）。其中，"),e("code",[v._v("map.set(obj, 'OK')")]),v._v("就是用对象作为的 key （不光可以是对象，任何数据类型都可以），并且后面通过"),e("code",[v._v("map.get(obj)")]),v._v("正确获取了。")]),v._v(" "),e("p",[v._v("Map 实例的属性和方法如下：")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("size")]),v._v("：获取成员的数量")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("set")]),v._v("：设置成员 key 和 value")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("get")]),v._v("：获取成员属性值")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("has")]),v._v("：判断成员是否存在")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("delete")]),v._v("：删除成员")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("clear")]),v._v("：清空所有")]),v._v(" "),e("p",[v._v("const map = new Map();\nmap.set('aaa', 100);\nmap.set('bbb', 200);")]),v._v(" "),e("p",[v._v("map.size // 2")]),v._v(" "),e("p",[v._v("map.get('aaa') // 100")]),v._v(" "),e("p",[v._v("map.has('aaa') // true")]),v._v(" "),e("p",[v._v("map.delete('aaa')\nmap.has('aaa') // false")]),v._v(" "),e("p",[v._v("map.clear()")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("Map 实例的遍历方法有：")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("keys()")]),v._v("：返回键名的遍历器。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("values()")]),v._v("：返回键值的遍历器。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("entries()")]),v._v("：返回所有成员的遍历器。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("forEach()")]),v._v("：遍历 Map 的所有成员。")]),v._v(" "),e("p",[v._v("const map = new Map();\nmap.set('aaa', 100);\nmap.set('bbb', 200);")]),v._v(" "),e("p",[v._v('for (let key of map.keys()) {\nconsole.log(key);\n}\n// "aaa"\n// "bbb"')]),v._v(" "),e("p",[v._v("for (let value of map.values()) {\nconsole.log(value);\n}\n// 100\n// 200")]),v._v(" "),e("p",[v._v("for (let item of map.entries()) {\nconsole.log(item[0], item[1]);\n}\n// aaa 100\n// bbb 200")]),v._v(" "),e("p",[v._v("// 或者\nfor (let [key, value] of map.entries()) {\nconsole.log(key, value);\n}\n// aaa 100\n// bbb 200")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h3",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[v._v("#")]),v._v(" "),e("strong",[v._v("Promise")])]),v._v(" "),e("p",[e("code",[v._v("Promise")]),v._v("是 CommonJS 提出来的这一种规范，有多个版本，在 ES6 当中已经纳入规范，原生支持 Promise 对象，非 ES6 环境可以用类似 Bluebird、Q 这类库来支持。")]),v._v(" "),e("p",[e("code",[v._v("Promise")]),v._v(" 可以将回调变成链式调用写法，流程更加清晰，代码更加优雅。")]),v._v(" "),e("p",[v._v("简单归纳下 Promise："),e("strong",[v._v("三个状态、两个过程、一个方法")]),v._v("，快速记忆方法："),e("strong",[v._v("3-2-1")])]),v._v(" "),e("p",[v._v("三个状态："),e("code",[v._v("pending")]),v._v("、"),e("code",[v._v("fulfilled")]),v._v("、"),e("code",[v._v("rejected")])]),v._v(" "),e("p",[v._v("两个过程：")]),v._v(" "),e("ul",[e("li",[v._v("pending→fulfilled（resolve）")]),v._v(" "),e("li",[v._v("pending→rejected（reject）")])]),v._v(" "),e("p",[v._v("一个方法："),e("code",[v._v("then")])]),v._v(" "),e("p",[v._v("当然还有其他概念，如"),e("code",[v._v("catch")]),v._v("、 "),e("code",[v._v("Promise.all/race")]),v._v("，这里就不展开了。")]),v._v(" "),e("p",[v._v("关于 ES6/7 的考查内容还有很多，本小节就不逐一介绍了，如果想继续深入学习，可以在线看《"),e("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Fes6.ruanyifeng.com%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("ES6入门"),e("OutboundLink")],1),v._v("》。")]),v._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("本小节主要总结了 ES 基础语法中面试经常考查的知识点，包括之前就考查较多的原型、异步、作用域，以及 ES6 的一些新内容，这些知识点希望大家都要掌握。")]),v._v(" "),e("p",[v._v("上一篇："),e("a",{attrs:{href:"541670"}},[v._v("准备：简历编写和面试前准备")]),v._v("下一篇："),e("a",{attrs:{href:"541672"}},[v._v("一面 2：JS-Web-API 知识点与高频考题解析")])]),v._v(" "),e("h1",{attrs:{id:"一面-2：js-web-api-知识点与高频考题解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一面-2：js-web-api-知识点与高频考题解析"}},[v._v("#")]),v._v(" "),e("strong",[v._v("一面 2：JS-Web-API 知识点与高频考题解析")])]),v._v(" "),e("p",[v._v("除 ES 基础之外，Web 前端经常会用到一些跟浏览器相关的 API，接下来我们一起梳理一下。")]),v._v(" "),e("h2",{attrs:{id:"知识点梳理-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知识点梳理-2"}},[v._v("#")]),v._v(" "),e("strong",[v._v("知识点梳理")])]),v._v(" "),e("ul",[e("li",[v._v("BOM 操作")]),v._v(" "),e("li",[v._v("DOM 操作")]),v._v(" "),e("li",[v._v("事件绑定")]),v._v(" "),e("li",[v._v("Ajax")]),v._v(" "),e("li",[v._v("存储")])]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"bom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bom"}},[v._v("#")]),v._v(" "),e("strong",[v._v("BOM")])]),v._v(" "),e("p",[v._v("BOM（浏览器对象模型）是浏览器本身的一些信息的设置和获取，例如获取浏览器的宽度、高度，设置让浏览器跳转到哪个地址。")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("navigator")])]),v._v(" "),e("li",[e("code",[v._v("screen")])]),v._v(" "),e("li",[e("code",[v._v("location")])]),v._v(" "),e("li",[e("code",[v._v("history")])])]),v._v(" "),e("p",[v._v("这些对象就是一堆非常简单粗暴的 API，没任何技术含量，讲起来一点意思都没有，大家去 MDN 或者 w3school 这种网站一查就都明白了。面试的时候，面试官基本不会出太多这方面的题目，因为只要基础知识过关了，这些 API 即便你记不住，上网一查也都知道了。下面列举一下常用功能的代码示例")]),v._v(" "),e("p",[v._v("获取浏览器特性（即俗称的"),e("code",[v._v("UA")]),v._v("）然后识别客户端，例如判断是不是 Chrome 浏览器")]),v._v(" "),e("pre",[e("code",[v._v("var ua = navigator.userAgent\nvar isChrome = ua.indexOf('Chrome')\nconsole.log(isChrome)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("获取屏幕的宽度和高度")]),v._v(" "),e("pre",[e("code",[v._v("console.log(screen.width)\nconsole.log(screen.height)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("获取网址、协议、path、参数、hash 等")]),v._v(" "),e("pre",[e("code",[v._v("// 例如当前网址是 https://juejin.im/timeline/frontend?a=10&b=10#some\nconsole.log(location.href)  // https://juejin.im/timeline/frontend?a=10&b=10#some\nconsole.log(location.protocol) // https:\nconsole.log(location.pathname) // /timeline/frontend\nconsole.log(location.search) // ?a=10&b=10\nconsole.log(location.hash) // #some\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("另外，还有调用浏览器的前进、后退功能等")]),v._v(" "),e("pre",[e("code",[v._v("history.back()\nhistory.forward()\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[v._v("#")]),v._v(" "),e("strong",[v._v("DOM")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：DOM 和 HTML 区别和联系")])]),v._v(" "),e("h3",{attrs:{id:"什么是-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dom"}},[v._v("#")]),v._v(" "),e("strong",[v._v("什么是 DOM")])]),v._v(" "),e("p",[v._v("讲 DOM 先从 HTML 讲起，讲 HTML 先从 XML 讲起。XML 是一种可扩展的标记语言，所谓可扩展就是它可以描述任何结构化的数据，它是一棵树！")]),v._v(" "),e("pre",[e("code",[v._v('<?xml version="1.0" encoding="UTF-8"?>\n<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don\'t forget me this weekend!</body>\n  <other>\n    <a></a>\n    <b></b>\n  </other>\n</note>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("HTML 是一个有既定标签标准的 XML 格式，标签的名字、层级关系和属性，都被标准化（否则浏览器无法解析）。同样，它也是一棵树。")]),v._v(" "),e("pre",[e("code",[v._v('<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="UTF-8">\n    <title>Document</title>\n</head>\n<body>\n    <div>\n        <p>this is p</p>\n    </div>\n</body>\n</html>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("我们开发完的 HTML 代码会保存到一个文档中（一般以"),e("code",[v._v(".html")]),v._v("或者"),e("code",[v._v(".htm")]),v._v("结尾），文档放在服务器上，浏览器请求服务器，这个文档被返回。因此，最终浏览器拿到的是一个文档而已，文档的内容就是 HTML 格式的代码。")]),v._v(" "),e("p",[v._v("但是浏览器要把这个文档中的 HTML 按照标准渲染成一个页面，此时浏览器就需要将这堆代码处理成自己能理解的东西，也得处理成 JS 能理解的东西，因为还得允许 JS 修改页面内容呢。")]),v._v(" "),e("p",[v._v("基于以上需求，浏览器就需要把 HTML 转变成 DOM，HTML 是一棵树，DOM 也是一棵树。对 DOM 的理解，可以暂时先抛开浏览器的内部因素，先从 JS 着手，即可以认为 DOM 就是 JS 能识别的 HTML 结构，一个普通的 JS 对象或者数组。")]),v._v(" "),e("p",[v._v("![DOM图示](data:image/svg+xml;utf8,)")]),v._v(" "),e("h3",{attrs:{id:"获取-dom-节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取-dom-节点"}},[v._v("#")]),v._v(" "),e("strong",[v._v("获取 DOM 节点")])]),v._v(" "),e("p",[v._v("最常用的 DOM API 就是获取节点，其中常用的获取方法如下面代码示例：")]),v._v(" "),e("pre",[e("code",[v._v("// 通过 id 获取\nvar div1 = document.getElementById('div1') // 元素\n\n// 通过 tagname 获取\nvar divList = document.getElementsByTagName('div')  // 集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n\n// 通过 class 获取\nvar containerList = document.getElementsByClassName('container') // 集合\n\n// 通过 CSS 选择器获取\nvar pList = document.querySelectorAll('p') // 集合\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：property 和 attribute 的区别是什么？")])]),v._v(" "),e("h3",{attrs:{id:"property"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#property"}},[v._v("#")]),v._v(" "),e("strong",[v._v("property")])]),v._v(" "),e("p",[v._v("DOM 节点就是一个 JS 对象，它符合之前讲述的对象的特征 —— 可扩展属性，因为 DOM 节点本质上也是一个 JS 对象。因此，如下代码所示，"),e("code",[v._v("p")]),v._v("可以有"),e("code",[v._v("style")]),v._v("属性，有"),e("code",[v._v("className``nodeName``nodeType")]),v._v("属性。注意，"),e("strong",[v._v("这些都是 JS 范畴的属性，符合 JS 语法标准的")]),v._v("。")]),v._v(" "),e("pre",[e("code",[v._v("var pList = document.querySelectorAll('p')\nvar p = pList[0]\nconsole.log(p.style.width)  // 获取样式\np.style.width = '100px'  // 修改样式\nconsole.log(p.className)  // 获取 class\np.className = 'p1'  // 修改 class\n\n// 获取 nodeName 和 nodeType\nconsole.log(p.nodeName)\nconsole.log(p.nodeType)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h3",{attrs:{id:"attribute"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attribute"}},[v._v("#")]),v._v(" "),e("strong",[v._v("attribute")])]),v._v(" "),e("p",[v._v("property 的获取和修改，是直接改变 JS 对象，而 attribute 是直接改变 HTML 的属性，两种有很大的区别。attribute 就是对 HTML 属性的 get 和 set，和 DOM 节点的 JS 范畴的 property 没有关系。")]),v._v(" "),e("pre",[e("code",[v._v("var pList = document.querySelectorAll('p')\nvar p = pList[0]\np.getAttribute('data-name')\np.setAttribute('data-name', 'juejin')\np.getAttribute('style')\np.setAttribute('style', 'font-size:30px;')\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("而且，get 和 set attribute 时，还会触发 DOM 的查询或者重绘、重排，频繁操作会影响页面性能。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：DOM 操作的基本 API 有哪些？")])]),v._v(" "),e("h3",{attrs:{id:"dom-树操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom-树操作"}},[v._v("#")]),v._v(" "),e("strong",[v._v("DOM 树操作")])]),v._v(" "),e("p",[v._v("新增节点")]),v._v(" "),e("pre",[e("code",[v._v("var div1 = document.getElementById('div1')\n\n// 添加新节点\nvar p1 = document.createElement('p')\np1.innerHTML = 'this is p1'\ndiv1.appendChild(p1) // 添加新创建的元素\n\n// 移动已有节点。注意，这里是“移动”，并不是拷贝\nvar p2 = document.getElementById('p2')\ndiv1.appendChild(p2)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("获取父元素")]),v._v(" "),e("pre",[e("code",[v._v("var div1 = document.getElementById('div1')\nvar parent = div1.parentElement\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("获取子元素")]),v._v(" "),e("pre",[e("code",[v._v("var div1 = document.getElementById('div1')\nvar child = div1.childNodes\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("删除节点")]),v._v(" "),e("pre",[e("code",[v._v("var div1 = document.getElementById('div1')\nvar child = div1.childNodes\ndiv1.removeChild(child[0])\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("还有其他操作的API，例如获取前一个节点、获取后一个节点等，但是面试过程中经常考到的就是上面几个。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[v._v("#")]),v._v(" "),e("strong",[v._v("事件")])]),v._v(" "),e("h3",{attrs:{id:"事件绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件绑定"}},[v._v("#")]),v._v(" "),e("strong",[v._v("事件绑定")])]),v._v(" "),e("p",[v._v("普通的事件绑定写法如下：")]),v._v(" "),e("pre",[e("code",[v._v("var btn = document.getElementById('btn1')\nbtn.addEventListener('click', function (event) {\n    // event.preventDefault() // 阻止默认行为\n    // event.stopPropagation() // 阻止冒泡\n    console.log('clicked')\n})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("为了编写简单的事件绑定，可以编写通用的事件绑定函数。这里虽然比较简单，但是会随着后文的讲解，来继续完善和丰富这个函数。")]),v._v(" "),e("pre",[e("code",[v._v("// 通用的事件绑定函数\nfunction bindEvent(elem, type, fn) {\n    elem.addEventListener(type, fn)\n}\nvar a = document.getElementById('link1')\n// 写起来更加简单了\nbindEvent(a, 'click', function(e) {\n    e.preventDefault() // 阻止默认行为\n    alert('clicked')\n})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("最后，"),e("strong",[v._v("如果面试被问到 IE 低版本兼容性问题，我劝你果断放弃这份工作机会")]),v._v("。现在互联网流量都在 App 上， IE 占比越来越少，再去为 IE 浪费青春不值得，要尽量去做 App 相关的工作。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：什么是事件冒泡？")])]),v._v(" "),e("h3",{attrs:{id:"事件冒泡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件冒泡"}},[v._v("#")]),v._v(" "),e("strong",[v._v("事件冒泡")])]),v._v(" "),e("pre",[e("code",[v._v('<body>\n    <div id="div1">\n        <p id="p1">激活</p>\n        <p id="p2">取消</p>\n        <p id="p3">取消</p>\n        <p id="p4">取消</p>\n    </div>\n    <div id="div2">\n        <p id="p5">取消</p>\n        <p id="p6">取消</p>\n    </div>\n</body>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("对于以上 HTML 代码结构，要求点击"),e("code",[v._v("p1")]),v._v("时候进入激活状态，点击其他任何"),e("code",[v._v("<p>")]),v._v("都取消激活状态，如何实现？代码如下，注意看注释：")]),v._v(" "),e("pre",[e("code",[v._v("var body = document.body\nbindEvent(body, 'click', function (e) {\n    // 所有 p 的点击都会冒泡到 body 上，因为 DOM 结构中 body 是 p 的上级节点，事件会沿着 DOM 树向上冒泡\n    alert('取消')\n})\n\nvar p1 = document.getElementById('p1')\nbindEvent(p1, 'click', function (e) {\n    e.stopPropagation() // 阻止冒泡\n    alert('激活')\n})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("如果我们在"),e("code",[v._v("p1``div1``body")]),v._v("中都绑定了事件，它是会根据 DOM 的结构来冒泡，从下到上挨个执行的。但是我们使用"),e("code",[v._v("e.stopPropagation()")]),v._v("就可以阻止冒泡")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何使用事件代理？有何好处？")])]),v._v(" "),e("h3",{attrs:{id:"事件代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件代理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("事件代理")])]),v._v(" "),e("p",[v._v("我们设定一种场景，如下代码，一个"),e("code",[v._v("<div>")]),v._v("中包含了若干个"),e("code",[v._v("<a>")]),v._v("，而且还能继续增加。那如何快捷方便地为所有"),e("code",[v._v("<a>")]),v._v("绑定事件呢？")]),v._v(" "),e("pre",[e("code",[v._v('<div id="div1">\n    <a href="#">a1</a>\n    <a href="#">a2</a>\n    <a href="#">a3</a>\n    <a href="#">a4</a>\n</div>\n<button>点击增加一个 a 标签</button>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("这里就会用到事件代理。我们要监听"),e("code",[v._v("<a>")]),v._v("的事件，但要把具体的事件绑定到"),e("code",[v._v("<div>")]),v._v("上，然后看事件的触发点是不是"),e("code",[v._v("<a>")]),v._v("。")]),v._v(" "),e("pre",[e("code",[v._v("var div1 = document.getElementById('div1')\ndiv1.addEventListener('click', function (e) {\n    // e.target 可以监听到触发点击事件的元素是哪一个\n    var target = e.target\n    if (e.nodeName === 'A') {\n        // 点击的是 <a> 元素\n        alert(target.innerHTML)\n    }\n})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("我们现在完善一下之前写的通用事件绑定函数，加上事件代理。")]),v._v(" "),e("pre",[e("code",[v._v("function bindEvent(elem, type, selector, fn) {\n    // 这样处理，可接收两种调用方式 bindEvent(div1, 'click', 'a', function () {...}) 和 bindEvent(div1, 'click', function () {...}) 这两种\n    if (fn == null) {\n        fn = selector\n        selector = null\n    }\n\n    // 绑定事件\n    elem.addEventListener(type, function (e) {\n        var target\n        if (selector) {\n            // 有 selector 说明需要做事件代理\n            // 获取触发时间的元素，即 e.target\n            target = e.target\n            // 看是否符合 selector 这个条件\n            if (target.matches(selector)) {\n                fn.call(target, e)\n            }\n        } else {\n            // 无 selector ，说明不需要事件代理\n            fn(e)\n        }\n    })\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("然后这样使用，简单很多。")]),v._v(" "),e("pre",[e("code",[v._v("// 使用代理，bindEvent 多一个 'a' 参数\nvar div1 = document.getElementById('div1')\nbindEvent(div1, 'click', 'a', function (e) {\n    console.log(this.innerHTML)\n})\n\n// 不使用代理\nvar a = document.getElementById('a1')\nbindEvent(div1, 'click', function (e) {\n    console.log(a.innerHTML)\n})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("最后，使用代理的优点如下：")]),v._v(" "),e("ul",[e("li",[v._v("使代码简洁")]),v._v(" "),e("li",[v._v("减少浏览器的内存占用")])]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"ajax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[v._v("#")]),v._v(" "),e("strong",[v._v("Ajax")])]),v._v(" "),e("h3",{attrs:{id:"xmlhttprequest"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest"}},[v._v("#")]),v._v(" "),e("strong",[v._v("XMLHttpRequest")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：手写 XMLHttpRequest 不借助任何库")])]),v._v(" "),e("p",[v._v("这是很多奇葩的、个性的面试官经常用的手段。这种考查方式存在很多争议，但是你不能完全说它是错误的，毕竟也是考查对最基础知识的掌握情况。")]),v._v(" "),e("pre",[e("code",[v._v('var xhr = new XMLHttpRequest()\nxhr.open("GET", "/api", false)\nxhr.onreadystatechange = function () {\n    // 这里的函数异步执行，可参考之前 JS 基础中的异步模块\n    if (xhr.readyState == 4) {\n        if (xhr.status == 200) {\n            alert(xhr.responseText)\n        }\n    }\n}\nxhr.send(null)\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("当然，使用 jQuery、Zepto 或 Fetch 等库来写就更加简单了，这里不再赘述。")]),v._v(" "),e("h3",{attrs:{id:"状态码说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态码说明"}},[v._v("#")]),v._v(" "),e("strong",[v._v("状态码说明")])]),v._v(" "),e("p",[v._v("上述代码中，有两处状态码需要说明。"),e("code",[v._v("xhr.readyState")]),v._v("是浏览器判断请求过程中各个阶段的，"),e("code",[v._v("xhr.status")]),v._v("是 HTTP 协议中规定的不同结果的返回状态说明。")]),v._v(" "),e("p",[e("code",[v._v("xhr.readyState")]),v._v("的状态码说明：")]),v._v(" "),e("ul",[e("li",[v._v("0 - (未初始化）还没有调用"),e("code",[v._v("send()")]),v._v("方法")]),v._v(" "),e("li",[v._v("1 -（载入）已调用"),e("code",[v._v("send()")]),v._v("方法，正在发送请求")]),v._v(" "),e("li",[v._v("2 -（载入完成）"),e("code",[v._v("send()")]),v._v("方法执行完成，已经接收到全部响应内容")]),v._v(" "),e("li",[v._v("3 -（交互）正在解析响应内容")]),v._v(" "),e("li",[v._v("4 -（完成）响应内容解析完成，可以在客户端调用了")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：HTTP 协议中，response 的状态码，常见的有哪些？")])]),v._v(" "),e("p",[e("code",[v._v("xhr.status")]),v._v("即 HTTP 状态码，有 "),e("code",[v._v("2xx``3xx``4xx``5xx")]),v._v(" 这几种，比较常用的有以下几种：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("200")]),v._v(" 正常")]),v._v(" "),e("li",[e("code",[v._v("3xx")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("301")]),v._v(" 永久重定向。如"),e("code",[v._v("http://xxx.com")]),v._v("这个 GET 请求（最后没有"),e("code",[v._v("/")]),v._v("），就会被"),e("code",[v._v("301")]),v._v("到"),e("code",[v._v("http://xxx.com/")]),v._v("（最后是"),e("code",[v._v("/")]),v._v("）")]),v._v(" "),e("li",[e("code",[v._v("302")]),v._v(" 临时重定向。临时的，不是永久的")]),v._v(" "),e("li",[e("code",[v._v("304")]),v._v(" 资源找到但是不符合请求条件，不会返回任何主体。如发送 GET 请求时，head 中有"),e("code",[v._v("If-Modified-Since: xxx")]),v._v("（要求返回更新时间是"),e("code",[v._v("xxx")]),v._v("时间之后的资源），如果此时服务器 端资源未更新，则会返回"),e("code",[v._v("304")]),v._v("，即不符合要求")])])]),v._v(" "),e("li",[e("code",[v._v("404")]),v._v(" 找不到资源")]),v._v(" "),e("li",[e("code",[v._v("5xx")]),v._v(" 服务器端出错了")])]),v._v(" "),e("p",[v._v("看完要明白，为何上述代码中要同时满足"),e("code",[v._v("xhr.readyState == 4")]),v._v("和"),e("code",[v._v("xhr.status == 200")]),v._v("。")]),v._v(" "),e("h3",{attrs:{id:"fetch-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fetch-api"}},[v._v("#")]),v._v(" "),e("strong",[v._v("Fetch API")])]),v._v(" "),e("p",[v._v("目前已经有一个获取 HTTP 请求更加方便的 API："),e("code",[v._v("Fetch")]),v._v("，通过"),e("code",[v._v("Fetch")]),v._v("提供的"),e("code",[v._v("fetch()")]),v._v("这个全局函数方法可以很简单地发起异步请求，并且支持"),e("code",[v._v("Promise")]),v._v("的回调。但是 Fetch API 是比较新的 API，具体使用的时候还需要查查 "),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fcaniuse.com%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("caniuse"),e("OutboundLink")],1),v._v("，看下其浏览器兼容情况。")]),v._v(" "),e("p",[v._v("看一个简单的例子：")]),v._v(" "),e("pre",[e("code",[v._v("fetch('some/api/data.json', {\n  method:'POST', //请求类型 GET、POST\n  headers:{}, // 请求的头信息，形式为 Headers 对象或 ByteString\n  body:{}, //请求发送的数据 blob、BufferSource、FormData、URLSearchParams（get 或head 方法中不能包含 body）\n  mode:'', //请求的模式，是否跨域等，如 cors、 no-cors 或 same-origin\n  credentials:'', //cookie 的跨域策略，如 omit、same-origin 或 include\n  cache:'', //请求的 cache 模式: default、no-store、reload、no-cache、 force-cache 或 only-if-cached\n}).then(function(response) { ... });\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[e("code",[v._v("Fetch")]),v._v(" 支持"),e("code",[v._v("headers")]),v._v("定义，通过"),e("code",[v._v("headers")]),v._v("自定义可以方便地实现多种请求方法（ PUT、GET、POST 等）、请求头（包括跨域）和"),e("code",[v._v("cache")]),v._v("策略等；除此之外还支持 response（返回数据）多种类型，比如支持二进制文件、字符串和"),e("code",[v._v("formData")]),v._v("等。")]),v._v(" "),e("h3",{attrs:{id:"跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[v._v("#")]),v._v(" "),e("strong",[v._v("跨域")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何实现跨域？")])]),v._v(" "),e("p",[v._v("浏览器中有 "),e("strong",[v._v("同源策略")]),v._v(" ，即一个域下的页面中，无法通过 Ajax 获取到其他域的接口。例如有一个接口"),e("code",[v._v("http://m.juejin.com/course/ajaxcourserecom?cid=459")]),v._v("，你自己的一个页面"),e("code",[v._v("http://www.yourname.com/page1.html")]),v._v("中的 Ajax 无法获取这个接口。这正是命中了“同源策略”。如果浏览器哪些地方忽略了同源策略，那就是浏览器的安全漏洞，需要紧急修复。")]),v._v(" "),e("p",[v._v("url 哪些地方不同算作跨域？")]),v._v(" "),e("ul",[e("li",[v._v("协议")]),v._v(" "),e("li",[v._v("域名")]),v._v(" "),e("li",[v._v("端口")])]),v._v(" "),e("p",[v._v("但是 HTML 中几个标签能逃避过同源策略——"),e("code",[v._v('<script src="xxx">')]),v._v("、"),e("code",[v._v('<img src="xxxx"/>')]),v._v("、"),e("code",[v._v('<link href="xxxx">')]),v._v("，这三个标签的"),e("code",[v._v("src/href")]),v._v("可以加载其他域的资源，不受同源策略限制。")]),v._v(" "),e("p",[v._v("因此，这使得这三个标签可以做一些特殊的事情。")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("<img>")]),v._v("可以做打点统计，因为统计方并不一定是同域的，在讲解 JS 基础知识异步的时候有过代码示例。除了能跨域之外，"),e("code",[v._v("<img>")]),v._v("几乎没有浏览器兼容问题，它是一个非常古老的标签。")]),v._v(" "),e("li",[e("code",[v._v("<script>")]),v._v("和"),e("code",[v._v("<link>")]),v._v("可以使用 CDN，CDN 基本都是其他域的链接。")]),v._v(" "),e("li",[v._v("另外"),e("code",[v._v("<script>")]),v._v("还可以实现 JSONP，能获取其他域接口的信息，接下来马上讲解。")])]),v._v(" "),e("p",[v._v("但是请注意，所有的跨域请求方式，最终都需要信息提供方来做出相应的支持和改动，也就是要经过信息提供方的同意才行，否则接收方是无法得到它们的信息的，浏览器是不允许的。")]),v._v(" "),e("h3",{attrs:{id:"解决跨域-jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域-jsonp"}},[v._v("#")]),v._v(" "),e("strong",[v._v("解决跨域 - JSONP")])]),v._v(" "),e("p",[v._v("首先，有一个概念你要明白，例如访问"),e("code",[v._v("http://coding.m.juejin.com/classindex.html")]),v._v("的时候，服务器端就一定有一个"),e("code",[v._v("classindex.html")]),v._v("文件吗？—— 不一定，服务器可以拿到这个请求，动态生成一个文件，然后返回。 同理，"),e("code",[v._v('<script src="http://coding.m.juejin.com/api.js">')]),v._v("也不一定加载一个服务器端的静态文件，服务器也可以动态生成文件并返回。OK，接下来正式开始。")]),v._v(" "),e("p",[v._v("例如我们的网站和掘金网，肯定不是一个域。我们需要掘金网提供一个接口，供我们来获取。首先，我们在自己的页面这样定义")]),v._v(" "),e("pre",[e("code",[v._v("<script>\nwindow.callback = function (data) {\n    // 这是我们跨域得到信息\n    console.log(data)\n}\n<\/script>\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("然后掘金网给我提供了一个"),e("code",[v._v("http://coding.m.juejin.com/api.js")]),v._v("，内容如下（之前说过，服务器可动态生成内容）")]),v._v(" "),e("pre",[e("code",[v._v("callback({x:100, y:200})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("最后我们在页面中加入"),e("code",[v._v('<script src="http://coding.m.juejin.com/api.js"><\/script>')]),v._v("，那么这个js加载之后，就会执行内容，我们就得到内容了。")]),v._v(" "),e("h3",{attrs:{id:"解决跨域-服务器端设置-http-header"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域-服务器端设置-http-header"}},[v._v("#")]),v._v(" "),e("strong",[v._v("解决跨域 - 服务器端设置 http header")])]),v._v(" "),e("p",[v._v("这是需要在服务器端设置的，作为前端工程师我们不用详细掌握，但是要知道有这么个解决方案。而且，现在推崇的跨域解决方案是这一种，比 JSONP 简单许多。")]),v._v(" "),e("pre",[e("code",[v._v('response.setHeader("Access-Control-Allow-Origin", "http://m.juejin.com/");  // 第二个参数填写允许跨域的域名称，不建议直接写 "*"\nresponse.setHeader("Access-Control-Allow-Headers", "X-Requested-With");\nresponse.setHeader("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");\n\n// 接收跨域的cookie\nresponse.setHeader("Access-Control-Allow-Credentials", "true");\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储"}},[v._v("#")]),v._v(" "),e("strong",[v._v("存储")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：cookie 和 localStorage 有何区别？")])]),v._v(" "),e("h3",{attrs:{id:"cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[v._v("#")]),v._v(" "),e("strong",[v._v("cookie")])]),v._v(" "),e("p",[v._v("cookie 本身不是用来做服务器端存储的（计算机领域有很多这种“狗拿耗子”的例子，例如 CSS 中的 float），它是设计用来在服务器和客户端进行信息传递的，因此我们的每个 HTTP 请求都带着 cookie。但是 cookie 也具备浏览器端存储的能力（例如记住用户名和密码），因此就被开发者用上了。")]),v._v(" "),e("p",[v._v("使用起来也非常简单，"),e("code",[v._v("document.cookie = ....")]),v._v("即可。")]),v._v(" "),e("p",[v._v("但是 cookie 有它致命的缺点：")]),v._v(" "),e("ul",[e("li",[v._v("存储量太小，只有 4KB")]),v._v(" "),e("li",[v._v("所有 HTTP 请求都带着，会影响获取资源的效率")]),v._v(" "),e("li",[v._v("API 简单，需要封装才能用")])]),v._v(" "),e("h3",{attrs:{id:"locationstorage-和-sessionstorage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#locationstorage-和-sessionstorage"}},[v._v("#")]),v._v(" "),e("strong",[v._v("locationStorage 和 sessionStorage")])]),v._v(" "),e("p",[v._v("后来，HTML5 标准就带来了"),e("code",[v._v("sessionStorage")]),v._v("和"),e("code",[v._v("localStorage")]),v._v("，先拿"),e("code",[v._v("localStorage")]),v._v("来说，它是专门为了浏览器端缓存而设计的。其优点有：")]),v._v(" "),e("ul",[e("li",[v._v("存储量增大到 5MB")]),v._v(" "),e("li",[v._v("不会带到 HTTP 请求中")]),v._v(" "),e("li",[v._v("API 适用于数据存储 "),e("code",[v._v("localStorage.setItem(key, value)``localStorage.getItem(key)")])])]),v._v(" "),e("p",[e("code",[v._v("sessionStorage")]),v._v("的区别就在于它是根据 session 过去时间而实现，而"),e("code",[v._v("localStorage")]),v._v("会永久有效，应用场景不同。例如，一些需要及时失效的重要信息放在"),e("code",[v._v("sessionStorage")]),v._v("中，一些不重要但是不经常设置的信息，放在"),e("code",[v._v("localStorage")]),v._v("中。")]),v._v(" "),e("p",[v._v("另外告诉大家一个小技巧，针对"),e("code",[v._v("localStorage.setItem")]),v._v("，使用时尽量加入到"),e("code",[v._v("try-catch")]),v._v("中，某些浏览器是禁用这个 API 的，要注意。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"小结-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("本小节总结了 W3C 标准中 Web-API 部分，面试中常考的知识点，这些也是日常开发中最常用的 API 和知识。")]),v._v(" "),e("p",[v._v("上一篇："),e("a",{attrs:{href:"541671"}},[v._v("一面 1：ES 基础知识点与高频考题解析")]),v._v("下一篇："),e("a",{attrs:{href:"541673"}},[v._v("一面 3：CSS-HTML 知识点与高频考题解析")])]),v._v(" "),e("h1",{attrs:{id:"一面-3：css-html-知识点与高频考题解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一面-3：css-html-知识点与高频考题解析"}},[v._v("#")]),v._v(" "),e("strong",[v._v("一面 3：CSS-HTML 知识点与高频考题解析")])]),v._v(" "),e("p",[v._v("CSS 和 HTML 是网页开发中布局相关的组成部分，涉及的内容比较多和杂乱，本小节重点介绍下常考的知识点。")]),v._v(" "),e("h2",{attrs:{id:"知识点梳理-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知识点梳理-3"}},[v._v("#")]),v._v(" "),e("strong",[v._v("知识点梳理")])]),v._v(" "),e("ul",[e("li",[v._v("选择器的权重和优先级")]),v._v(" "),e("li",[v._v("盒模型\n"),e("ul",[e("li",[v._v("盒子大小计算")]),v._v(" "),e("li",[v._v("margin 的重叠计算")])])]),v._v(" "),e("li",[v._v("浮动"),e("code",[v._v("float")]),v._v(" "),e("ul",[e("li",[v._v("浮动布局概念")]),v._v(" "),e("li",[v._v("清理浮动")])])]),v._v(" "),e("li",[v._v("定位"),e("code",[v._v("position")]),v._v(" "),e("ul",[e("li",[v._v("文档流概念")]),v._v(" "),e("li",[v._v("定位分类")]),v._v(" "),e("li",[v._v("fixed 定位特点")]),v._v(" "),e("li",[v._v("绝对定位计算方式")])])]),v._v(" "),e("li",[e("code",[v._v("flex")]),v._v("布局")]),v._v(" "),e("li",[v._v("如何实现居中对齐？")]),v._v(" "),e("li",[v._v("理解语义化")]),v._v(" "),e("li",[v._v("CSS3 动画")]),v._v(" "),e("li",[v._v("重绘和回流")])]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"选择器的权重和优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择器的权重和优先级"}},[v._v("#")]),v._v(" "),e("strong",[v._v("选择器的权重和优先级")])]),v._v(" "),e("p",[v._v("CSS 选择器有很多，不同的选择器的权重和优先级不一样，对于一个元素，如果存在多个选择器，那么就需要根据权重来计算其优先级。")]),v._v(" "),e("p",[v._v("权重分为四级，分别是：")]),v._v(" "),e("ol",[e("li",[v._v("代表内联样式，如"),e("code",[v._v('style="xxx"')]),v._v("，权值为 1000；")]),v._v(" "),e("li",[v._v("代表 ID 选择器，如"),e("code",[v._v("#content")]),v._v("，权值为 100；")]),v._v(" "),e("li",[v._v("代表类、伪类和属性选择器，如"),e("code",[v._v(".content")]),v._v("、"),e("code",[v._v(":hover")]),v._v("、"),e("code",[v._v("[attribute]")]),v._v("，权值为 10；")]),v._v(" "),e("li",[v._v("代表元素选择器和伪元素选择器，如"),e("code",[v._v("div")]),v._v("、"),e("code",[v._v("p")]),v._v("，权值为 1。")])]),v._v(" "),e("p",[e("strong",[v._v("需要注意的是：通用选择器（*）、子选择器（>）和相邻同胞选择器（+）并不在这四个等级中，所以他们的权值都为 0")]),v._v("。 权重值大的选择器其优先级也高，相同权重的优先级又遵循后定义覆盖前面定义的情况。")]),v._v(" "),e("h2",{attrs:{id:"盒模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#盒模型"}},[v._v("#")]),v._v(" "),e("strong",[v._v("盒模型")])]),v._v(" "),e("h3",{attrs:{id:"什么是“盒子”"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是“盒子”"}},[v._v("#")]),v._v(" "),e("strong",[v._v("什么是“盒子”")])]),v._v(" "),e("p",[v._v("初学 CSS 的朋友，一开始学 CSS 基础知识的时候一定学过"),e("code",[v._v("padding``border")]),v._v("和"),e("code",[v._v("margin")]),v._v("，即内边距、边框和外边距。它们三者就构成了一个“盒子”。就像我们收到的快递，本来买了一部小小的手机，收到的却是那么大一个盒子。因为手机白色的包装盒和手机机器之间有间隔层（内边距），手机白色盒子有厚度，虽然很薄（边框），盒子和快递箱子之间还有一层泡沫板（外边距）。这就是一个典型的盒子。")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("如上图，真正的内容就是这些文字，文字外围有 10px 的内边距，5px 的边框，10px 的外边距。看到盒子了吧？")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：盒子模型的宽度如何计算")])]),v._v(" "),e("h3",{attrs:{id:"固定宽度的盒子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#固定宽度的盒子"}},[v._v("#")]),v._v(" "),e("strong",[v._v("固定宽度的盒子")])]),v._v(" "),e("pre",[e("code",[v._v('<div style="padding:10px; border:5px solid blue; margin: 10px; width:300px;">\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n</div>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("如上图，得到网页效果之后，我们可以用截图工具来量一下文字内容的宽度。发现，文字内容的宽度刚好是 300px，也就是我们设置的宽度。")]),v._v(" "),e("p",[v._v("因此，"),e("strong",[v._v("在盒子模型中，我们设置的宽度都是内容宽度，不是整个盒子的宽度。而整个盒子的宽度是：（内容宽度 + "),e("code",[v._v("border")]),v._v("宽度 + "),e("code",[v._v("padding")]),v._v("宽度 + "),e("code",[v._v("margin")]),v._v("宽度）之和")]),v._v("。这样我们改四个中的其中一个，都会导致盒子宽度的改变。这对我们来说不友好。")]),v._v(" "),e("p",[v._v("没关系，这个东西不友好早就有人发现了，而且已经解决，下文再说。")]),v._v(" "),e("h3",{attrs:{id:"充满父容器的盒子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#充满父容器的盒子"}},[v._v("#")]),v._v(" "),e("strong",[v._v("充满父容器的盒子")])]),v._v(" "),e("p",[v._v("默认情况下，"),e("code",[v._v("div")]),v._v("是"),e("code",[v._v("display:block")]),v._v("，宽度会充满整个父容器。如下图：")]),v._v(" "),e("pre",[e("code",[v._v('<div style="padding:10px; border:5px solid blue; margin: 10px; width:300px;">\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n</div>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("但是别忘记，这个 div 是个盒子模型，它的整个宽度包括（内容宽度 + "),e("code",[v._v("border")]),v._v("宽度 + "),e("code",[v._v("padding")]),v._v("宽度 + "),e("code",[v._v("margin")]),v._v("宽度），整个的宽度充满父容器。")]),v._v(" "),e("p",[v._v("问题就在这里。如果父容器宽度不变，我们手动增大"),e("code",[v._v("margin")]),v._v("、"),e("code",[v._v("border")]),v._v("或"),e("code",[v._v("padding")]),v._v("其中一项的宽度值，都会导致内容宽度的减少。极端情况下，如果内容的宽度压缩到不能再压缩了（例如一个字的宽度），那么浏览器会强迫增加父容器的宽度。这可不是我们想要看到的。")]),v._v(" "),e("h3",{attrs:{id:"包裹内容的盒子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包裹内容的盒子"}},[v._v("#")]),v._v(" "),e("strong",[v._v("包裹内容的盒子")])]),v._v(" "),e("p",[v._v("这种情况下比较简单，内容的宽度按照内容计算，盒子的宽度将在内容宽度的基础上再增加（"),e("code",[v._v("padding")]),v._v("宽度 + "),e("code",[v._v("border")]),v._v("宽度 + "),e("code",[v._v("margin")]),v._v("宽度）之和。")]),v._v(" "),e("pre",[e("code",[v._v('<div style="padding:10px; border:5px solid blue; margin: 10px; width:300px;">\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》\n</div>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("h3",{attrs:{id:"box-sizing-border-box"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#box-sizing-border-box"}},[v._v("#")]),v._v(" "),e("code",[v._v("box-sizing:border-box")])]),v._v(" "),e("p",[v._v("前面提到，为盒子模型设置宽度，结果只是设置了内容的宽度，这个不合理。如何解决这一问题？答案就是为盒子指定样式："),e("strong",[e("code",[v._v("box-sizing:border-box")])]),v._v("。")]),v._v(" "),e("pre",[e("code",[v._v('<div style="padding:10px; border:5px solid blue; margin: 10px; width:300px; box-sizing:border-box;">\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》\n</div>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("上图中，为"),e("code",[v._v("div")]),v._v("设置了"),e("code",[v._v("box-sizing:border-box")]),v._v("之后，300px 的"),e("strong",[v._v("宽度是内容 + "),e("code",[v._v("border")]),v._v(" + 边框的宽度（不包括"),e("code",[v._v("margin")]),v._v("）")]),v._v("，这样就比较符合我们的实际要求了。建议大家在为系统写 CSS 时候，第一个样式是：")]),v._v(" "),e("pre",[e("code",[v._v("* {\n    box-sizing:border-box;\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("大名鼎鼎的 Bootstrap 也把"),e("code",[v._v("box-sizing:border-box")]),v._v("加入到它的"),e("code",[v._v("*")]),v._v("选择器中，我们为什么不这样做呢？")]),v._v(" "),e("h3",{attrs:{id:"纵向-margin-重叠"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#纵向-margin-重叠"}},[v._v("#")]),v._v(" "),e("strong",[v._v("纵向 margin 重叠")])]),v._v(" "),e("p",[v._v("这里提到 margin，就不得不提一下 margin 的这一特性——纵向重叠。如"),e("code",[v._v("<p>")]),v._v("的纵向 margin 是 16px，那么两个"),e("code",[v._v("<p>")]),v._v("之间纵向的距离是多少？—— 按常理来说应该是 16 + 16 = 32px，但是答案仍然是 16px。因为纵向的 margin 是会重叠的，如果两者不一样大的话，大的会把小的“吃掉”。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"浮动float"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浮动float"}},[v._v("#")]),v._v(" "),e("strong",[v._v("浮动"),e("code",[v._v("float")])])]),v._v(" "),e("p",[v._v("float 用于网页布局比较多，使用起来也比较简单，这里总结了一些比较重要、需要注意的知识点，供大家参考。")]),v._v(" "),e("h3",{attrs:{id:"误解和误用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#误解和误用"}},[v._v("#")]),v._v(" "),e("strong",[v._v("误解和误用")])]),v._v(" "),e("p",[v._v("float 被设计出来的初衷是用于"),e("strong",[v._v("文字环绕效果")]),v._v("，即一个图片一段文字，图片"),e("code",[v._v("float:left")]),v._v("之后，文字会环绕图片。")]),v._v(" "),e("pre",[e("code",[v._v('<div>\n    <img src="image/1.png" style="float:left">\n    一段文字一段文字一段文字一段文字一段文字一段文字一段文字一段文字一段文字\n</div>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("但是，后来大家发现结合"),e("code",[v._v("float + div")]),v._v("可以实现之前通过"),e("code",[v._v("table")]),v._v("实现的网页布局，因此就被“误用”于网页布局了。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：为何 float 会导致父元素塌陷？")])]),v._v(" "),e("h3",{attrs:{id:"破坏性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#破坏性"}},[v._v("#")]),v._v(" "),e("strong",[v._v("破坏性")])]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("float 的"),e("strong",[v._v("破坏性")]),v._v(" —— float 破坏了父标签的原本结构，使得父标签出现了坍塌现象。导致这一现象的最根本原因在于："),e("strong",[v._v("被设置了 float 的元素会脱离文档流")]),v._v("。其根本原因在于 float 的设计初衷是解决文字环绕图片的问题。大家要记住 float 的这个影响。")]),v._v(" "),e("h3",{attrs:{id:"包裹性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包裹性"}},[v._v("#")]),v._v(" "),e("strong",[v._v("包裹性")])]),v._v(" "),e("p",[e("strong",[v._v("包裹性")]),v._v("也是 float 的一个非常重要的特性，大家用 float 时一定要熟知这一特性。咱们还是先从一个小例子看起：")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("如上图，普通的 div 如果没有设置宽度，它会撑满整个屏幕，在之前的盒子模型那一节也讲到过。而如果给 div 增加"),e("code",[v._v("float:left")]),v._v("之后，它突然变得紧凑了，宽度发生了变化，把内容中的三个字包裹了——这就是包裹性。为 div 设置了 float 之后，其宽度会自动调整为包裹住内容宽度，而不是撑满整个父容器。")]),v._v(" "),e("p",[v._v("注意，此时 div 虽然体现了包裹性，但是它的 display 样式是没有变化的，还是"),e("code",[v._v("display: block")]),v._v("。")]),v._v(" "),e("p",[v._v("float 为什么要具有包裹性？其实答案还是得从 float 的设计初衷来寻找，float 是被设计用于实现文字环绕效果的。文字环绕图片比较好理解，但是如果想要让文字环绕一个 div 呢？此时 div 不被“包裹”起来的话，就无法实现环绕效果了。")]),v._v(" "),e("h3",{attrs:{id:"清空格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清空格"}},[v._v("#")]),v._v(" "),e("strong",[v._v("清空格")])]),v._v(" "),e("p",[v._v("float 还有一个大家可能不是很熟悉的特性——清空格。按照惯例，咱还是先举例子说明。")]),v._v(" "),e("pre",[e("code",[v._v('<div style="border: 2px solid blue; padding:3px;">\n    <img src="image/1.png"/>\n    <img src="image/2.png"/>\n    <img src="image/3.png"/>\n    <img src="image/4.png"/>\n</div>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("加上"),e("code",[v._v("float:left")]),v._v("之后：")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("上面第一张图中，正常的 img 中间是会有空格的，因为多个 img 标签会有换行，而浏览器识别换行为空格，这也是很正常的。第二张图中，为 img 增加了"),e("code",[v._v("float:left")]),v._v("的样式，这就使得 img 之间没有了空格，4 个 img 紧紧挨着。")]),v._v(" "),e("p",[v._v("如果大家之前没注意，现在想想之前写过的程序，是不是有这个特性。为什么 float 适合用于网页排版（俗称“砌砖头”）？就是因为 float 排版出来的网页严丝合缝，中间连个苍蝇都飞不进去。")]),v._v(" "),e("p",[v._v("“清空格”这一特性的根本原因是 float 会导致节点脱离文档流结构。它都不属于文档流结构了，那么它身边的什么换行、空格就都和它没了关系，它就尽量往一边靠拢，能靠多近就靠多近，这就是清空格的本质。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：手写 clearfix")])]),v._v(" "),e("h3",{attrs:{id:"clearfix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clearfix"}},[v._v("#")]),v._v(" "),e("strong",[e("code",[v._v("clearfix")])])]),v._v(" "),e("p",[v._v("清除浮动的影响，一般使用的样式如下，统称"),e("code",[v._v("clearfix")]),v._v("代码。所有 float 元素的父容器，一般情况下都应该加"),e("code",[v._v("clearfix")]),v._v("这个 class。")]),v._v(" "),e("pre",[e("code",[v._v(".clearfix:after {\n    content: '';\n    display: table;\n    clear: both;\n}\n.clearfix {\n    *zoom: 1; /* 兼容 IE 低版本 */\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("pre",[e("code",[v._v('<div class="clearfix">\n    <img src="image/1.png" style="float: left"/>\n    <img src="image/2.png" style="float: left"/>\n</div>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h3",{attrs:{id:"小结-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-3"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("float 的设计初衷是解决文字环绕图片的问题，后来误打误撞用于做布局，因此有许多不合适或者需要注意的地方，上文基本都讲到了需要的知识点。如果是刚开始接触 float 的同学，学完上面的基础知识之后，还应该做一些练习实战一下 —— 经典的“圣杯布局”和“双飞翼布局”。这里就不再展开讲了，网上资料非常多，例如"),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fentry%2F5a8868cdf265da4e7e10c133%3Futm_source%3Dgold_browser_extension",target:"_blank",rel:"noopener noreferrer"}},[v._v("浅谈面试中常考的两种经典布局——圣杯与双飞翼"),e("OutboundLink")],1),v._v("（此文的最后两张图清晰地展示了这两种布局）。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"定位position"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定位position"}},[v._v("#")]),v._v(" "),e("strong",[v._v("定位"),e("code",[v._v("position")])])]),v._v(" "),e("p",[v._v("position 用于网页元素的定位，可设置 static/relative/absolute/fixed 这些值，其中 static 是默认值，不用介绍。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：relative 和 absolute 有何区别？")])]),v._v(" "),e("h3",{attrs:{id:"relative"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#relative"}},[v._v("#")]),v._v(" "),e("strong",[v._v("relative")])]),v._v(" "),e("p",[v._v("相对定位 relative 可以用一个例子很轻松地演示出来。例如我们写 4 个"),e("code",[v._v("<p>")]),v._v("，出来的样子大家不用看也能知道。")]),v._v(" "),e("pre",[e("code",[v._v("<p>第一段文字</p>\n<p>第二段文字</p>\n<p>第三段文字</p>\n<p>第四段文字</p>\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("然后我们在第三个"),e("code",[v._v("<p>")]),v._v("上面，加上"),e("code",[v._v("position:relative")]),v._v("并且设置"),e("code",[v._v("left")]),v._v("和"),e("code",[v._v("top")]),v._v("值，看这个"),e("code",[v._v("<p>")]),v._v("有什么变化。")]),v._v(" "),e("pre",[e("code",[v._v('<p>第一段文字</p>\n<p>第二段文字</p>\n<p style="position:relative; top: 10px; left: 10px">第三段文字</p>\n<p>第四段文字</p>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("上图中，大家应该要识别出两个信息（相信大部分人会忽略第二个信息）")]),v._v(" "),e("ul",[e("li",[v._v("第三个"),e("code",[v._v("<p>")]),v._v("发生了位置变化，分别向右向下移动了10px；")]),v._v(" "),e("li",[v._v("其他的三个"),e("code",[v._v("<p>")]),v._v("位置没有发生变化，这一点也很重要。")])]),v._v(" "),e("p",[v._v("可见，"),e("strong",[v._v("relative 会导致自身位置的相对变化，而不会影响其他元素的位置、大小")]),v._v("。这是 relative 的要点之一。还有第二个要点，就是 relative 产生一个新的定位上下文。下文有关于定位上下文的详细介绍，这里可以先通过一个例子来展示一下区别：")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("注意看这两图的区别，下文将有解释。")]),v._v(" "),e("h3",{attrs:{id:"absolute"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#absolute"}},[v._v("#")]),v._v(" "),e("strong",[v._v("absolute")])]),v._v(" "),e("p",[v._v("还是先写一个基本的 demo。")]),v._v(" "),e("pre",[e("code",[v._v('<p>第一段文字</p>\n<p>第二段文字</p>\n<p style="background: yellow">第三段文字</p>\n<p>第四段文字</p>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("然后，我们把第三个"),e("code",[v._v("<p>")]),v._v("改为"),e("code",[v._v("position:absolute;")]),v._v("，看看会发生什么变化。")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("从上面的结果中，我们能看出几点信息：")]),v._v(" "),e("ul",[e("li",[v._v("absolute 元素脱离了文档结构。和 relative 不同，其他三个元素的位置重新排列了。只要元素会脱离文档结构，它就会产生破坏性，导致父元素坍塌。（此时你应该能立刻想起来，float 元素也会脱离文档结构。）")]),v._v(" "),e("li",[v._v("absolute 元素具有“包裹性”。之前"),e("code",[v._v("<p>")]),v._v("的宽度是撑满整个屏幕的，而此时"),e("code",[v._v("<p>")]),v._v("的宽度刚好是内容的宽度。")]),v._v(" "),e("li",[v._v("absolute 元素具有“跟随性”。虽然 absolute 元素脱离了文档结构，但是它的位置并没有发生变化，还是老老实实地呆在它原本的位置，因为我们此时没有设置 top、left 的值。")]),v._v(" "),e("li",[v._v("absolute 元素会悬浮在页面上方，会遮挡住下方的页面内容。")])]),v._v(" "),e("p",[v._v("最后，通过给 absolute元素设置 top、left 值，可自定义其内容，这个都是平时比较常用的了。这里需要注意的是，设置了 top、left 值时，元素是相对于最近的定位上下文来定位的，而不是相对于浏览器定位。")]),v._v(" "),e("h3",{attrs:{id:"fixed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fixed"}},[v._v("#")]),v._v(" "),e("strong",[v._v("fixed")])]),v._v(" "),e("p",[v._v("其实 fixed 和 absolute 是一样的，唯一的区别在于：absolute 元素是根据最近的定位上下文确定位置，而 fixed 根据浏览器确定位置。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：relative、absolute 和 fixed 分别依据谁来定位？")])]),v._v(" "),e("h3",{attrs:{id:"定位上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定位上下文"}},[v._v("#")]),v._v(" "),e("strong",[v._v("定位上下文")])]),v._v(" "),e("p",[v._v("relative 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("fixed 元素的定位是相对于浏览器边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("absolute 的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了"),e("code",[v._v("position:relative/absolute/fixed")]),v._v("的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"flex布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex布局"}},[v._v("#")]),v._v(" "),e("strong",[e("code",[v._v("flex")]),v._v("布局")])]),v._v(" "),e("p",[v._v("布局的传统解决方案基于盒子模型，依赖 "),e("code",[v._v("display")]),v._v(" 属性 + "),e("code",[v._v("position")]),v._v(" 属性 + "),e("code",[v._v("float")]),v._v(" 属性。它对于那些特殊布局非常不方便，比如，垂直居中（下文会专门讲解）就不容易实现。在目前主流的移动端页面中，使用 flex 布局能更好地完成需求，因此 flex 布局的知识是必须要掌握的。")]),v._v(" "),e("h3",{attrs:{id:"基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[v._v("#")]),v._v(" "),e("strong",[v._v("基本使用")])]),v._v(" "),e("p",[v._v("任何一个容器都可以使用 flex 布局，代码也很简单。")]),v._v(" "),e("pre",[e("code",[v._v('<style type="text/css">\n    .container {\n      display: flex;\n    }\n    .item {\n        border: 1px solid #000;\n        flex: 1;\n    }\n</style>\n\n<div class="container">\n    <div class="item">aaa</div>\n    <div class="item" style="flex: 2">bbb</div>\n    <div class="item">ccc</div>\n    <div class="item">ddd</div>\n</div>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("注意，第三个"),e("code",[v._v("<div>")]),v._v("的"),e("code",[v._v("flex: 2")]),v._v("，其他的"),e("code",[v._v("<div>")]),v._v("的"),e("code",[v._v("flex: 1")]),v._v("，这样第二个"),e("code",[v._v("<div>")]),v._v("的宽度就是其他的"),e("code",[v._v("<div>")]),v._v("的两倍。")]),v._v(" "),e("h3",{attrs:{id:"设计原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计原理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("设计原理")])]),v._v(" "),e("p",[v._v("设置了"),e("code",[v._v("display: flex")]),v._v("的元素，我们称为“容器”（flex container），其所有的子节点我们称为“成员”（flex item）。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("将以上文字和图片结合起来，再详细看一遍，这样就能理解 flex 的设计原理，才能更好地实际使用。")]),v._v(" "),e("h3",{attrs:{id:"设置主轴的方向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置主轴的方向"}},[v._v("#")]),v._v(" "),e("strong",[v._v("设置主轴的方向")])]),v._v(" "),e("p",[e("code",[v._v("flex-direction")]),v._v("可决定主轴的方向，有四个可选值：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("row（默认值）：主轴为水平方向，起点在左端。")])]),v._v(" "),e("li",[e("p",[v._v("row-reverse：主轴为水平方向，起点在右端。")])]),v._v(" "),e("li",[e("p",[v._v("column：主轴为垂直方向，起点在上沿。")])]),v._v(" "),e("li",[e("p",[v._v("column-reverse：主轴为垂直方向，起点在下沿。")]),v._v(" "),e("p",[v._v(".box {\nflex-direction: column-reverse| column | row | row-reverse;\n}")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("以上代码设置的主轴方向，将依次对应下图：")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("h3",{attrs:{id:"设置主轴的对齐方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置主轴的对齐方式"}},[v._v("#")]),v._v(" "),e("strong",[v._v("设置主轴的对齐方式")])]),v._v(" "),e("p",[e("code",[v._v("justify-content")]),v._v("属性定义了项目在主轴上的对齐方式，值如下：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("flex-start（默认值）：向主轴开始方向对齐。")])]),v._v(" "),e("li",[e("p",[v._v("flex-end：向主轴结束方向对齐。")])]),v._v(" "),e("li",[e("p",[v._v("center： 居中。")])]),v._v(" "),e("li",[e("p",[v._v("space-between：两端对齐，项目之间的间隔都相等。")])]),v._v(" "),e("li",[e("p",[v._v("space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。")]),v._v(" "),e("p",[v._v(".box {\njustify-content: flex-start | flex-end | center | space-between | space-around;\n}")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("h3",{attrs:{id:"交叉轴的对齐方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#交叉轴的对齐方式"}},[v._v("#")]),v._v(" "),e("strong",[v._v("交叉轴的对齐方式")])]),v._v(" "),e("p",[e("code",[v._v("align-items")]),v._v("属性定义项目在交叉轴上如何对齐，值如下：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("flex-start：交叉轴的起点对齐。")])]),v._v(" "),e("li",[e("p",[v._v("flex-end：交叉轴的终点对齐。")])]),v._v(" "),e("li",[e("p",[v._v("center：交叉轴的中点对齐。")])]),v._v(" "),e("li",[e("p",[v._v("baseline: 项目的第一行文字的基线对齐。")])]),v._v(" "),e("li",[e("p",[v._v("stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。")]),v._v(" "),e("p",[v._v(".box {\nalign-items: flex-start | flex-end | center | baseline | stretch;\n}")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"如何实现居中对齐？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现居中对齐？"}},[v._v("#")]),v._v(" "),e("strong",[v._v("如何实现居中对齐？")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何实现水平居中？")])]),v._v(" "),e("h3",{attrs:{id:"水平居中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#水平居中"}},[v._v("#")]),v._v(" "),e("strong",[v._v("水平居中")])]),v._v(" "),e("p",[v._v("inline 元素用"),e("code",[v._v("text-align: center;")]),v._v("即可，如下：")]),v._v(" "),e("pre",[e("code",[v._v(".container {\n   text-align: center;\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("block 元素可使用"),e("code",[v._v("margin: auto;")]),v._v("，PC 时代的很多网站都这么搞。")]),v._v(" "),e("pre",[e("code",[v._v(".container {\n    text-align: center; \n}\n.item {\n    width: 1000px;\n    margin: auto; \n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("绝对定位元素可结合"),e("code",[v._v("left")]),v._v("和"),e("code",[v._v("margin")]),v._v("实现，但是必须知道宽度。")]),v._v(" "),e("pre",[e("code",[v._v(".container {\n    position: relative;\n    width: 500px;\n}\n.item {\n    width: 300px;\n    height: 100px;\n    position: absolute;\n    left: 50%;\n    margin: -150px;\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何实现垂直居中？")])]),v._v(" "),e("h3",{attrs:{id:"垂直居中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垂直居中"}},[v._v("#")]),v._v(" "),e("strong",[v._v("垂直居中")])]),v._v(" "),e("p",[v._v("inline 元素可设置"),e("code",[v._v("line-height")]),v._v("的值等于"),e("code",[v._v("height")]),v._v("值，如单行文字垂直居中：")]),v._v(" "),e("pre",[e("code",[v._v(".container {\n   height: 50px;\n   line-height: 50px;\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("绝对定位元素，可结合"),e("code",[v._v("left")]),v._v("和"),e("code",[v._v("margin")]),v._v("实现，但是必须知道尺寸。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("优点：兼容性好")])]),v._v(" "),e("li",[e("p",[v._v("缺点：需要提前知道尺寸")]),v._v(" "),e("p",[v._v(".container {\nposition: relative;\nheight: 200px;\n}\n.item {\nwidth: 80px;\nheight: 40px;\nposition: absolute;\nleft: 50%;\ntop: 50%;\nmargin-top: -20px;\nmargin-left: -40px;\n}")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("绝对定位可结合"),e("code",[v._v("transform")]),v._v("实现居中。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("优点：不需要提前知道尺寸")])]),v._v(" "),e("li",[e("p",[v._v("缺点：兼容性不好")]),v._v(" "),e("p",[v._v(".container {\nposition: relative;\nheight: 200px;\n}\n.item {\nwidth: 80px;\nheight: 40px;\nposition: absolute;\nleft: 50%;\ntop: 50%;\ntransform: translate(-50%, -50%);\nbackground: blue;\n}")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("绝对定位结合"),e("code",[v._v("margin: auto")]),v._v("，不需要提前知道尺寸，兼容性好。")]),v._v(" "),e("pre",[e("code",[v._v(".container {\n    position: relative;\n    height: 300px;\n}\n.item {\n    width: 100px;\n    height: 50px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("其他的解决方案还有，不过没必要掌握太多，能说出上文的这几个解决方案即可。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"理解语义化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理解语义化"}},[v._v("#")]),v._v(" "),e("strong",[v._v("理解语义化")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何理解 HTML 语义化？")])]),v._v(" "),e("p",[v._v("所谓“语义”就是为了更易读懂，这要分两部分：")]),v._v(" "),e("ul",[e("li",[v._v("让人（写程序、读程序）更易读懂")]),v._v(" "),e("li",[v._v("让机器（浏览器、搜索引擎）更易读懂")])]),v._v(" "),e("h3",{attrs:{id:"让人更易读懂"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#让人更易读懂"}},[v._v("#")]),v._v(" "),e("strong",[v._v("让人更易读懂")])]),v._v(" "),e("p",[v._v("对于人来说，代码可读性、语义化就是一个非常广泛的概念了，例如定义 JS 变量的时候使用更易读懂的名称，定义 CSS class 的时候也一样，例如"),e("code",[v._v("length``list")]),v._v("等，而不是使用"),e("code",[v._v("a``b")]),v._v("这种谁都看不懂的名称。")]),v._v(" "),e("p",[v._v("不过我们平常考查的“语义化”并不会考查这么广义、这么泛的问题，而是考查 HTML 的语义化，是为了更好地让机器读懂 HTML。")]),v._v(" "),e("h3",{attrs:{id:"让机器更易读懂"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#让机器更易读懂"}},[v._v("#")]),v._v(" "),e("strong",[v._v("让机器更易读懂")])]),v._v(" "),e("p",[v._v("HTML 符合 XML 标准，但又和 XML 不一样 —— HTML 不允许像 XML 那样自定义标签名称，HTML 有自己规定的标签名称。问题就在这里 —— HTML 为何要自己规定那么多标签名称呢，例如"),e("code",[v._v("p``div``h1``ul")]),v._v("等 —— 就是为了语义化。其实，如果你精通 CSS 的话，你完全可以全部用"),e("code",[v._v("<div>")]),v._v("标签来实现所有的网页效果，其他的"),e("code",[v._v("p``h1``ul")]),v._v("等标签可以一个都不用。但是我们不推荐这么做，这样做就失去了 HTML 语义化的意义。")]),v._v(" "),e("p",[v._v("拿搜索引擎来说，爬虫下载到我们网页的 HTML 代码，它如何更好地去理解网页的内容呢？—— 就是根据 HTML 既定的标签。"),e("code",[v._v("h1")]),v._v("标签就代表是标题；"),e("code",[v._v("p")]),v._v("里面的就是段落详细内容，权重肯定没有标题高；"),e("code",[v._v("ul")]),v._v("里面就是列表；"),e("code",[v._v("strong")]),v._v("就是加粗的强调的内容 …… 如果我们不按照 HTML 语义化来写，全部都用"),e("code",[v._v("<div>")]),v._v("标签，那搜索引擎将很难理解我们网页的内容。")]),v._v(" "),e("p",[v._v("为了加强 HTML 语义化，HTML5 标准中又增加了"),e("code",[v._v("header``section``artical")]),v._v("等标签。因此，书写 HTML 时，语义化是非常重要的，否则 W3C 也没必要辛辛苦苦制定出这些标准来。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"css3-动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css3-动画"}},[v._v("#")]),v._v(" "),e("strong",[v._v("CSS3 动画")])]),v._v(" "),e("p",[v._v("CSS3 可以实现动画，代替原来的 Flash 和 JavaScript 方案。")]),v._v(" "),e("p",[v._v("首先，使用"),e("code",[v._v("@keyframes")]),v._v("定义一个动画，名称为"),e("code",[v._v("testAnimation")]),v._v("，如下代码，通过百分比来设置不同的 CSS 样式，规定动画的变化。所有的动画变化都可以这么定义出来。")]),v._v(" "),e("pre",[e("code",[v._v("@keyframes testAnimation\n{\n    0%   {background: red; left:0; top:0;}\n    25%  {background: yellow; left:200px; top:0;}\n    50%  {background: blue; left:200px; top:200px;}\n    75%  {background: green; left:0; top:200px;}\n    100% {background: red; left:0; top:0;}\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("然后，针对一个 CSS 选择器来设置动画，例如针对"),e("code",[v._v("div")]),v._v("元素设置动画，如下：")]),v._v(" "),e("pre",[e("code",[v._v("div {\n    width: 100px;\n    height: 50px;\n    position: absolute;\n\n    animation-name: myfirst;\n    animation-duration: 5s;\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[e("code",[v._v("animation-name")]),v._v("对应到动画名称，"),e("code",[v._v("animation-duration")]),v._v("是动画时长，还有其他属性：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("animation-timing-function")]),v._v("：规定动画的速度曲线。默认是"),e("code",[v._v("ease")])]),v._v(" "),e("li",[e("code",[v._v("animation-delay")]),v._v("：规定动画何时开始。默认是 0")]),v._v(" "),e("li",[e("code",[v._v("animation-iteration-count")]),v._v("：规定动画被播放的次数。默认是 1")]),v._v(" "),e("li",[e("code",[v._v("animation-direction")]),v._v("：规定动画是否在下一周期逆向地播放。默认是"),e("code",[v._v("normal")])]),v._v(" "),e("li",[e("code",[v._v("animation-play-state")]),v._v(" ：规定动画是否正在运行或暂停。默认是"),e("code",[v._v("running")])]),v._v(" "),e("li",[e("code",[v._v("animation-fill-mode")]),v._v("：规定动画执行之前和之后如何给动画的目标应用，默认是"),e("code",[v._v("none")]),v._v("，保留在最后一帧可以用"),e("code",[v._v("forwards")])])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：CSS 的"),e("code",[v._v("transition")]),v._v("和"),e("code",[v._v("animation")]),v._v("有何区别？")])]),v._v(" "),e("p",[v._v("首先"),e("code",[v._v("transition")]),v._v("和"),e("code",[v._v("animation")]),v._v("都可以做动效，从语义上来理解，"),e("code",[v._v("transition")]),v._v("是过渡，由一个状态过渡到另一个状态，比如高度"),e("code",[v._v("100px")]),v._v("过渡到"),e("code",[v._v("200px")]),v._v("；而"),e("code",[v._v("animation")]),v._v("是动画，即更专业做动效的，"),e("code",[v._v("animation")]),v._v("有帧的概念，可以设置关键帧"),e("code",[v._v("keyframe")]),v._v("，一个动画可以由多个关键帧多个状态过渡组成，另外"),e("code",[v._v("animation")]),v._v("也包含上面提到的多个属性。")]),v._v(" "),e("h2",{attrs:{id:"重绘和回流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重绘和回流"}},[v._v("#")]),v._v(" "),e("strong",[v._v("重绘和回流")])]),v._v(" "),e("p",[v._v("重绘和回流是面试题经常考的题目，也是性能优化当中应该注意的点，下面笔者简单介绍下。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("重绘")]),v._v("：指的是当页面中的元素不脱离文档流，而简单地进行样式的变化，比如修改颜色、背景等，浏览器重新绘制样式")]),v._v(" "),e("li",[e("strong",[v._v("回流")]),v._v("：指的是处于文档流中 DOM 的尺寸大小、位置或者某些属性发生变化时，导致浏览器重新渲染部分或全部文档的情况")])]),v._v(" "),e("p",[v._v("相比之下，"),e("strong",[v._v("回流要比重绘消耗性能开支更大")]),v._v("。另外，一些属性的读取也会引起回流，比如读取某个 DOM 的高度和宽度，或者使用"),e("code",[v._v("getComputedStyle")]),v._v("方法。在写代码的时候要避免回流和重绘。比如在笔试中可能会遇见下面的题目：")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：找出下面代码的优化点，并且优化它")])]),v._v(" "),e("pre",[e("code",[v._v("var data = ['string1', 'string2', 'string3'];\nfor(var i = 0; i < data.length; i++){\n    var dom = document.getElementById('list');\n    dom.innerHTML += '<li>' + data[i] + '</li>';\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("上面的代码在循环中每次都获取"),e("code",[v._v("dom")]),v._v("，然后对其内部的 HTML 进行累加"),e("code",[v._v("li")]),v._v("，每次都会操作 DOM 结构，可以改成使用"),e("code",[v._v("documentFragment")]),v._v("或者先遍历组成 HTML 的字符串，最后操作一次"),e("code",[v._v("innerHTML")]),v._v("。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"小结-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-4"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("本小节总结了 CSS 和 HTML 常考的知识点，包括 CSS 中比较重要的定位、布局的知识，也介绍了一些 CSS3 的知识点概念和题目，以及 HTML 的语义化。")]),v._v(" "),e("p",[v._v("上一篇："),e("a",{attrs:{href:"541672"}},[v._v("一面 2：JS-Web-API 知识点与高频考题解析")]),v._v("下一篇："),e("a",{attrs:{href:"541674"}},[v._v("一面 4：从容应对算法题目")])]),v._v(" "),e("h1",{attrs:{id:"一面-4：从容应对算法题目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一面-4：从容应对算法题目"}},[v._v("#")]),v._v(" "),e("strong",[v._v("一面 4：从容应对算法题目")])]),v._v(" "),e("p",[v._v("由冯·诺依曼机组成我们知道：数据存储和运算是计算机工作的主要内容。"),e("code",[v._v("程序=数据结构+算法")]),v._v("，所以计算机类工程师必须掌握一定的数据结构和算法知识。")]),v._v(" "),e("h2",{attrs:{id:"知识点梳理-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知识点梳理-4"}},[v._v("#")]),v._v(" "),e("strong",[v._v("知识点梳理")])]),v._v(" "),e("ul",[e("li",[v._v("常见的数据结构\n"),e("ul",[e("li",[v._v("栈、队列、链表")]),v._v(" "),e("li",[v._v("集合、字典、散列集")])])]),v._v(" "),e("li",[v._v("常见算法\n"),e("ul",[e("li",[v._v("递归")]),v._v(" "),e("li",[v._v("排序")]),v._v(" "),e("li",[v._v("枚举")])])]),v._v(" "),e("li",[v._v("算法复杂度分析")]),v._v(" "),e("li",[v._v("算法思维\n"),e("ul",[e("li",[v._v("分治")]),v._v(" "),e("li",[v._v("贪心")]),v._v(" "),e("li",[v._v("动态规划")])])]),v._v(" "),e("li",[v._v("高级数据结构\n"),e("ul",[e("li",[v._v("树、图")]),v._v(" "),e("li",[v._v("深度优先和广度优先搜索")])])])]),v._v(" "),e("p",[v._v("本小节会带领大家快速过一遍数据结构和算法，重点讲解一些常考、前端会用到的算法和数据结构。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[v._v("#")]),v._v(" "),e("strong",[v._v("数据结构")])]),v._v(" "),e("p",[v._v("数据结构决定了数据存储的空间和时间效率问题，数据的写入和提取速度要求也决定了应该选择怎样的数据结构。")]),v._v(" "),e("p",[v._v("根据对场景需求的不同，我们设计不同的数据结构，比如：")]),v._v(" "),e("ul",[e("li",[v._v("读得多的数据结构，应该想办法提高数据的读取效率，比如 IP 数据库，只需要写一次，剩下的都是读取；")]),v._v(" "),e("li",[v._v("读写都多的数据结构，要兼顾两者的需求平衡，比如 LRU Cache 算法。")])]),v._v(" "),e("p",[v._v("算法是数据加工处理的方式，一定的算法会提升数据的处理效率。比如有序数组的二分查找，要比普通的顺序查找快很多，尤其是在处理大量数据的时候。")]),v._v(" "),e("p",[v._v("数据结构和算法是程序开发的通用技能，所以在任何面试中都可能会遇见。随着近几年 AI、大数据、小游戏越来越火，Web 前端职位难免会跟数据结构和算法打交道，面试中也会出现越来越多的算法题目。学习数据结构和算法也能够帮助我们打开思路，突破技能瓶颈。")]),v._v(" "),e("h2",{attrs:{id:"前端常遇见的数据结构问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端常遇见的数据结构问题"}},[v._v("#")]),v._v(" "),e("strong",[v._v("前端常遇见的数据结构问题")])]),v._v(" "),e("p",[v._v("现在我来梳理下前端常遇见的数据结构：")]),v._v(" "),e("ul",[e("li",[v._v("简单数据结构（必须理解掌握）\n"),e("ul",[e("li",[v._v("有序数据结构：栈、队列、链表，有序数据结构省空间（存储空间小）")]),v._v(" "),e("li",[v._v("无序数据结构：集合、字典、散列表，无序数据结构省时间（读取时间快）")])])]),v._v(" "),e("li",[v._v("复杂数据结构\n"),e("ul",[e("li",[v._v("树、堆")]),v._v(" "),e("li",[v._v("图")])])])]),v._v(" "),e("p",[v._v("对于简单数据结构，在 ES 中对应的是数组（"),e("code",[v._v("Array")]),v._v("）和对象（"),e("code",[v._v("Object")]),v._v("）。可以想一下，数组的存储是有序的，对象的存储是无序的，但是我要在对象中根据"),e("code",[v._v("key")]),v._v("找到一个值是立即返回的，数组则需要查找的过程。")]),v._v(" "),e("p",[v._v("这里我通过一个真实面试题目来说明介绍下数据结构设计。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：使用 ECMAScript（JS）代码实现一个事件类"),e("code",[v._v("Event")]),v._v("，包含下面功能：绑定事件、解绑事件和派发事件。")])]),v._v(" "),e("p",[v._v("在稍微复杂点的页面中，比如组件化开发的页面，同一个页面由两三个人来开发，为了保证组件的独立性和降低组件间耦合度，我们往往使用「订阅发布模式」，即组件间通信使用事件监听和派发的方式，而不是直接相互调用组件方法，这就是题目要求写的"),e("code",[v._v("Event")]),v._v("类。")]),v._v(" "),e("p",[v._v("这个题目的核心是一个事件类型对应回调函数的数据设计。为了实现绑定事件，我们需要一个"),e("code",[v._v("_cache")]),v._v("对象来记录绑定了哪些事件。而事件发生的时候，我们需要从"),e("code",[v._v("_cache")]),v._v("中读取出来事件回调，依次执行它们。一般页面中事件派发（读）要比事件绑定（写）多。所以我们设计的数据结构应该尽量地能够在事件发生时，更加快速地找到对应事件的回调函数们，然后执行。")]),v._v(" "),e("p",[v._v("经过这样一番考虑，我简单写了下代码实现：")]),v._v(" "),e("pre",[e("code",[v._v("class Event {\n    constructor() {\n        // 存储事件的数据结构\n        // 为了查找迅速，使用了对象（字典）\n        this._cache = {};\n    }\n    // 绑定\n    on(type, callback) {\n        // 为了按类查找方便和节省空间，\n        // 将同一类型事件放到一个数组中\n        // 这里的数组是队列，遵循先进先出\n        // 即先绑定的事件先触发\n        let fns = (this._cache[type] = this._cache[type] || []);\n        if (fns.indexOf(callback) === -1) {\n            fns.push(callback);\n        }\n        return this;\n    }\n    // 触发\n    trigger(type, data) {\n        let fns = this._cache[type];\n        if (Array.isArray(fns)) {\n            fns.forEach((fn) => {\n                fn(data);\n            });\n        }\n        return this;\n    }\n    // 解绑\n    off(type, callback) {\n        let fns = this._cache[type];\n        if (Array.isArray(fns)) {\n            if (callback) {\n                let index = fns.indexOf(callback);\n                if (index !== -1) {\n                    fns.splice(index, 1);\n                }\n            } else {\n                //全部清空\n                fns.length = 0;\n            }\n        }\n        return this;\n    }\n}\n// 测试用例\nconst event = new Event();\nevent.on('test', (a) => {\n    console.log(a);\n});\nevent.trigger('test', 'hello world');\n\nevent.off('test');\nevent.trigger('test', 'hello world');\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("类似于树、堆、图这些高级数据结构，前端一般也不会考查太多，但是它们的查找方法却常考，后面介绍。高级数据应该平时多积累，好好理解，比如理解了堆是什么样的数据结构，在面试中遇见的「查找最大的 K 个数」这类算法问题，就会迎刃而解。")]),v._v(" "),e("h2",{attrs:{id:"算法的效率是通过算法复杂度来衡量的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法的效率是通过算法复杂度来衡量的"}},[v._v("#")]),v._v(" "),e("strong",[v._v("算法的效率是通过算法复杂度来衡量的")])]),v._v(" "),e("p",[v._v("算法的好坏可以通过算法复杂度来衡量，算法复杂度包括时间复杂度和空间复杂度两个。时间复杂度由于好估算、好评估等特点，是面试中考查的重点。空间复杂度在面试中考查得不多。")]),v._v(" "),e("p",[v._v("常见的时间复杂度有：")]),v._v(" "),e("ul",[e("li",[v._v("常数阶 "),e("code",[v._v("O(1)")])]),v._v(" "),e("li",[v._v("对数阶 "),e("code",[v._v("O(logN)")])]),v._v(" "),e("li",[v._v("线性阶 "),e("code",[v._v("O(n)")])]),v._v(" "),e("li",[v._v("线性对数阶 "),e("code",[v._v("O(nlogN)")])]),v._v(" "),e("li",[v._v("平方阶 "),e("code",[v._v("O(n^2)")])]),v._v(" "),e("li",[v._v("立方阶 "),e("code",[v._v("O(n^3)")])]),v._v(" "),e("li",[v._v("!k次方阶 "),e("code",[v._v("O(n^k)")])]),v._v(" "),e("li",[v._v("指数阶"),e("code",[v._v("O(2^n)")])])]),v._v(" "),e("p",[v._v("随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低。")]),v._v(" "),e("p",[v._v("一般做算法复杂度分析的时候，遵循下面的技巧：")]),v._v(" "),e("ol",[e("li",[v._v("看看有几重循环，一般来说一重就是"),e("code",[v._v("O(n)")]),v._v("，两重就是 "),e("code",[v._v("O(n^2)")]),v._v("，以此类推")]),v._v(" "),e("li",[v._v("如果有二分，则为"),e("code",[v._v("O(logN)")])]),v._v(" "),e("li",[v._v("保留最高项，去除常数项")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：分析下面代码的算法复杂度（为了方便，我已经在注释中加了代码分析）")])]),v._v(" "),e("pre",[e("code",[v._v("let i =0; // 语句执行一次 \nwhile (i < n) { // 语句执行 n 次 \n  console.log(`Current i is ${i}`); //语句执行 n 次\n  i++; // 语句执行 n 次\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("根据注释可以得到，算法复杂度为"),e("code",[v._v("1 + n + n + n = 1 + 3n")]),v._v("，去除常数项，为"),e("code",[v._v("O(n)")]),v._v("。")]),v._v(" "),e("pre",[e("code",[v._v("let number = 1; // 语句执行一次 \nwhile (number < n) { // 语句执行 logN 次\n  number *= 2; // 语句执行 logN 次\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("上面代码"),e("code",[v._v("while")]),v._v("的跳出判断条件是"),e("code",[v._v("number<n")]),v._v("，而循环体内"),e("code",[v._v("number")]),v._v("增长速度是"),e("code",[v._v("(2^n)")]),v._v("，所以循环代码实际执行"),e("code",[v._v("logN")]),v._v("次，复杂度为："),e("code",[v._v("1 + 2 * logN = O(logN)")])]),v._v(" "),e("pre",[e("code",[v._v("for (let i = 0; i < n; i++) {// 语句执行 n 次\n  for (let j = 0; j < n; j++) {// 语句执行 n^2 次\n    console.log('I am here!'); // 语句执行 n^2 次\n  }\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("上面代码是两个"),e("code",[v._v("for")]),v._v("循环嵌套，很容易得出复杂度为："),e("code",[v._v("O(n^2)")])]),v._v(" "),e("h2",{attrs:{id:"人人都要掌握的基础算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#人人都要掌握的基础算法"}},[v._v("#")]),v._v(" "),e("strong",[v._v("人人都要掌握的基础算法")])]),v._v(" "),e("p",[v._v("枚举和递归是最最简单的算法，也是复杂算法的基础，人人都应该掌握！枚举相对比较简单，我们重点说下递归。")]),v._v(" "),e("p",[v._v("递归由下面两部分组成：")]),v._v(" "),e("ol",[e("li",[v._v("递归主体，就是要循环解决问题的代码")]),v._v(" "),e("li",[v._v("递归的跳出条件，递归不能一直递归下去，需要完成一定条件后跳出")])]),v._v(" "),e("p",[v._v("关于递归有个经典的面试题目是：")]),v._v(" "),e("blockquote",[e("p",[v._v("实现 JS 对象的深拷贝")])]),v._v(" "),e("p",[e("strong",[v._v("什么是深拷贝？")])]),v._v(" "),e("p",[v._v("「深拷贝」就是在拷贝数据的时候，将数据的所有"),e("strong",[v._v("引用结构")]),v._v("都拷贝一份。简单的说就是，在内存中存在两个数据结构完全相同又相互独立的数据，将引用型类型进行复制，而不是只复制其引用关系。")]),v._v(" "),e("p",[v._v("分析下怎么做「深拷贝」：")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("首先假设深拷贝这个方法已经完成，为 deepClone")])]),v._v(" "),e("li",[e("p",[v._v("要拷贝一个数据，我们肯定要去遍历它的属性，如果这个对象的属性仍是对象，继续使用这个方法，如此往复")]),v._v(" "),e("p",[v._v("function deepClone(o1, o2) {\nfor (let k in o2) {\nif (typeof o2[k] === 'object') {\no1[k] = {};\ndeepClone(o1[k], o2[k]);\n} else {\no1[k] = o2[k];\n}\n}\n}\n// 测试用例\nlet obj = {\na: 1,\nb: [1, 2, 3],\nc: {}\n};\nlet emptyObj = Object.create(null);\ndeepClone(emptyObj, obj);\nconsole.log(emptyObj.a == obj.a);\nconsole.log(emptyObj.b == obj.b);")])])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("递归容易造成爆栈，尾部调用可以解决递归的这个问题，Chrome 的 V8 引擎做了尾部调用优化，我们在写代码的时候也要注意尾部调用写法。递归的爆栈问题可以通过将递归改写成枚举的方式来解决，就是通过"),e("code",[v._v("for")]),v._v("或者"),e("code",[v._v("while")]),v._v("来代替递归。")]),v._v(" "),e("p",[v._v("我们在使用递归的时候，要注意做优化，比如下面的题目。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：求斐波那契数列（兔子数列） 1,1,2,3,5,8,13,21,34,55,89...中的第 n 项")])]),v._v(" "),e("p",[v._v("下面的代码中"),e("code",[v._v("count")]),v._v("记录递归的次数，我们看下两种差异性的代码中的"),e("code",[v._v("count")]),v._v("的值：")]),v._v(" "),e("pre",[e("code",[v._v("let count = 0;\nfunction fn(n) {\n    let cache = {};\n    function _fn(n) {\n        if (cache[n]) {\n            return cache[n];\n        }\n        count++;\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        let prev = _fn(n - 1);\n        cache[n - 1] = prev;\n        let next = _fn(n - 2);\n        cache[n - 2] = next;\n        return prev + next;\n    }\n    return _fn(n);\n}\n\nlet count2 = 0;\nfunction fn2(n) {\n    count2++;\n    if (n == 1 || n == 2) {\n        return 1;\n    }\n    return fn2(n - 1) + fn2(n - 2);\n}\n\nconsole.log(fn(20), count); // 6765 20\nconsole.log(fn2(20), count2); // 6765 13529\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h2",{attrs:{id:"快排和二分查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快排和二分查找"}},[v._v("#")]),v._v(" "),e("strong",[v._v("快排和二分查找")])]),v._v(" "),e("p",[v._v("前端中面试排序和查找的可能性比较小，因为 JS 引擎已经把这些常用操作优化得很好了，可能项目中你费劲写的一个排序方法，都不如"),e("code",[v._v("Array.sort")]),v._v("速度快且代码少。因此，掌握快排和二分查找就可以了。")]),v._v(" "),e("p",[v._v("快排和二分查找都基于一种叫做「分治」的算法思想，通过对数据进行分类处理，不断降低数量级，实现"),e("code",[v._v("O(logN)")]),v._v("（对数级别，比"),e("code",[v._v("O(n)")]),v._v("这种线性复杂度更低的一种）的复杂度。")]),v._v(" "),e("h3",{attrs:{id:"快速排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[v._v("#")]),v._v(" "),e("strong",[v._v("快速排序")])]),v._v(" "),e("p",[v._v("快排大概的流程是：")]),v._v(" "),e("ol",[e("li",[v._v("随机选择数组中的一个数 A，以这个数为基准")]),v._v(" "),e("li",[v._v("其他数字跟这个数进行比较，比这个数小的放在其左边，大的放到其右边")]),v._v(" "),e("li",[v._v("经过一次循环之后，A 左边为小于 A 的，右边为大于 A 的")]),v._v(" "),e("li",[v._v("这时候将左边和右边的数再递归上面的过程")])]),v._v(" "),e("p",[v._v("具体代码如下：")]),v._v(" "),e("pre",[e("code",[v._v("const Arr = [85, 24, 63, 45, 17, 31, 96, 50];\nfunction quickSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    let pivotIndex = Math.floor(arr.length / 2);\n    let pivot = arr.splice(pivotIndex, 1)[0];\n    let left = [];\n    let right = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    // 递归\n    return quickSort(left).concat([pivot], quickSort(right));\n}\n\nconsole.log(quickSort(Arr));\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h3",{attrs:{id:"二分查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[v._v("#")]),v._v(" "),e("strong",[v._v("二分查找")])]),v._v(" "),e("p",[v._v("二分查找法主要是解决「在一堆有序的数中找出指定的数」这类问题，不管这些数是一维数组还是多维数组，只要有序，就可以用二分查找来优化。")]),v._v(" "),e("p",[v._v("二分查找是一种「分治」思想的算法，大概流程如下：")]),v._v(" "),e("ol",[e("li",[v._v("数组中排在中间的数字 A，与要找的数字比较大小")]),v._v(" "),e("li",[v._v("因为数组是有序的，所以： a) A 较大则说明要查找的数字应该从前半部分查找 b) A 较小则说明应该从查找数字的后半部分查找")]),v._v(" "),e("li",[v._v("这样不断查找缩小数量级（扔掉一半数据），直到找完数组为止")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。")])]),v._v(" "),e("pre",[e("code",[v._v("function Find(target, array) {\n    let i = 0;\n    let j = array[i].length - 1;\n    while (i < array.length && j >= 0) {\n        if (array[i][j] < target) {\n            i++;\n        } else if (array[i][j] > target) {\n            j--;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n\n//测试用例\nconsole.log(Find(10, [\n    [1, 2, 3, 4], \n    [5, 9, 10, 11], \n    [13, 20, 21, 23]\n    ])\n);\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("另外笔者在面试中遇见过下面的问题：")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：现在我有一个 1~1000 区间中的正整数，需要你猜下这个数字是几，你只能问一个问题：大了还是小了？问需要猜几次才能猜对？")])]),v._v(" "),e("p",[v._v("拿到这个题目，笔者想到的就是电视上面有个「猜价格」的购物节目，在规定时间内猜对价格就可以把实物抱回家。所以问题就是让面试官不停地回答我猜的数字比这个数字大了还是小了。这就是二分查找！")]),v._v(" "),e("p",[v._v("猜几次呢？其实这个问题就是个二分查找的算法时间复杂度问题，二分查找的时间复杂度是"),e("code",[v._v("O(logN)")]),v._v("，所以求"),e("code",[v._v("log1000")]),v._v("的解就是猜的次数。我们知道"),e("code",[v._v("2^10=1024")]),v._v("，所以可以快速估算出："),e("code",[v._v("log1000")]),v._v("约等于 10，最多问 10 次就能得到这个数！")]),v._v(" "),e("h2",{attrs:{id:"面试遇见不会的算法问题怎么办"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试遇见不会的算法问题怎么办"}},[v._v("#")]),v._v(" "),e("strong",[v._v("面试遇见不会的算法问题怎么办")])]),v._v(" "),e("p",[v._v("面试的时候，在遇见算法题目的时候，应该揣摩面试官的意图，听好关键词，比如：有序的数列做查找、要求算法复杂度是"),e("code",[v._v("O(logN)")]),v._v("这类一般就是用二分的思想。")]),v._v(" "),e("p",[v._v("一般来说算法题目的解题思路分以下四步：")]),v._v(" "),e("ol",[e("li",[v._v("先降低数量级，拿可以计算出来的情况（数据）来构思解题步骤")]),v._v(" "),e("li",[v._v("根据解题步骤编写程序，优先将特殊情况做好判断处理，比如一个大数组的问题，如果数组为两个数长度的情况")]),v._v(" "),e("li",[v._v("检验程序正确性")]),v._v(" "),e("li",[v._v("是否可以优化（由浅到深），有能力的话可以故意预留优化点，这样可以体现个人技术能力")])]),v._v(" "),e("h2",{attrs:{id:"正则匹配解题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则匹配解题"}},[v._v("#")]),v._v(" "),e("strong",[v._v("正则匹配解题")])]),v._v(" "),e("p",[v._v("很多算法题目利用 ES 语法的特性来回答更加简单，比如正则匹配就是常用的一种方式。笔者简单通过几个真题来汇总下正则的知识点。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：字符串中第一个出现一次的字符")])]),v._v(" "),e("p",[v._v("请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符「go」时，第一个只出现一次的字符是「g」。当从该字符流中读出前六个字符「google」时，第一个只出现一次的字符是「l」。")]),v._v(" "),e("p",[v._v("这个如果用纯算法来解答需要遍历字符串，统计每个字符出现的次数，然后按照字符串的顺序来找出第一次出现一次的字符，整个过程比较繁琐，如果用正则就简单多了。")]),v._v(" "),e("pre",[e("code",[v._v("function find(str){\n    for (var i = 0; i < str.length; i++) {\n        let char = str[i]\n        let reg = new RegExp(char, 'g');\n        let l = str.match(reg).length\n        if(l===1){\n            return char\n        }\n    }\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("当然，使用"),e("code",[v._v("indexOf/lastIndexOf")]),v._v("也是一个取巧的方式。再来看一个千分位问题。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：将"),e("code",[v._v("1234567")]),v._v(" 变成 "),e("code",[v._v("1,234,567")]),v._v("，即千分位标注")])]),v._v(" "),e("p",[v._v("这个题目可以用算法直接来解，如果候选人使用正则来回答，这样主动展现了自己其他方面的优势，即使不是算法解答出来的，面试官一般也不会太难为他。这道题目可以利用正则的「零宽断言」"),e("code",[v._v("(?=exp)")]),v._v("，意思是它断言自身出现的位置的后面能匹配表达式 exp。数字千分位的特点是，第一个逗号后面数字的个数是3的倍数，正则："),e("code",[v._v("/(\\d{3})+$/")]),v._v("；第一个逗号前最多可以有 1~3 个数字，正则："),e("code",[v._v("/\\d{1,3}/")]),v._v("。加起来就是"),e("code",[v._v("/\\d{1,3}(\\d{3})+$/")]),v._v("，分隔符要从前往后加。")]),v._v(" "),e("p",[v._v("对于零宽断言的详细介绍可以阅读「"),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fdeerchao.net%2Ftutorials%2Fregex%2Fregex.htm%23lookaround",target:"_blank",rel:"noopener noreferrer"}},[v._v("零宽断言"),e("OutboundLink")],1),v._v("」这篇文章。")]),v._v(" "),e("pre",[e("code",[v._v("function exchange(num) {\n    num += ''; //转成字符串\n    if (num.length <= 3) {\n        return num;\n    }\n\n    num = num.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (v) => {\n        console.log(v)\n        return v + ',';\n    });\n    return num;\n}\n\nconsole.log(exchange(1234567));\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("当然上面讲到的多数是算法题目取巧的方式，下面这个题目是纯正则考查，笔者在面试的过程中碰见过，这里顺便提一下。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目，请写出下面的代码执行结果")])]),v._v(" "),e("pre",[e("code",[v._v("var str = 'google';\nvar reg = /o/g;\nconsole.log(reg.test(str))\nconsole.log(reg.test(str))\nconsole.log(reg.test(str))\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("代码执行后，会发现，最后一个不是为"),e("code",[v._v("true")]),v._v("，而是"),e("code",[v._v("false")]),v._v("，这是因为"),e("code",[v._v("reg")]),v._v("这个正则有个"),e("code",[v._v("g")]),v._v("，即"),e("code",[v._v("global")]),v._v("全局的属性，这种情况下"),e("code",[v._v("lastIndex")]),v._v("就发挥作用了，可以看下面的代码执行结果就明白了。")]),v._v(" "),e("pre",[e("code",[v._v("console.log(reg.test(str), reg.lastIndex)\nconsole.log(reg.test(str), reg.lastIndex)\nconsole.log(reg.test(str), reg.lastIndex)\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("实际开发中也会犯这样的错误，比如为了减少变量每次都重新定义，会把用到的变量提前定义好，这样在使用的时候容易掉进坑里，比如下面代码：")]),v._v(" "),e("pre",[e("code",[v._v("(function(){\n    const reg = /o/g;\n    function isHasO(str){\n        // reg.lastIndex = 0; 这样就可以避免这种情况\n        return reg.test(str)\n    }\n    var str = 'google';\n    console.log(isHasO(str))\n    console.log(isHasO(str))\n    console.log(isHasO(str))\n}())\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h2",{attrs:{id:"小结-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-5"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("本小节介绍了数据结构和算法的关系，作为普通的前端也应该学习数据结构和算法知识，并且顺带介绍了下正则匹配。具体来说，本小节梳理了以下几部分数据结构和算法知识点：")]),v._v(" "),e("ol",[e("li",[v._v("经常用到的数据结构有哪些，它们的特点有哪些")]),v._v(" "),e("li",[v._v("递归和枚举是最基础的算法，必须牢牢掌握")]),v._v(" "),e("li",[v._v("排序里面理解并掌握快速排序算法，其他排序算法可以根据个人实际情况大概了解")]),v._v(" "),e("li",[v._v("有序查找用二分查找")]),v._v(" "),e("li",[v._v("遇见不会的算法问题，先缩小数量级，然后分析推导")])]),v._v(" "),e("p",[v._v("当然算法部分还有很多知识，比如动态规划这些算法思想，还有图和树常用到的广度优先搜索和深度优先搜索。这些知识在前端面试和项目中遇见得不多，感兴趣的读者可以在梳理知识点的时候根据个人情况自行决定是否复习。")]),v._v(" "),e("p",[v._v("上一篇："),e("a",{attrs:{href:"541673"}},[v._v("一面 3：CSS-HTML 知识点与高频考题解析")]),v._v("下一篇："),e("a",{attrs:{href:"541675"}},[v._v("一面 5：浏览器相关知识点与高频考题解析")])]),v._v(" "),e("h1",{attrs:{id:"一面-5：浏览器相关知识点与高频考题解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一面-5：浏览器相关知识点与高频考题解析"}},[v._v("#")]),v._v(" "),e("strong",[v._v("一面 5：浏览器相关知识点与高频考题解析")])]),v._v(" "),e("p",[v._v("Web 前端工程师写的页面要跑在浏览器里面，所以面试中也会出现很多跟浏览器相关的面试题目。")]),v._v(" "),e("h2",{attrs:{id:"知识点梳理-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知识点梳理-5"}},[v._v("#")]),v._v(" "),e("strong",[v._v("知识点梳理")]),v._v("****")]),v._v(" "),e("ul",[e("li",[v._v("浏览器加载页面和渲染过程")]),v._v(" "),e("li",[v._v("性能优化")]),v._v(" "),e("li",[v._v("Web 安全")])]),v._v(" "),e("p",[v._v("本小节会从浏览器的加载过程开始讲解，然后介绍如何进行性能优化，最后介绍下 Web 开发中常见的安全问题和预防。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"加载页面和渲染过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加载页面和渲染过程"}},[v._v("#")]),v._v(" "),e("strong",[v._v("加载页面和渲染过程")])]),v._v(" "),e("p",[v._v("可将加载过程和渲染过程分开说。回答问题的时候，关键要抓住核心的要点，把要点说全面，稍加解析即可，简明扼要不拖沓。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：浏览器从加载页面到渲染页面的过程")])]),v._v(" "),e("h3",{attrs:{id:"加载过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加载过程"}},[v._v("#")]),v._v(" "),e("strong",[v._v("加载过程")])]),v._v(" "),e("p",[v._v("要点如下：")]),v._v(" "),e("ul",[e("li",[v._v("浏览器根据 DNS 服务器得到域名的 IP 地址")]),v._v(" "),e("li",[v._v("向这个 IP 的机器发送 HTTP 请求")]),v._v(" "),e("li",[v._v("服务器收到、处理并返回 HTTP 请求")]),v._v(" "),e("li",[v._v("浏览器得到返回内容")])]),v._v(" "),e("p",[v._v("例如在浏览器输入"),e("code",[v._v("https://juejin.im/timeline")]),v._v("，然后经过 DNS 解析，"),e("code",[v._v("juejin.im")]),v._v("对应的 IP 是"),e("code",[v._v("36.248.217.149")]),v._v("（不同时间、地点对应的 IP 可能会不同）。然后浏览器向该 IP 发送 HTTP 请求。")]),v._v(" "),e("p",[v._v("server 端接收到 HTTP 请求，然后经过计算（向不同的用户推送不同的内容），返回 HTTP 请求，返回的内容如下：")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("p",[v._v("其实就是一堆 HMTL 格式的字符串，因为只有 HTML 格式浏览器才能正确解析，这是 W3C 标准的要求。接下来就是浏览器的渲染过程。")]),v._v(" "),e("h3",{attrs:{id:"渲染过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程"}},[v._v("#")]),v._v(" "),e("strong",[v._v("渲染过程")])]),v._v(" "),e("p",[v._v("要点如下：")]),v._v(" "),e("ul",[e("li",[v._v("根据 HTML 结构生成 DOM 树")]),v._v(" "),e("li",[v._v("根据 CSS 生成 CSSOM")]),v._v(" "),e("li",[v._v("将 DOM 和 CSSOM 整合形成 RenderTree")]),v._v(" "),e("li",[v._v("根据 RenderTree 开始渲染和展示")]),v._v(" "),e("li",[v._v("遇到"),e("code",[v._v("<script>")]),v._v("时，会执行并阻塞渲染")])]),v._v(" "),e("p",[v._v("上文中，浏览器已经拿到了 server 端返回的 HTML 内容，开始解析并渲染。最初拿到的内容就是一堆字符串，必须先结构化成计算机擅长处理的基本数据结构，因此要把 HTML 字符串转化成 DOM 树 —— 树是最基本的数据结构之一。")]),v._v(" "),e("p",[v._v("解析过程中，如果遇到"),e("code",[v._v('<link href="...">')]),v._v("和"),e("code",[v._v('<script src="...">')]),v._v("这种外链加载 CSS 和 JS 的标签，浏览器会异步下载，下载过程和上文中下载 HTML 的流程一样。只不过，这里下载下来的字符串是 CSS 或者 JS 格式的。")]),v._v(" "),e("p",[v._v("浏览器将 CSS 生成 CSSOM，再将 DOM 和 CSSOM 整合成 RenderTree ，然后针对 RenderTree 即可进行渲染了。大家可以想一下，有 DOM 结构、有样式，此时就能满足渲染的条件了。另外，这里也可以解释一个问题 —— "),e("strong",[v._v("为何要将 CSS 放在 HTML 头部？")]),v._v("—— 这样会让浏览器尽早拿到 CSS 尽早生成 CSSOM，然后在解析 HTML 之后可一次性生成最终的 RenderTree，渲染一次即可。如果 CSS 放在 HTML 底部，会出现渲染卡顿的情况，影响性能和体验。")]),v._v(" "),e("p",[v._v("最后，渲染过程中，如果遇到"),e("code",[v._v("<script>")]),v._v("就停止渲染，执行 JS 代码。因为浏览器渲染和 JS 执行共用一个线程，而且这里必须是单线程操作，多线程会产生渲染 DOM 冲突。待"),e("code",[v._v("<script>")]),v._v("内容执行完之后，浏览器继续渲染。最后再思考一个问题 —— "),e("strong",[v._v("为何要将 JS 放在 HTML 底部？")]),v._v("—— JS 放在底部可以保证让浏览器优先渲染完现有的 HTML 内容，让用户先看到内容，体验好。另外，JS 执行如果涉及 DOM 操作，得等待 DOM 解析完成才行，JS 放在底部执行时，HTML 肯定都解析成了 DOM 结构。JS 如果放在 HTML 顶部，JS 执行的时候 HTML 还没来得及转换为 DOM 结构，可能会报错。")]),v._v(" "),e("p",[v._v("关于浏览器整个流程，百度的多益大神有更加详细的文章，推荐阅读下：《"),e("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Ffex.baidu.com%2Fblog%2F2014%2F05%2Fwhat-happen%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("从输入 URL 到页面加载完成的过程中都发生了什么事情？"),e("OutboundLink")],1),v._v(" 》。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[v._v("#")]),v._v(" "),e("strong",[v._v("性能优化")])]),v._v(" "),e("p",[v._v("性能优化的题目也是面试常考的，这类题目有很大的扩展性，能够扩展出来很多小细节，而且对个人的技术视野和业务能力有很大的挑战。这部分笔者会重点讲下常用的性能优化方案。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：总结前端性能优化的解决方案")])]),v._v(" "),e("h3",{attrs:{id:"优化原则和方向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化原则和方向"}},[v._v("#")]),v._v(" "),e("strong",[v._v("优化原则和方向")])]),v._v(" "),e("p",[v._v("性能优化的原则是"),e("strong",[v._v("以更好的用户体验为标准")]),v._v("，具体就是实现下面的目标：")]),v._v(" "),e("ol",[e("li",[v._v("多使用内存、缓存或者其他方法")]),v._v(" "),e("li",[v._v("减少 CPU 和GPU 计算，更快展现")])]),v._v(" "),e("p",[v._v("优化的方向有两个：")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("减少页面体积，提升网络加载")])]),v._v(" "),e("li",[e("strong",[v._v("优化页面渲染")])])]),v._v(" "),e("h3",{attrs:{id:"减少页面体积，提升网络加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#减少页面体积，提升网络加载"}},[v._v("#")]),v._v(" "),e("strong",[v._v("减少页面体积，提升网络加载")])]),v._v(" "),e("ul",[e("li",[v._v("静态资源的压缩合并（JS 代码压缩合并、CSS 代码压缩合并、雪碧图）")]),v._v(" "),e("li",[v._v("静态资源缓存（资源名称加 MD5 戳）")]),v._v(" "),e("li",[v._v("使用 CDN 让资源加载更快")])]),v._v(" "),e("h3",{attrs:{id:"优化页面渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化页面渲染"}},[v._v("#")]),v._v(" "),e("strong",[v._v("优化页面渲染")])]),v._v(" "),e("ul",[e("li",[v._v("CSS 放前面，JS 放后面")]),v._v(" "),e("li",[v._v("懒加载（图片懒加载、下拉加载更多）")]),v._v(" "),e("li",[v._v("减少DOM 查询，对 DOM 查询做缓存")]),v._v(" "),e("li",[v._v("减少DOM 操作，多个操作尽量合并在一起执行（"),e("code",[v._v("DocumentFragment")]),v._v("）")]),v._v(" "),e("li",[v._v("事件节流")]),v._v(" "),e("li",[v._v("尽早执行操作（"),e("code",[v._v("DOMContentLoaded")]),v._v("）")]),v._v(" "),e("li",[v._v("使用 SSR 后端渲染，数据直接输出到 HTML 中，减少浏览器使用 JS 模板渲染页面 HTML 的时间")])]),v._v(" "),e("h3",{attrs:{id:"详细解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#详细解释"}},[v._v("#")]),v._v(" "),e("strong",[v._v("详细解释")])]),v._v(" "),e("h4",{attrs:{id:"静态资源的压缩合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态资源的压缩合并"}},[v._v("#")]),v._v(" "),e("strong",[v._v("静态资源的压缩合并")])]),v._v(" "),e("p",[v._v("如果不合并，每个都会走一遍之前介绍的请求过程")]),v._v(" "),e("pre",[e("code",[v._v('<script src="a.js"><\/script>\n<script src="b.js"><\/script>\n<script src="c.js"><\/script>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("如果合并了，就只走一遍请求过程")]),v._v(" "),e("pre",[e("code",[v._v('<script src="abc.js"><\/script>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h4",{attrs:{id:"静态资源缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态资源缓存"}},[v._v("#")]),v._v(" "),e("strong",[v._v("静态资源缓存")])]),v._v(" "),e("p",[v._v("通过链接名称控制缓存")]),v._v(" "),e("pre",[e("code",[v._v('<script src="abc_1.js"><\/script>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("只有内容改变的时候，链接名称才会改变")]),v._v(" "),e("pre",[e("code",[v._v('<script src="abc_2.js"><\/script>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("这个名称不用手动改，可通过前端构建工具根据文件内容，为文件名称添加 MD5 后缀。")]),v._v(" "),e("h4",{attrs:{id:"使用-cdn-让资源加载更快"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-cdn-让资源加载更快"}},[v._v("#")]),v._v(" "),e("strong",[v._v("使用 CDN 让资源加载更快")])]),v._v(" "),e("p",[v._v("CDN 会提供专业的加载优化方案，静态资源要尽量放在 CDN 上。例如：")]),v._v(" "),e("pre",[e("code",[v._v('<script src="https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js"><\/script>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h4",{attrs:{id:"使用-ssr-后端渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-ssr-后端渲染"}},[v._v("#")]),v._v(" "),e("strong",[v._v("使用 SSR 后端渲染")])]),v._v(" "),e("p",[v._v("可一次性输出 HTML 内容，不用在页面渲染完成之后，再通过 Ajax 加载数据、再渲染。例如使用 smarty、Vue SSR 等。")]),v._v(" "),e("h4",{attrs:{id:"css-放前面，js-放后面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-放前面，js-放后面"}},[v._v("#")]),v._v(" "),e("strong",[v._v("CSS 放前面，JS 放后面")])]),v._v(" "),e("p",[v._v("上文讲述浏览器渲染过程时已经提过，不再赘述。")]),v._v(" "),e("h4",{attrs:{id:"懒加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[v._v("#")]),v._v(" "),e("strong",[v._v("懒加载")])]),v._v(" "),e("p",[v._v("一开始先给为 "),e("code",[v._v("src")]),v._v(" 赋值成一个通用的预览图，下拉时候再动态赋值成正式的图片。如下，"),e("code",[v._v("preview.png")]),v._v("是预览图片，比较小，加载很快，而且很多图片都共用这个"),e("code",[v._v("preview.png")]),v._v("，加载一次即可。待页面下拉，图片显示出来时，再去替换"),e("code",[v._v("src")]),v._v("为"),e("code",[v._v("data-realsrc")]),v._v("的值。")]),v._v(" "),e("pre",[e("code",[v._v('<img src="preview.png" data-realsrc="abc.png"/>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("另外，这里为何要用"),e("code",[v._v("data-")]),v._v("开头的属性值？—— 所有 HTML 中自定义的属性，都应该用"),e("code",[v._v("data-")]),v._v("开头，因为"),e("code",[v._v("data-")]),v._v("开头的属性浏览器渲染的时候会忽略掉，提高渲染性能。")]),v._v(" "),e("h4",{attrs:{id:"dom-查询做缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom-查询做缓存"}},[v._v("#")]),v._v(" "),e("strong",[v._v("DOM 查询做缓存")])]),v._v(" "),e("p",[v._v("两段代码做一下对比：")]),v._v(" "),e("pre",[e("code",[v._v("var pList = document.getElementsByTagName('p')  // 只查询一个 DOM ，缓存在 pList 中了\nvar i\nfor (i = 0; i < pList.length; i++) {\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("pre",[e("code",[v._v("var i\nfor (i = 0; i < document.getElementsByTagName('p').length; i++) {  // 每次循环，都会查询 DOM ，耗费性能\n}\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("总结：DOM 操作，无论查询还是修改，都是非常耗费性能的，应尽量减少。")]),v._v(" "),e("h4",{attrs:{id:"合并-dom-插入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并-dom-插入"}},[v._v("#")]),v._v(" "),e("strong",[v._v("合并 DOM 插入")])]),v._v(" "),e("p",[v._v("DOM 操作是非常耗费性能的，因此插入多个标签时，先插入 Fragment 然后再统一插入 DOM。")]),v._v(" "),e("pre",[e("code",[v._v('var listNode = document.getElementById(\'list\')\n// 要插入 10 个 li 标签\nvar frag = document.createDocumentFragment();\nvar x, li;\nfor(x = 0; x < 10; x++) {\n    li = document.createElement("li");\n    li.innerHTML = "List item " + x;\n    frag.appendChild(li);  // 先放在 frag 中，最后一次性插入到 DOM 结构中。\n}\nlistNode.appendChild(frag);\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h4",{attrs:{id:"事件节流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件节流"}},[v._v("#")]),v._v(" "),e("strong",[v._v("事件节流")])]),v._v(" "),e("p",[v._v("例如要在文字改变时触发一个 change 事件，通过 keyup 来监听。使用节流。")]),v._v(" "),e("pre",[e("code",[v._v("var textarea = document.getElementById('text')\nvar timeoutId\ntextarea.addEventListener('keyup', function () {\n    if (timeoutId) {\n        clearTimeout(timeoutId)\n    }\n    timeoutId = setTimeout(function () {\n        // 触发 change 事件\n    }, 100)\n})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h4",{attrs:{id:"尽早执行操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#尽早执行操作"}},[v._v("#")]),v._v(" "),e("strong",[v._v("尽早执行操作")])]),v._v(" "),e("pre",[e("code",[v._v("window.addEventListener('load', function () {\n    // 页面的全部资源加载完才会执行，包括图片、视频等\n})\ndocument.addEventListener('DOMContentLoaded', function () {\n    // DOM 渲染完即可执行，此时图片、视频还可能没有加载完\n})\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h4",{attrs:{id:"性能优化怎么做"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能优化怎么做"}},[v._v("#")]),v._v(" "),e("strong",[v._v("性能优化怎么做")])]),v._v(" "),e("p",[v._v("上面提到的都是性能优化的单个点，性能优化项目具体实施起来，应该按照下面步骤推进：")]),v._v(" "),e("ol",[e("li",[v._v("建立性能数据收集平台，摸底当前性能数据，通过性能打点，将上述整个页面打开过程消耗时间记录下来")]),v._v(" "),e("li",[v._v("分析耗时较长时间段原因，寻找优化点，确定优化目标")]),v._v(" "),e("li",[v._v("开始优化")]),v._v(" "),e("li",[v._v("通过数据手机平台记录优化效果")]),v._v(" "),e("li",[v._v("不断调整优化点和预期目标，循环2~4步骤")])]),v._v(" "),e("p",[v._v("性能优化是个长期的事情，不是一蹴而就的，应该本着先摸底、再分析、后优化的原则逐步来做。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"web-安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-安全"}},[v._v("#")]),v._v(" "),e("strong",[v._v("Web 安全")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：前端常见的安全问题有哪些？")])]),v._v(" "),e("p",[v._v("Web 前端的安全问题，能回答出下文的两个问题，这个题目就能基本过关了。开始之前，先说一个最简单的攻击方式 —— SQL 注入。")]),v._v(" "),e("p",[v._v("上学的时候就知道有一个「SQL注入」的攻击方式。例如做一个系统的登录界面，输入用户名和密码，提交之后，后端直接拿到数据就拼接 SQL 语句去查询数据库。如果在输入时进行了恶意的 SQL 拼装，那么最后生成的 SQL 就会有问题。但是现在稍微大型一点的系统，都不会这么做，从提交登录信息到最后拿到授权，要经过层层的验证。因此，SQL 注入都只出现在比较低端小型的系统上。")]),v._v(" "),e("h3",{attrs:{id:"xss（cross-site-scripting，跨站脚本攻击）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xss（cross-site-scripting，跨站脚本攻击）"}},[v._v("#")]),v._v(" "),e("strong",[v._v("XSS（Cross Site Scripting，跨站脚本攻击）")])]),v._v(" "),e("p",[v._v("这是前端最常见的攻击方式，很多大型网站（如 Facebook）都被 XSS 攻击过。")]),v._v(" "),e("p",[v._v("举一个例子，我在一个博客网站正常发表一篇文章，输入汉字、英文和图片，完全没有问题。但是如果我写的是恶意的 JS 脚本，例如获取到"),e("code",[v._v("document.cookie")]),v._v("然后传输到自己的服务器上，那我这篇博客的每一次浏览都会执行这个脚本，都会把访客 cookie 中的信息偷偷传递到我的服务器上来。")]),v._v(" "),e("p",[v._v("其实原理上就是黑客通过某种方式（发布文章、发布评论等）将一段特定的 JS 代码隐蔽地输入进去。然后别人再看这篇文章或者评论时，之前注入的这段 JS 代码就执行了。"),e("strong",[v._v("JS 代码一旦执行，那可就不受控制了，因为它跟网页原有的 JS 有同样的权限")]),v._v("，例如可以获取 server 端数据、可以获取 cookie 等。于是，攻击就这样发生了。")]),v._v(" "),e("h4",{attrs:{id:"xss的危害"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xss的危害"}},[v._v("#")]),v._v(" "),e("strong",[v._v("XSS的危害")])]),v._v(" "),e("p",[v._v("XSS 的危害相当大，如果页面可以随意执行别人不安全的 JS 代码，轻则会让页面错乱、功能缺失，重则会造成用户的信息泄露。")]),v._v(" "),e("p",[v._v("比如早些年社交网站经常爆出 XSS 蠕虫，通过发布的文章内插入 JS，用户访问了感染不安全 JS 注入的文章，会自动重新发布新的文章，这样的文章会通过推荐系统进入到每个用户的文章列表面前，很快就会造成大规模的感染。")]),v._v(" "),e("p",[v._v("还有利用获取 cookie 的方式，将 cookie 传入入侵者的服务器上，入侵者就可以模拟 cookie 登录网站，对用户的信息进行篡改。")]),v._v(" "),e("h4",{attrs:{id:"xss的预防"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xss的预防"}},[v._v("#")]),v._v(" "),e("strong",[v._v("XSS的预防")])]),v._v(" "),e("p",[v._v("那么如何预防 XSS 攻击呢？—— 最根本的方式，就是对用户输入的内容进行验证和替换，需要替换的字符有：")]),v._v(" "),e("pre",[e("code",[v._v("& 替换为：&amp;\n< 替换为：&lt;\n> 替换为：&gt;\n” 替换为：&quot;\n‘ 替换为：&#x27;\n/ 替换为：&#x2f;\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("替换了这些字符之后，黑客输入的攻击代码就会失效，XSS 攻击将不会轻易发生。")]),v._v(" "),e("p",[v._v("除此之外，还可以通过对 cookie 进行较强的控制，比如对敏感的 cookie 增加"),e("code",[v._v("http-only")]),v._v("限制，让 JS 获取不到 cookie 的内容。")]),v._v(" "),e("h3",{attrs:{id:"csrf（cross-site-request-forgery，跨站请求伪造）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf（cross-site-request-forgery，跨站请求伪造）"}},[v._v("#")]),v._v(" "),e("strong",[v._v("CSRF（Cross-site request forgery，跨站请求伪造）")])]),v._v(" "),e("p",[v._v("CSRF 是借用了当前操作者的权限来偷偷地完成某个操作，而不是拿到用户的信息。")]),v._v(" "),e("p",[v._v("例如，一个支付类网站，给他人转账的接口是"),e("code",[v._v("http://buy.com/pay?touid=999&money=100")]),v._v("，而这个接口在使用时没有任何密码或者 token 的验证，只要打开访问就直接给他人转账。一个用户已经登录了"),e("code",[v._v("http://buy.com")]),v._v("，在选择商品时，突然收到一封邮件，而这封邮件正文有这么一行代码"),e("code",[v._v('<img src="http://buy.com/pay?touid=999&money=100"/>')]),v._v("，他访问了邮件之后，其实就已经完成了购买。")]),v._v(" "),e("p",[v._v("CSRF 的发生其实是借助了一个 cookie 的特性。我们知道，登录了"),e("code",[v._v("http://buy.com")]),v._v("之后，cookie 就会有登录过的标记了，此时请求"),e("code",[v._v("http://buy.com/pay?touid=999&money=100")]),v._v("是会带着 cookie 的，因此 server 端就知道已经登录了。而如果在"),e("code",[v._v("http://buy.com")]),v._v("去请求其他域名的 API 例如"),e("code",[v._v("http://abc.com/api")]),v._v("时，是不会带 cookie 的，这是浏览器的同源策略的限制。但是 —— "),e("strong",[v._v("此时在其他域名的页面中，请求"),e("code",[v._v("http://buy.com/pay?touid=999&money=100")]),v._v("，会带着"),e("code",[v._v("buy.com")]),v._v("的 cookie ，这是发生 CSRF 攻击的理论基础。")])]),v._v(" "),e("p",[v._v("预防 CSRF 就是加入各个层级的权限验证，例如现在的购物网站，只要涉及现金交易，肯定要输入密码或者指纹才行。除此之外，敏感的接口使用"),e("code",[v._v("POST")]),v._v("请求而不是"),e("code",[v._v("GET")]),v._v("也是很重要的。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"小结-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-6"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("本小节总结了前端运行环境（即浏览器）的一些常考查知识点，包括页面加载过程、如何性能优化以及需要注意的安全问题。")]),v._v(" "),e("p",[v._v("上一篇："),e("a",{attrs:{href:"541674"}},[v._v("一面 4：从容应对算法题目")]),v._v("下一篇："),e("a",{attrs:{href:"541676"}},[v._v("一面 6：开发环境相关知识点与高频考题解析")])]),v._v(" "),e("h1",{attrs:{id:"一面-6：开发环境相关知识点与高频考题解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一面-6：开发环境相关知识点与高频考题解析"}},[v._v("#")]),v._v(" "),e("strong",[v._v("一面 6：开发环境相关知识点与高频考题解析")])]),v._v(" "),e("p",[v._v("工程师的开发环境决定其开发效率，常用的开发环境配置也是面试考查点之一。")]),v._v(" "),e("h2",{attrs:{id:"知识点梳理-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知识点梳理-6"}},[v._v("#")]),v._v(" "),e("strong",[v._v("知识点梳理")])]),v._v(" "),e("ul",[e("li",[v._v("IDE")]),v._v(" "),e("li",[v._v("Git")]),v._v(" "),e("li",[v._v("Linux 基础命令")]),v._v(" "),e("li",[v._v("前端构建工具")]),v._v(" "),e("li",[v._v("调试方法")])]),v._v(" "),e("p",[v._v("本小节会重点介绍 Git 的基本用法、代码部署和开发中常用的 Linux 命令，然后以 webpack 为例介绍下前端构建工具，最后介绍怎么抓包解决线上问题。这些都是日常开发和面试中常用到的知识。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"ide"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ide"}},[v._v("#")]),v._v(" "),e("strong",[v._v("IDE")])]),v._v(" "),e("blockquote",[e("p",[v._v("题目：你平时都使用什么 IDE 编程？有何提高效率的方法？")])]),v._v(" "),e("p",[v._v("前端最常用的 IDE 有 "),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.jetbrains.com%2Fwebstorm%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("Webstorm"),e("OutboundLink")],1),v._v("、"),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.sublimetext.com%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("Sublime"),e("OutboundLink")],1),v._v("、"),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fatom.io%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("Atom"),e("OutboundLink")],1),v._v(" 和 "),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fcode.visualstudio.com%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("VSCode"),e("OutboundLink")],1),v._v("，我们可以分别去它们的官网看一下。")]),v._v(" "),e("p",[v._v("Webstorm 是最强大的编辑器，因为它拥有各种强大的插件和功能，但是我没有用过，因为它收费。不是我舍不得花钱，而是因为我觉得免费的 Sublime 已经够我用了。跟面试官聊到 Webstorm 的时候，没用过没事儿，但一定要知道它：第一，强大；第二，收费。")]),v._v(" "),e("p",[v._v("Sublime 是我日常用的编辑器，第一它免费，第二它轻量、高效，第三它插件非常多。用 Sublime 一定要安装各种插件配合使用，可以去网上搜一下“sublime”常用插件的安装以及用法，还有它的各种快捷键，并且亲自使用它。这里就不一一演示了，网上的教程也很傻瓜式。")]),v._v(" "),e("p",[v._v("Atom 是 GitHub 出品的编辑器，跟 Sublime 差不多，免费并且插件丰富，而且跟 Sublime 相比风格上还有些小清新。但是我用过几次就不用了，因此它打开的时候会比较慢，卡一下才打开。当然总体来说也是很好用的，只是个人习惯问题。")]),v._v(" "),e("p",[v._v("VSCode 是微软出品的轻量级（相对于 Visual Studio 来说）编辑器，微软做 IDE 那是出了名的好，出了名的大而全，因此 VSCode 也有上述 Sublime 和 Atom 的各种优点，但是我也是因为个人习惯问题（本人不愿意尝试没有新意的新东西），用过几次就不用了。")]),v._v(" "),e("p",[v._v("总结一下：")]),v._v(" "),e("ul",[e("li",[v._v("如果你要走大牛、大咖、逼格的路线，就用 Webstorm")]),v._v(" "),e("li",[v._v("如果你走普通、屌丝、低调路线，就用 Sublime")]),v._v(" "),e("li",[v._v("如果你走小清新、个性路线，就用 VSCode 或者 Atom")]),v._v(" "),e("li",[v._v("如果你面试，最好有一个用的熟悉，其他都会一点")])]),v._v(" "),e("p",[v._v("最后注意：千万不要说你使用 Dreamweaver 或者 notepad++ 写前端代码，会被人鄙视的。如果你不做 .NET 也不要用 Visual Studio ，不做 Java 也不要用 Eclipse。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[v._v("#")]),v._v(" "),e("strong",[v._v("Git")])]),v._v(" "),e("p",[v._v("你此前做过的项目一定要用过 Git，而且必须是命令行，如果没用过，你自己也得恶补一下。对 Git 的基本应用比较熟悉的同学，可以跳过这一部分了。macOS 自带 Git，Windows 需要安装 Git 客户端，去 "),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fgit-scm.com%2Fdownload%2Fwin",target:"_blank",rel:"noopener noreferrer"}},[v._v("Git 官网"),e("OutboundLink")],1),v._v(" 下载即可。")]),v._v(" "),e("p",[v._v("国内比较好的 Git 服务商有 "),e("a",{attrs:{href:"http://coding.net",target:"_blank",rel:"noopener noreferrer"}},[v._v("coding.net"),e("OutboundLink")],1),v._v("，国外有大名鼎鼎的 GitHub，但是有时会有网络问题，因此建议大家注册一个 "),e("a",{attrs:{href:"http://coding.net",target:"_blank",rel:"noopener noreferrer"}},[v._v("coding.net"),e("OutboundLink")],1),v._v(" 账号然后创建项目，来练练手。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：常用的 Git 命令有哪些？如何使用 Git 多人协作开发？")])]),v._v(" "),e("h3",{attrs:{id:"常用的-git-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用的-git-命令"}},[v._v("#")]),v._v(" "),e("strong",[v._v("常用的 Git 命令")])]),v._v(" "),e("p",[v._v("首先，通过"),e("code",[v._v("git clone <项目远程地址>")]),v._v("下载下来最新的代码，例如"),e("code",[v._v("git clone git@git.coding.net:username/project-name.git")]),v._v("，默认会下载"),e("code",[v._v("master")]),v._v("分支。")]),v._v(" "),e("p",[v._v("然后修改代码，修改过程中可以通过"),e("code",[v._v("git status")]),v._v("看到自己的修改情况，通过"),e("code",[v._v("git diff <文件名>")]),v._v("可查阅单个文件的差异。")]),v._v(" "),e("p",[v._v("最后，将修改的内容提交到远程服务器，做如下操作")]),v._v(" "),e("pre",[e("code",[v._v('git add .\ngit commit -m "xxx"\ngit push origin master\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("如果别人也提交了代码，你想同步别人提交的内容，执行"),e("code",[v._v("git pull origin master")]),v._v("即可。")]),v._v(" "),e("h3",{attrs:{id:"如何多人协作开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何多人协作开发"}},[v._v("#")]),v._v(" "),e("strong",[v._v("如何多人协作开发")])]),v._v(" "),e("p",[v._v("多人协作开发，就不能使用"),e("code",[v._v("master")]),v._v("分支了，而是要每个开发者单独拉一个分支，使用"),e("code",[v._v("git checkout -b <branchname>")]),v._v("，运行"),e("code",[v._v("git branch")]),v._v("可以看到本地所有的分支名称。")]),v._v(" "),e("p",[v._v("自己的分支，如果想同步"),e("code",[v._v("master")]),v._v("分支的内容，可运行"),e("code",[v._v("git merge master")]),v._v("。切换分支可使用"),e("code",[v._v("git checkout <branchname>")]),v._v("。")]),v._v(" "),e("p",[v._v("在自己的分支上修改了内容，可以将自己的分支提交到远程服务器")]),v._v(" "),e("pre",[e("code",[v._v('git add .\ngit commit -m "xxx"\ngit push origin <branchname>\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("最后，待代码测试没问题，再将自己分支的内容合并到"),e("code",[v._v("master")]),v._v("分支，然后提交到远程服务器。")]),v._v(" "),e("pre",[e("code",[v._v("git checkout master\ngit merge <branchname>\ngit push origin master\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("h3",{attrs:{id:"关于-svn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于-svn"}},[v._v("#")]),v._v(" "),e("strong",[v._v("关于 SVN")])]),v._v(" "),e("p",[v._v("关于 SVN 笔者的态度和针对 IE 低版本浏览器的态度一样，你只需要查询资料简单了解一下。面试的时候可能会问到，但你只要熟悉了 Git 的操作，面试官不会因为你不熟悉 SVN 而难为你。前提是你要知道一点 SVN 的基本命令，自己上网一查就行。")]),v._v(" "),e("p",[v._v("不过 SVN 和 Git 的区别你得了解。SVN 是每一步操作都离不开服务器，创建分支、提交代码都需要连接服务器。而 Git 就不一样了，你可以在本地创建分支、提交代码，最后再一起 push 到服务器上。因此，Git 拥有 SVN 的所有功能，但是却比 SVN 强大得多。（Git 是 Linux 的创始人 Linus 发明的东西，因此也倍得推崇。）")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"linux-基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-基础命令"}},[v._v("#")]),v._v(" Linux 基础命令")]),v._v(" "),e("p",[v._v("目前互联网公司的线上服务器都使用 Linux 系统，测试环境为了保证和线上一致，肯定也是使用 Linux 系统，而且都是命令行的，没有桌面，不能用鼠标操作。因此，掌握基础的 Linux 命令是非常必要的。下面总结一些最常用的 Linux 命令，建议大家在真实的 Linux 系统下亲自试一下。")]),v._v(" "),e("p",[v._v("关于如何得到 Linux 系统，有两种选择：第一，在自己电脑的虚拟机中安装一个 Linux 系统，例如 Ubuntu/CentOS 等，下载这些都不用花钱；第二，花钱去阿里云等云服务商租一个最便宜的 Linux 虚拟机。推荐第二种。一般正式入职之后，公司都会给你分配开发机或者测试机，给你账号和密码，你自己可以远程登录。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：常见 linux 命令有哪些？")])]),v._v(" "),e("h3",{attrs:{id:"登录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#登录"}},[v._v("#")]),v._v(" "),e("strong",[v._v("登录")])]),v._v(" "),e("p",[v._v("入职之后，一般会有现有的用户名和密码给你，你拿来之后直接登录就行。运行 "),e("code",[v._v("ssh name@server")]),v._v(" 然后输入密码即可登录。")]),v._v(" "),e("h3",{attrs:{id:"目录操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录操作"}},[v._v("#")]),v._v(" "),e("strong",[v._v("目录操作")])]),v._v(" "),e("ul",[e("li",[v._v("创建目录 "),e("code",[v._v("mkdir <目录名称>")])]),v._v(" "),e("li",[v._v("删除目录 "),e("code",[v._v("rm <目录名称>")])]),v._v(" "),e("li",[v._v("定位目录 "),e("code",[v._v("cd <目录名称>")])]),v._v(" "),e("li",[v._v("查看目录文件 "),e("code",[v._v("ls``ll")])]),v._v(" "),e("li",[v._v("修改目录名 "),e("code",[v._v("mv <目录名称> <新目录名称>")])]),v._v(" "),e("li",[v._v("拷贝目录 "),e("code",[v._v("cp <目录名称> <新目录名称>")])])]),v._v(" "),e("h3",{attrs:{id:"文件操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件操作"}},[v._v("#")]),v._v(" "),e("strong",[v._v("文件操作")])]),v._v(" "),e("ul",[e("li",[v._v("创建文件 "),e("code",[v._v("touch <文件名称>``vi <文件名称>")])]),v._v(" "),e("li",[v._v("删除文件 "),e("code",[v._v("rm <文件名称>")])]),v._v(" "),e("li",[v._v("修改文件名 "),e("code",[v._v("mv <文件名称> <新文件名称>")])]),v._v(" "),e("li",[v._v("拷贝文件 "),e("code",[v._v("cp <文件名称> <新文件名称>")])])]),v._v(" "),e("h3",{attrs:{id:"文件内容操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件内容操作"}},[v._v("#")]),v._v(" "),e("strong",[v._v("文件内容操作")])]),v._v(" "),e("ul",[e("li",[v._v("查看文件 "),e("code",[v._v("cat <文件名称>``head <文件名称>``tail <文件名称>")])]),v._v(" "),e("li",[v._v("编辑文件内容 "),e("code",[v._v("vi <文件名称>")])]),v._v(" "),e("li",[v._v("查找文件内容 "),e("code",[v._v("grep '关键字' <文件名称>")])])]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"前端构建工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端构建工具"}},[v._v("#")]),v._v(" "),e("strong",[v._v("前端构建工具")])]),v._v(" "),e("p",[v._v("构建工具是前端工程化中不可缺少的一环，非常重要，而在面试中却有其特殊性 —— "),e("strong",[v._v("面试官会通过询问构建工具的作用、目的来询问你对构建工具的了解，只要这些你都知道，不会再追问细节")]),v._v("。因为，在实际工作中，真正能让你编写构建工具配置文件的机会非常少，一个项目就配置一次，后面就很少改动了。而且，如果是大众使用的框架（如 React、Vue 等），还会直接有现成的脚手架工具，一键创建开发环境，不用手动配置。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：前端为何要使用构建工具？它解决了什么问题？")])]),v._v(" "),e("h3",{attrs:{id:"何为构建工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#何为构建工具"}},[v._v("#")]),v._v(" "),e("strong",[v._v("何为构建工具")])]),v._v(" "),e("p",[v._v("“构建”也可理解为“编译”，就是将开发环境的代码转换成运行环境代码的过程。"),e("strong",[v._v("开发环境的代码是为了更好地阅读，而运行环境的代码是为了更快地执行，两者目的不一样，因此代码形式也不一样")]),v._v("。例如，开发环境写的 JS 代码，要通过混淆压缩之后才能放在线上运行，因为这样代码体积更小，而且对代码执行不会有任何影响。总结一下需要构建工具处理的几种情况：")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("处理模块化")]),v._v("：CSS 和 JS 的模块化语法，目前都无法被浏览器兼容。因此，开发环境可以使用既定的模块化语法，但是需要构建工具将模块化语法编译为浏览器可识别形式。例如，使用 webpack、Rollup 等处理 JS 模块化。")]),v._v(" "),e("li",[e("strong",[v._v("编译语法")]),v._v("：编写 CSS 时使用 Less、Sass，编写 JS 时使用 ES6、TypeScript 等。这些标准目前也都无法被浏览器兼容，因此需要构建工具编译，例如使用 Babel 编译 ES6 语法。")]),v._v(" "),e("li",[e("strong",[v._v("代码压缩")]),v._v("：将 CSS、JS 代码混淆压缩，为了让代码体积更小，加载更快。")])]),v._v(" "),e("h3",{attrs:{id:"构建工具介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建工具介绍"}},[v._v("#")]),v._v(" "),e("strong",[v._v("构建工具介绍")])]),v._v(" "),e("p",[v._v("最早普及使用的构建工具是 "),e("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Fwww.gruntjs.net%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("Grunt"),e("OutboundLink")],1),v._v(" ，不久又被 "),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.gulpjs.com.cn%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("Gulp"),e("OutboundLink")],1),v._v(" 给追赶上。Gulp 因其简单的配置以及高效的性能而被大家所接受，也是笔者个人比较推荐的构建工具之一。如果你做一些简单的 JS 开发，可以考虑使用。")]),v._v(" "),e("p",[v._v("如果你的项目比较复杂，而且是多人开发，那么你就需要掌握目前构建工具届的神器 —— webpack 。不过神器也有一个缺点，就是学习成本比较高，需要拿出专门的时间来专心学习，而不是三言两语就能讲完的。我们下面就演示一下 webpack 最简单的使用，全面的学习还得靠大家去认真查阅相关文档，或者参考专门讲解 webpack 的教程。")]),v._v(" "),e("h3",{attrs:{id:"webpack-演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-演示"}},[v._v("#")]),v._v(" "),e("strong",[v._v("webpack 演示")])]),v._v(" "),e("p",[v._v("接下来我们演示一下 webpack 处理模块化和混淆压缩代码这两个基本功能。")]),v._v(" "),e("p",[v._v("首先，你需要安装 Node.js，没有安装的可以去 "),e("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Fnodejs.cn%2Fdownload%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("Node.js 官网"),e("OutboundLink")],1),v._v(" 下载并安装。安装完成后运行如下命令来验证是否安装成功。")]),v._v(" "),e("pre",[e("code",[v._v("node -v\nnpm -v\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("然后，新建一个目录，进入该目录，运行"),e("code",[v._v("npm init")]),v._v("，按照提示输入名称、版本、描述等信息。完成之后，该目录下出现了一个"),e("code",[v._v("package.json")]),v._v("文件，是一个 JSON 文件。")]),v._v(" "),e("p",[v._v("接下来，安装 wepback，运行"),e("code",[v._v("npm i --save-dev webpack")]),v._v("，网络原因需要耐心等待几分钟。")]),v._v(" "),e("p",[v._v("接下来，编写源代码，在该目录下创建"),e("code",[v._v("src")]),v._v("文件夹，并在其中创建"),e("code",[v._v("app.js")]),v._v("和"),e("code",[v._v("dt.js")]),v._v("两个文件，文件内容分别是：")]),v._v(" "),e("pre",[e("code",[v._v("// dt.js 内容\nmodule.exports = {\n    getDateNow: function () {\n        return Date.now()\n    }\n}\n\n// app.js 内容\nvar dt = require('./dt.js')\nalert(dt.getDateNow())\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("然后，再返回上一层目录，新建"),e("code",[v._v("index.html")]),v._v("文件（该文件和"),e("code",[v._v("src")]),v._v("属于同一层级），内容是")]),v._v(" "),e("pre",[e("code",[v._v("<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n</head>\n<body>\n    <div>test</div>\n\n    <script src='./dist/bundle.js'><\/script>\n</body>\n</html>\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("然后，编写 webpack 配置文件，新建"),e("code",[v._v("webpack.config.js")]),v._v("，内容是")]),v._v(" "),e("pre",[e("code",[v._v("const path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  context: path.resolve(__dirname, './src'),\n  entry: {\n    app: './app.js',\n  },\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n          //supresses warnings, usually from module minification\n          warnings: false\n        }\n    }),\n  ]\n};\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("总结一下，目前项目的文件目录是：")]),v._v(" "),e("pre",[e("code",[v._v("src\n  +-- app.js\n  +-- dt.js\nindex.html\npackage.json\nwebpack.config.js\n")])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("接下来，打开"),e("code",[v._v("package.json")]),v._v("，然后修改其中"),e("code",[v._v("scripts")]),v._v("的内容为：")]),v._v(" "),e("pre",[e("code",[v._v('  "scripts": {\n    "start": "webpack"\n  }\n')])]),v._v(" "),e("p",[v._v("复制")]),v._v(" "),e("p",[v._v("在命令行中运行"),e("code",[v._v("npm start")]),v._v("，即可看到编译的结果，最后在浏览器中打开"),e("code",[v._v("index.html")]),v._v("，即可弹出"),e("code",[v._v("Date.now()")]),v._v("的值。")]),v._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" "),e("strong",[v._v("总结")])]),v._v(" "),e("p",[v._v("最后再次强调，"),e("strong",[v._v("深刻理解构建工具存在的价值，比你多会一些配置代码更加有意义，特别是对于应对面试来说")]),v._v("。")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"调试方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试方法"}},[v._v("#")]),v._v(" "),e("strong",[v._v("调试方法")])]),v._v(" "),e("p",[v._v("调试方法这块被考查最多的就是如何进行抓包。")]),v._v(" "),e("blockquote",[e("p",[v._v("题目：如何抓取数据？如何使用工具来配置代理？")])]),v._v(" "),e("p",[v._v("PC 端的网页，我们可以通过 Chrome、Firefox 等浏览器自带的开发者工具来查看网页的所有网络请求，以帮助排查 bug。这种监听、查看网络请求的操作称为"),e("strong",[v._v("抓包")]),v._v("。")]),v._v(" "),e("p",[v._v("针对移动端的抓包工具，Mac 系统下推荐使用 Charles 这个工具，首先 "),e("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.charlesproxy.com%2Fdownload%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("下载"),e("OutboundLink")],1),v._v(" 并安装，打开。Windows 系统推荐使用 "),e("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Frj.baidu.com%2Fsoft%2Fdetail%2F10963.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("Fiddler"),e("OutboundLink")],1),v._v("，下载安装打开。两者使用基本一致，下面以 Charles 为例介绍。")]),v._v(" "),e("p",[v._v("接下来，将安装好 Charles 的电脑和要抓包的手机，连接到同一个网络（一般为公司统一提供的内网，由专业网络工程师搭建），保证 IP 段相同。然后，将手机设置网络代理（每种不同手机如何设置网络代理，网上都有傻瓜式教程），代理的 IP 为电脑的 IP，代理的端口为"),e("code",[v._v("8888")]),v._v("。然后，Charles 可能会有一个弹框提示是否允许连接代理，这里选择“允许”即可。这样，使用手机端访问的网页或者联网的请求，Charles 就能监听到了。")]),v._v(" "),e("p",[v._v("在开发过程中，经常用到抓包工具来做代理，将线上的地址代理到测试环境，Charles 和 Fiddler 都可实现这个功能。以 Charles 为例，点击菜单栏中 Tools 菜单，然后二级菜单中点击 Map Remote，会弹出配置框。首先，选中 Enable Map Remote 复选框，然后点击 Add 按钮，添加一个代理项。例如，如果要将线上的"),e("code",[v._v("https://www.aaa.com/api/getuser?name=xxx")]),v._v("这个地址代理到测试地址"),e("code",[v._v("http://168.1.1.100:8080/api/getuser?name=xxx")]),v._v("，配置如下图")]),v._v(" "),e("p",[v._v("![](data:image/svg+xml;utf8,)")]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"小结-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-7"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("本小节总结了前端开发环境常考查的知识，这些知识也是前端程序员必须掌握的，否则会影响开发效率。")]),v._v(" "),e("p",[v._v("上一篇："),e("a",{attrs:{href:"541675"}},[v._v("一面 5：浏览器相关知识点与高频考题解析")]),v._v("下一篇："),e("a",{attrs:{href:"541677"}},[v._v("二面 1：如何回答常见的软技能问题")])]),v._v(" "),e("h1",{attrs:{id:"二面-1：如何回答常见的软技能问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二面-1：如何回答常见的软技能问题"}},[v._v("#")]),v._v(" "),e("strong",[v._v("二面 1：如何回答常见的软技能问题")])]),v._v(" "),e("p",[v._v("面试是个技术活，不仅仅是技术，各种软技能的面试技巧也是非常重要的，尤其是程序员一般对于自己的软技能不是很看重，其实"),e("strong",[v._v("软技能才是决定你职场能够走多远的关键")]),v._v("。")]),v._v(" "),e("h2",{attrs:{id:"程序员应该具备的软技能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#程序员应该具备的软技能"}},[v._v("#")]),v._v(" "),e("strong",[v._v("程序员应该具备的软技能")])]),v._v(" "),e("p",[v._v("程序员除了业务技能外，应该具有下面的软技能：")]),v._v(" "),e("ol",[e("li",[v._v("韧性：抗压能力，在一定项目压力下能够迎难而上，比如勇于主动承担和解决技术难题")]),v._v(" "),e("li",[v._v("责任心：对于自己做过的项目，能够出现 bug 之类主动解决")]),v._v(" "),e("li",[v._v("持续学习能力：IT 行业是个需要不断充电的行业，尤其 Web 前端这些年一直在巨变，所以持续学习能力很重要")]),v._v(" "),e("li",[v._v("团队合作能力：做项目不能个人英雄主义，应该融入团队，跟团队一起打仗")]),v._v(" "),e("li",[v._v("交流沟通能力：经常会遇见沟通需求和交互设计的工作，应该乐于沟通分享")])]),v._v(" "),e("p",[v._v("另外在《软技能：代码之外的生存指南》这本书里提到了下面一些软技能：")]),v._v(" "),e("ol",[e("li",[v._v("职业")]),v._v(" "),e("li",[v._v("自我营销")]),v._v(" "),e("li",[v._v("学习能力")]),v._v(" "),e("li",[v._v("提升工作效率")]),v._v(" "),e("li",[v._v("理财")]),v._v(" "),e("li",[v._v("健身")]),v._v(" "),e("li",[v._v("积极的人生观")])]),v._v(" "),e("h2",{attrs:{id:"常见的软技能问题和提升"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见的软技能问题和提升"}},[v._v("#")]),v._v(" "),e("strong",[v._v("常见的软技能问题和提升")])]),v._v(" "),e("p",[v._v("回答软技能类的问题，应该注意在回答过程中体现自己具备的软技能。下面列举几个常见的软技能类的问题。")]),v._v(" "),e("h3",{attrs:{id:"回想下你遇见过最难打交道的同事，你是如何跟他沟通的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回想下你遇见过最难打交道的同事，你是如何跟他沟通的"}},[v._v("#")]),v._v(" "),e("strong",[v._v("回想下你遇见过最难打交道的同事，你是如何跟他沟通的")])]),v._v(" "),e("p",[v._v("一般来说，工作中总会遇见一两个自己不喜欢的人，这种情况应该尽量避免冲突，从自己做起慢慢让对方感觉到自己的合作精神。")]),v._v(" "),e("p",[v._v("所以，遇见难打交道的同事，不要急于上报领导，应该自己主动多做一些事情，比如规划好工作安排，让他选择自己做的事情，有了结论记得发邮件确认下来，这样你们的领导和其他成员都会了解到工作的安排，在鞭笞对方的同时，也做到了职责明确。在项目当中，多主动检查项目进展，提前发现逾期的问题。")]),v._v(" "),e("p",[v._v("重点是突出：自己主动沟通解决问题的意识，而不是遇见问题就找领导。")]),v._v(" "),e("h3",{attrs:{id:"当你被分配一个几乎不可能完成的任务时，你会怎么做"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#当你被分配一个几乎不可能完成的任务时，你会怎么做"}},[v._v("#")]),v._v(" "),e("strong",[v._v("当你被分配一个几乎不可能完成的任务时，你会怎么做")])]),v._v(" "),e("p",[v._v("这种情况下，一般通过下面方式来解决：")]),v._v(" "),e("ol",[e("li",[v._v("自己先查找资料，寻找解决方案，评估自己需要怎样的资源来完成，需要多长时间")]),v._v(" "),e("li",[v._v("能不能借助周围同事来解决问题")]),v._v(" "),e("li",[v._v("拿着分析结果跟上级反馈，寻求帮助或者资源")])]),v._v(" "),e("p",[v._v("突出的软技能：分析和解决问题，沟通寻求帮助。")]),v._v(" "),e("h3",{attrs:{id:"业余时间都做什么？除了写码之外还有什么爱好"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#业余时间都做什么？除了写码之外还有什么爱好"}},[v._v("#")]),v._v(" "),e("strong",[v._v("业余时间都做什么？除了写码之外还有什么爱好")])]),v._v(" "),e("p",[v._v("这类问题也是面试官的高频问题，「一个人的业余时间决定了他的未来」，如果回答周末都在追剧打游戏之类的，未免显得太不上进。")]),v._v(" "),e("p",[v._v("一般来说，推荐下面的回答：")]),v._v(" "),e("blockquote",[e("p",[v._v("周末一般会有三种状态：")]),v._v(" "),e("ol",[e("li",[v._v("和朋友一起去做做运动，也会聚会聊天，探讨下新技术之类的；")]),v._v(" "),e("li",[v._v("也会看一些书籍充充电，比如我最近看的 xx，有什么的想法；")]),v._v(" "),e("li",[v._v("有时候会闷在家用最近比较火的技术做个小项目或者实现个小功能之类的。")])])]),v._v(" "),e("p",[v._v("这样的回答，既能表现自己阳光善于社交沟通的一面，又能表现自己的上进心。")]),v._v(" "),e("h2",{attrs:{id:"小结-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-8"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("本小节介绍了程序员除了业务技术能力之外应该日常修炼的软技能，在面试中，软技能会被以各种形式问起，候选人应该先了解有哪些软技能可以修炼，才能在回答软技能问题的时候，尽量提到自己具备的软技能。")]),v._v(" "),e("p",[v._v("上一篇："),e("a",{attrs:{href:"541676"}},[v._v("一面 6：开发环境相关知识点与高频考题解析")]),v._v("下一篇："),e("a",{attrs:{href:"541678"}},[v._v("二面 2：如何介绍项目及应对项目细节追问")])]),v._v(" "),e("h1",{attrs:{id:"二面-2：如何介绍项目及应对项目细节追问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二面-2：如何介绍项目及应对项目细节追问"}},[v._v("#")]),v._v(" "),e("strong",[v._v("二面 2：如何介绍项目及应对项目细节追问")])]),v._v(" "),e("p",[v._v("一个标准的面试流程中，肯定会在一面二面中问到你具体做过的项目，然后追问项目的细节。这类问题往往会通过下面形式来提问：")]),v._v(" "),e("ol",[e("li",[v._v("发现你简历的一个项目，直接让你介绍下这个项目")]),v._v(" "),e("li",[v._v("让你回忆下你做过的项目中，最值得分享（最大型/最困难/最能体现技术能力/最难忘）的")]),v._v(" "),e("li",[v._v("如果让你设计 xx 系统/项目，你会怎么着手干")])]),v._v(" "),e("p",[v._v("这类跟项目相关的综合性问题，既能体现候选人的技术水平、业务水平和架构能力，也能够辨别候选人是不是真的做过项目，还能够发现候选人的一些软技能。")]),v._v(" "),e("p",[v._v("下面分享下，遇见这类问题应该怎样回答。")]),v._v(" "),e("h2",{attrs:{id:"怎样介绍自己做过的一个项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎样介绍自己做过的一个项目"}},[v._v("#")]),v._v(" "),e("strong",[v._v("怎样介绍自己做过的一个项目")])]),v._v(" "),e("p",[v._v("按照第 1 小节说的，简历当中的项目，你要精挑细选，既要体现技术难度，又要想好细节。具体要介绍一个项目（包括梳理一个项目），可以按照下面几个阶段来做。")]),v._v(" "),e("p",[v._v("###** 1. 介绍项目背景**")]),v._v(" "),e("p",[v._v("这个项目为什么做，当初大的环境背景是什么？还是为了解决一个什么问题而设立的项目？背景是很重要的，如果不了解背景，一上来就听一个结论性的项目，面试官可能对于项目的技术选型、技术难度会有理解偏差，甚至怀疑是否真的有过这样的项目。")]),v._v(" "),e("blockquote",[e("p",[v._v("比如一上来就说：我们的项目采用了「backbone」来做框架，然后。。。而「backbone」已经是三四年前比较新鲜的技术，现在会有更好的选择方案，如果不介绍项目的时间背景，面试官肯定一脸懵逼。")])]),v._v(" "),e("h3",{attrs:{id:"_2-承担角色"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-承担角色"}},[v._v("#")]),v._v(" "),e("strong",[v._v("2. 承担角色")])]),v._v(" "),e("p",[v._v("项目涉及的人员角色有哪些，自己在其中扮演的角色是什么？")]),v._v(" "),e("p",[v._v("这里候选往往人会自己给自己挖坑，比如把自己在项目中起到的作用夸大等。一般来说，面试官细节追问的时候，如果候选人能够把细节或者技术方案等讲明白、讲清楚，不管他是真的做过还是跟别人做过，或者自己认真思考过，都能体现候选人的技术水平和技术视野。前提还是在你能够兜得住的可控范围之内做适当的「美化」。")]),v._v(" "),e("h3",{attrs:{id:"_3-最终的结果和收益"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-最终的结果和收益"}},[v._v("#")]),v._v(" "),e("strong",[v._v("3. 最终的结果和收益")])]),v._v(" "),e("p",[v._v("项目介绍过程中，应该介绍项目最终的结果和收益，比如项目最后经过多久的开发上线了，上线后的数据是怎样的，是否达到预期，还是带来了新的问题，遇见了问题自己后续又是怎样补救的。")]),v._v(" "),e("h3",{attrs:{id:"_4-有始有终：项目总结和反思"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-有始有终：项目总结和反思"}},[v._v("#")]),v._v(" 4. 有始有终：项目总结和反思")]),v._v(" "),e("p",[v._v("有总结和反思，才会有进步。 项目做完了往往会有一些心得和体会，这时候应该跟面试官说出来。在梳理项目的总结和反思时，可以按照下面的列表来梳理：")]),v._v(" "),e("ul",[e("li",[v._v("收获有哪些？")]),v._v(" "),e("li",[v._v("是否有做得不足的地方，怎么改进？")]),v._v(" "),e("li",[v._v("是否具有可迁移性？")])]),v._v(" "),e("p",[v._v("比如，之前详细介绍了某个项目，这个项目当时看来没有什么问题，但是现在有更好的解决方案了，候选人就应该在这里提出来：现在看来，这个项目还有 xx 的问题，我可以通过 xx 的方式来解决。")]),v._v(" "),e("p",[v._v("再比如：做这个项目的时候，你做得比较出彩的地方，可以迁移到其他项目中直接使用，小到代码片段，大到解决方案，总会有你值得总结和梳理的地方。")]),v._v(" "),e("p",[v._v("介绍完项目总结这部分，也可以引导面试官往自己擅长的领域思考。比如上面提到项目中的问题，可以往你擅长的方面引导，即使面试官没有问到，你也介绍到了。")]),v._v(" "),e("p",[v._v("按照上面的四段体介绍项目，会让面试官感觉候选人有清晰的思路，对整个项目也有理解和想法，还能够总结反思项目的收益和问题，可谓「一箭三雕」。")]),v._v(" "),e("h2",{attrs:{id:"没有做过大型项目怎么办"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#没有做过大型项目怎么办"}},[v._v("#")]),v._v(" "),e("strong",[v._v("没有做过大型项目怎么办")])]),v._v(" "),e("p",[v._v("对于刚刚找工作的应届生，或者面试官让你进行一个大型项目的设计，候选人可能没有类似的经验。这时候不要用「我不会、没做过」一句话就带过。")]),v._v(" "),e("p",[v._v("如果是实在没有项目可以说，那么可以提自己日常做的练手项目，或者看到一个解决方案的文章/书，提到的某个项目，抒发下自己的想法。")]),v._v(" "),e("p",[v._v("如果是对于面试官提出来需要你设计的项目/系统，可以按照下面几步思考：")]),v._v(" "),e("ol",[e("li",[v._v("有没有遇见过类似的项目")]),v._v(" "),e("li",[v._v("有没有读过类似解决方案的文章")]),v._v(" "),e("li",[v._v("项目能不能拆解，拆解过程中能不能发现自己做过的项目可以用")]),v._v(" "),e("li",[v._v("项目解决的问题是什么，这类问题有没有更好的解决方案")])]),v._v(" "),e("p",[v._v("总之，切记不要一句「不知道、没做过」就放弃，每一次提问都是自己表现的机会。")]),v._v(" "),e("h2",{attrs:{id:"项目细节和技术点的追问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目细节和技术点的追问"}},[v._v("#")]),v._v(" "),e("strong",[v._v("项目细节和技术点的追问")])]),v._v(" "),e("p",[v._v("介绍项目的过程中，面试官可能会追问技术细节，所以我们在准备面试的时候，应该尽量把技术细节梳理清楚，技术细节包括：")]),v._v(" "),e("ol",[e("li",[v._v("技术选型方案：当时做技术选型所面临的状况")]),v._v(" "),e("li",[v._v("技术解决方案：最终确定某种技术方案的原因，比如：选择用 Vue 而没有用 React 是为什么？")]),v._v(" "),e("li",[v._v("项目数据和收益")]),v._v(" "),e("li",[v._v("项目中最难的地方")]),v._v(" "),e("li",[v._v("遇见的坑：如使用某种框架遇见哪些坑")])]),v._v(" "),e("p",[v._v("一般来说，做技术选型的时候需要考虑下面几个因素：")]),v._v(" "),e("ol",[e("li",[v._v("时代：现在比较火的技术是什么，为什么火起来，解决了什么问题，能否用到我的项目中？")]),v._v(" "),e("li",[v._v("团队：个人或者团队对某种技术的熟悉程度是怎样的，学习成本又是怎样的？")]),v._v(" "),e("li",[v._v("业务需求：需求是怎样的，能否套用现在的成熟解决方案/库来快速解决？")]),v._v(" "),e("li",[v._v("维护成本：一个解决方案的是否再能够 cover 住的范围之内？")])]),v._v(" "),e("p",[v._v("在项目中遇见的数据和收益应该做好跟踪，保证数据的真实性和可信性。另外，遇见的坑可能是面试官问得比较多的，尤其现在比较火的一些技术（Vue、React、webpack），一般团队都在使用，所以一定要提前准备下。")]),v._v(" "),e("h2",{attrs:{id:"小结-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-9"}},[v._v("#")]),v._v(" "),e("strong",[v._v("小结")])]),v._v(" "),e("p",[v._v("本小节介绍了面试中关于项目类问题的回答方法，介绍项目要使用四段体的方式，从背景、承担角色、收益效果和总结反思四个部分来介绍项目。")]),v._v(" "),e("p",[v._v("准备这个面试环节的时候，利用笔者一直提倡的「思维导图」法，好好回顾和梳理自己的项目。")])])}),[],!1,null,null,null);_.default=n.exports}}]);