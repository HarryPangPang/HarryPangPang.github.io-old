(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{214:function(e,t,n){"use strict";n.r(t);var r=n(0),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("ol",[n("li",[n("p",[e._v("React是一种  声明式   高效 灵活 构建用户界面的框架")])]),e._v(" "),n("li",[n("p",[e._v("组件 ：React.Component{}")])]),e._v(" "),n("li",[n("p",[e._v("组件是接受 名为 props的参数 {this.props.name}， 即 当前组件被应用时， 传入的各个数据，包括事件等；")])])]),e._v(" "),n("p",[e._v("4.render返回的是一个React元素 ：渲染内容的描述   一般使用JSX语法来扩展  ： ")]),n("div"),e._v(' -----\x3e React.createElement("div")'),n("p"),e._v(" "),n("p",[e._v("5.通过 "),n("ShoppingList"),e._v(" 这样的标签你就可以在 React 当中调用整个 ShoppingList 组件")],1),e._v(" "),n("ol",{attrs:{start:"6"}},[n("li",[n("p",[e._v('添加样式用  className = "aaaa",  事件： onClick={ () => alert("click")}')])]),e._v(" "),n("li",[n("p",[e._v("this.state 为自身设置自身的状态数据，  存储变化的数据")])]),e._v(" "),n("li",[n("p",[e._v("this.setState 用于设置 值 ，每次触发时都会开始准备更新组件 跟随数据改变了的内容。")])])]),e._v(" "),n("p",[e._v("状态提升：")]),e._v(" "),n("ol",{attrs:{start:"9"}},[n("li",[n("p",[e._v("子组件的state数据提升至共同的 父组件 中保存。然后 父组件 通过Props  将 状态 数据传递到子组件中     ------\x3e  方便状态数据共享交流")])]),e._v(" "),n("li",[n("p",[e._v("key React当中使用的一种特殊的属性，(以及ref属性)，无法通过props获取到key，React会自动判断元素更新时使用key，而组件自己无法获取到key的。\n组件key值被改变就会被当作新创建的组件处理。\n组件的 keys 值并不需要在全局都保证唯一，只需要在当前的节点里保证唯一即可")])])]),e._v(" "),n("p",[e._v("二.Redux\n概念：\n（1）Web 应用是一个状态机，视图与状态是一一对应的。")]),e._v(" "),n("p",[e._v("（2）所有的状态，保存在一个对象里面。")]),e._v(" "),n("p",[e._v("Store:\n保存数据的地方，看成一个容器， 整个应用只能有一个store")]),e._v(" "),n("p",[e._v("提供的方法函数： createStore，用于生成store，接受了另一个函数参数，返回新生成的store对象\n例：import { createStore } from 'redux';\nconst store = createStore(fn);\nState：\n时点的数据集合叫做 State， 如，当前时刻的 State，通过 store.getState() 拿到\nimport { createStore } from 'redux';\nconst store = createStore(fn);\nconst state = store.getState();\nRedux 规定， 一个 State 对应一个 View。只要 State 相同，View 就相同。你知道 State，就知道 View 是什么样，反之亦然。")]),e._v(" "),n("p",[e._v("Action：\nAction 就是 View 发出的通知，表示 State 应该要发生变化了\nAction 是一个对象。其中的type属性是必须的。表示Action 的名称。其他属性可以自由设置，\nconst action = {\ntype: 'ADD_TODO',\npayload: 'Learn Redux'\n};\n可以这样理解，Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。")]),e._v(" "),n("p",[e._v("Action Creator:\nView 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 Action Creator。")]),e._v(" "),n("p",[e._v("例：\nconst ADD_TODO = '添加 TODO';")]),e._v(" "),n("p",[e._v("function addTodo(text) {\nreturn {\ntype: ADD_TODO,\ntext\n}\n}")]),e._v(" "),n("p",[e._v("const action =addTodo('Learn Redux');")]),e._v(" "),n("p",[e._v("store.dispatch()：")]),e._v(" "),n("p",[e._v("store.dispatch()是 View 发出 Action 的唯一方法。\nstore.dispatch接受一个 Action 对象作为参数，将它发送出去\nstore.dispatch(addTodo('Learn Redux'));")]),e._v(" "),n("p",[e._v("Reducer：\nStore 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。\n例：")]),e._v(" "),n("p",[e._v("const defaultState = 0;\nconst reducer = (state = defaultState, action) => {\nswitch (action.type) {\ncase 'ADD':\nreturn state + action.payload;\ndefault:\nreturn state;\n}};")]),e._v(" "),n("p",[e._v("const state = reducer(1, {\ntype: 'ADD',\npayload: 2});")]),e._v(" "),n("p",[e._v("createStore接受 Reducer 作为参数，生成一个新的 Store。以后每当store.dispatch发送过来一个新的 Action，就会自动调用 Reducer，得到新的 State。\n例：")]),e._v(" "),n("p",[e._v("const actions = [\n{ type: 'ADD', payload: 0 },\n{ type: 'ADD', payload: 1 },\n{ type: 'ADD', payload: 2 }];")]),e._v(" "),n("p",[e._v("const total = actions.reduce(reducer, 0); // 3")]),e._v(" "),n("p",[e._v("纯函数： 只要是同样的输入，必定得到同样的输出。")]),e._v(" "),n("p",[e._v("store.subscribe()：\n方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。\n例：")]),e._v(" "),n("p",[e._v("import { createStore } from 'redux';\nconst store = createStore(reducer);")]),e._v(" "),n("p",[e._v("store.subscribe(listener);")]),e._v(" "),n("p",[e._v("只要把 View 的更新函数（对于 React 项目，就是组件的render方法或setState方法）放入listen，就会实现 View 的自动渲染。\nstore.subscribe方法返回一个函数，调用这个函数就可以解除监听。")]),e._v(" "),n("p",[e._v("Reducer 的拆分：\ncombinReducers:用于 Reducer 的拆分。你只要定义各个子 Reducer 函数，然后用这个方法，将它们合成一个大的 Reducer。\n例：")]),e._v(" "),n("p",[e._v("import { combineReducers } from 'redux';")]),e._v(" "),n("p",[e._v("const chatReducer = combineReducers({\nchatLog,\nstatusMessage,\nuserName\n})")]),e._v(" "),n("p",[e._v("export default todoApp;\nState 的属性名必须与子 Reducer 同名")]),e._v(" "),n("p",[e._v("不同名的写法：")]),e._v(" "),n("p",[e._v("const reducer = combineReducers({\na: doSomethingWithA,\nb: processB,\nc: c\n})\n// 等同于\nfunction reducer(state = {}, action) {\nreturn {\na: doSomethingWithA(state.a, action),\nb: processB(state.b, action),\nc: c(state.c, action)\n}}")]),e._v(" "),n("p",[e._v("可以把所有子 Reducer 放在一个文件里面，然后统一引入。")]),e._v(" "),n("p",[e._v("import { combineReducers } from 'redux'\nimport * as reducers from './reducers'")]),e._v(" "),n("p",[e._v("const reducer = combineReducers(reducers)")]),e._v(" "),n("p",[e._v("Redux流程：\n1.用户发出Action--\x3e stroe.dispatch(action);\n2.store自动调用Reducer,传入（当前state，action），返回新的State。\n例： let nextState = todoApp（previousState，action）；")]),e._v(" "),n("p",[e._v("3.state发生变化，store会调用监听函数。：")]),e._v(" "),n("p",[e._v("例：stroe.subscribe(listener);")]),e._v(" "),n("p",[e._v("listener可以通过 store.getStore() 得到当前状态，react此时会触发重新渲染view；")]),e._v(" "),n("p",[e._v("例：")]),e._v(" "),n("p",[e._v("function listerner() {\nlet newState = store.getState();\ncomponent.setState(newState);"),n("br"),e._v("\n}")])])}),[],!1,null,null,null);t.default=o.exports}}]);