(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{248:function(t,v,a){"use strict";a.r(v);var _=a(0),e=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"第一天-python的基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一天-python的基本数据类型"}},[t._v("#")]),t._v(" 第一天 python的基本数据类型")]),t._v(" "),a("h3",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("本系列的python环境是基于python3的，旨在让读者快速了解python的开发，所以会尽量精简的去介绍和讲解，不会深究。")]),t._v(" "),a("p",[t._v("关于python3的安装我就不多说了，搜出来一大堆，推荐菜鸟教程~")]),t._v(" "),a("p",[t._v("下面我们就正式开始")]),t._v(" "),a("h3",{attrs:{id:"_1-python介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-python介绍"}},[t._v("#")]),t._v(" 1. python介绍")]),t._v(" "),a("p",[t._v("python的是以空格来划分程序段的，所以在写python程序时一定要注意空格，同时python对大小写敏感，命名时要注意。\npython的注释和shell相似，采用#符号来注释，python多行注释")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"""\n这是多行注释，用三个双引号\n这是多行注释，用三个双引号 \n这是多行注释，用三个双引号\n"""\n')])])]),a("h3",{attrs:{id:"_2-python的hello-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-python的hello-world"}},[t._v("#")]),t._v(" 2. python的hello world!")]),t._v(" "),a("p",[t._v("下面我们来学习一下使用python来写一句hello world。相比较于java之类的繁琐，python中打印hello world就显得非常简单了，这得益于python是解释型语言而非编译型。两者区别这里就不展开介绍了。")]),t._v(" "),a("p",[t._v("下面开始：")]),t._v(" "),a("p",[t._v("打开shell（windows 是cmd mac是 iterminal），输入：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("python\n")])])]),a("p",[t._v("就会看到下面的内容，这就代表我们进入了python的交互界面")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32\nType "help", "copyright", "credits" or "license" for more information.\n>>>\n')])])]),a("p",[t._v("再输入")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("print('Hello World!')\n")])])]),a("p",[t._v("我们就看到")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(">>> print('Hello World!')\nHello World!\n>>>\n")])])]),a("p",[t._v("成功！")]),t._v(" "),a("h3",{attrs:{id:"_3-python的基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-python的基本数据类型"}},[t._v("#")]),t._v(" 3. python的基本数据类型")]),t._v(" "),a("h4",{attrs:{id:"number（数字）："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number（数字）："}},[t._v("#")]),t._v(" Number（数字）：")]),t._v(" "),a("p",[t._v("Python的数字类型包括整数和浮点数，")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("整数")]),t._v(" "),a("p",[t._v("正整数和负整数，如1,2,-1,-2")])]),t._v(" "),a("li",[a("p",[t._v("浮点数")]),t._v(" "),a("p",[t._v("也就是小数，如1.2 1.03这样（注意：计算机对浮点数的计算不是准确的）")])])]),t._v(" "),a("h4",{attrs:{id:"string（字符串）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string（字符串）"}},[t._v("#")]),t._v(" String（字符串）")]),t._v(" "),a("p",[t._v('字符串，即是以单引号或双引号成对组成，如\'a\' "b"这样，如果单引号需要作为符号时，则是 "I\'m ok" 或者使用 \\ 符号来转义， 例：\'I\'am ok\' 或 "I"am ok" 这样来表示。')]),t._v(" "),a("h4",{attrs:{id:"boolen（布尔值）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolen（布尔值）"}},[t._v("#")]),t._v(" Boolen（布尔值）")]),t._v(" "),a("p",[t._v("布尔值只有Ture和False两个值（注意首字母大写）")]),t._v(" "),a("h4",{attrs:{id:"none（空值）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#none（空值）"}},[t._v("#")]),t._v(" None（空值）")]),t._v(" "),a("p",[t._v("空值不等同于0，0是有意义的数字。")]),t._v(" "),a("h4",{attrs:{id:"list（列表）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list（列表）"}},[t._v("#")]),t._v(" List（列表）")]),t._v(" "),a("p",[t._v("列表就是一系列元素的有序集合，元素可以是任何内容。比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 下面就是由1,'a',0.5三个元素组成的列表。\n[1,'a',0.5]\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#!/usr/bin/python3\n \nlist = [ 'abcd', 786 , 2.23, 70.2 ] #list是一个变量，之后会介绍\ntinylist = [123, 'a']\n \nprint (list)            # 输出完整列表\nprint (list[0])         # 输出列表第一个元素\nprint (list[-1])        # 输出倒数第一个元素\nprint (list[1:3])       # 从第二个开始输出到第三个元素\nprint (list[2:])        # 输出从第三个元素开始的所有元素\nprint (tinylist * 2)    # 输出两次列表\nprint (list + tinylist) # 连接列表\n")])])]),a("p",[t._v("列表的操作：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("list = [ 'a', 'b']\n\nlist[0] = 'c' #list => [ 'c', 'b'] 替换列表第一项\ndel list[1]   #list => [ 'a'] 删除列表第二项\nlen(list)     #获取列表长度 => 2\nlist.append('c') #list => [ 'a', 'b', 'c'] 在列表末尾添加新的元素\nlist.pop(1)   #list => [ 'a'] 删除列表指定位置的元素\n")])])]),a("p",[t._v("详细内置方法：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数&方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("len(list)")]),t._v(" "),a("td",[t._v("列表元素个数")])]),t._v(" "),a("tr",[a("td",[t._v("max(list)")]),t._v(" "),a("td",[t._v("返回列表元素最大值")])]),t._v(" "),a("tr",[a("td",[t._v("min(list)")]),t._v(" "),a("td",[t._v("返回列表元素最小值")])]),t._v(" "),a("tr",[a("td",[t._v("list(seq)")]),t._v(" "),a("td",[t._v("将元组转换为列表")])]),t._v(" "),a("tr",[a("td",[t._v("list.append(obj)")]),t._v(" "),a("td",[t._v("在列表末尾添加新的对象")])]),t._v(" "),a("tr",[a("td",[t._v("list.count(obj)")]),t._v(" "),a("td",[t._v("统计某个元素在列表中出现的次数")])]),t._v(" "),a("tr",[a("td",[t._v("list.extend(seq)")]),t._v(" "),a("td",[t._v("在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）")])]),t._v(" "),a("tr",[a("td",[t._v("list.index(obj)")]),t._v(" "),a("td",[t._v("从列表中找出某个值第一个匹配项的索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("list.insert(index, obj)")]),t._v(" "),a("td",[t._v("将对象插入列表")])]),t._v(" "),a("tr",[a("td",[t._v("list.pop(obj=list[-1])")]),t._v(" "),a("td",[t._v("移除列表中的一个元素（默认最后一个元素），并且返回该元素的值")])]),t._v(" "),a("tr",[a("td",[t._v("list.remove(obj)")]),t._v(" "),a("td",[t._v("移除列表中的一个元素（参数是列表中元素），并且不返回任何值")])]),t._v(" "),a("tr",[a("td",[t._v("list.reverse()")]),t._v(" "),a("td",[t._v("反向列表中元素")])]),t._v(" "),a("tr",[a("td",[t._v("list.sort([func])")]),t._v(" "),a("td",[t._v("对原列表进行排序")])])])]),t._v(" "),a("p",[t._v("List（列表）运算符：")]),t._v(" "),a("p",[t._v("列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Python 表达式")]),t._v(" "),a("th",[t._v("结果")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("len([1, 2, 3])")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("计算元素个数")])]),t._v(" "),a("tr",[a("td",[t._v("[1, 2, 3] + [4, 5, 6]")]),t._v(" "),a("td",[t._v("[1, 2, 3, 4, 5, 6]")]),t._v(" "),a("td",[t._v("组合")])]),t._v(" "),a("tr",[a("td",[t._v("['Hi!'] * 4")]),t._v(" "),a("td",[t._v("['Hi!', 'Hi!', 'Hi!', 'Hi!']")]),t._v(" "),a("td",[t._v("复制")])]),t._v(" "),a("tr",[a("td",[t._v("3 in [1, 2, 3]")]),t._v(" "),a("td",[t._v("True")]),t._v(" "),a("td",[t._v("元素是否存在于列表中")])]),t._v(" "),a("tr",[a("td",[t._v("for x in [1, 2, 3]: print x,")]),t._v(" "),a("td",[t._v("1 2 3")]),t._v(" "),a("td",[t._v("迭代")])])])]),t._v(" "),a("h4",{attrs:{id:"tuple（元组）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tuple（元组）"}},[t._v("#")]),t._v(" Tuple（元组）")]),t._v(" "),a("p",[t._v("Tuple（元组）和list很像，也是一系列元素的有序集合。区别在于元组一旦定义就不可以更改，提高了数据的可靠性和安全性。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 下面就是由1,'a',0.5三个元素组成的元组。\n(1,'a',0.5)\n\n#元组中只包含一个元素时，需要在元素后面添加逗号\n(1,)\n")])])]),a("p",[t._v("Tuple（元组）的访问基本和list一致。")]),t._v(" "),a("p",[t._v("tuple （元组）运算符：\n与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Python 表达式")]),t._v(" "),a("th",[t._v("结果")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("len((1, 2, 3))")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("计算元素个数")])]),t._v(" "),a("tr",[a("td",[t._v("(1, 2, 3) + (4, 5, 6)")]),t._v(" "),a("td",[t._v("(1, 2, 3, 4, 5, 6)")]),t._v(" "),a("td",[t._v("连接")])]),t._v(" "),a("tr",[a("td",[t._v("('Hi!',) * 4")]),t._v(" "),a("td",[t._v("('Hi!', 'Hi!', 'Hi!', 'Hi!')")]),t._v(" "),a("td",[t._v("复制")])]),t._v(" "),a("tr",[a("td",[t._v("3 in (1, 2, 3)")]),t._v(" "),a("td",[t._v("True")]),t._v(" "),a("td",[t._v("元素是否存在")])]),t._v(" "),a("tr",[a("td",[t._v("for x in (1, 2, 3): print(x)")]),t._v(" "),a("td",[t._v("1 2 3")]),t._v(" "),a("td",[t._v("迭代")])])])]),t._v(" "),a("p",[t._v("元组内置方法：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("len(tuple)")]),t._v(" "),a("td",[t._v("计算元组元素个数")])]),t._v(" "),a("tr",[a("td",[t._v("max(tuple)")]),t._v(" "),a("td",[t._v("返回元组中元素最大值")])]),t._v(" "),a("tr",[a("td",[t._v("min(tuple)")]),t._v(" "),a("td",[t._v("返回元组中元素最小值")])]),t._v(" "),a("tr",[a("td",[t._v("tuple(seq)")]),t._v(" "),a("td",[t._v("将列表转换为元组")])])])]),t._v(" "),a("h4",{attrs:{id:"dictionary（字典）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dictionary（字典）"}},[t._v("#")]),t._v(" Dictionary（字典）")]),t._v(" "),a("p",[t._v("Dictionary（字典）也称dict,是一种可变容器，采用键值对的方式来存储数据。\n使用如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("student = {'name':'lilei'} # {'name':'lilei'}就是一个dict\n\n")])])]),a("p",[t._v("要取得学生的名称，可以使用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("print(student['name']) #结果：lilei\n")])])]),a("p",[t._v("这时学生没有age这个属性，但我们仍然去访问，会出现下面的内容")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(">>> student = {'name':'lilei'}\n>>> print(student['name'])\nlilei\n>>> print(student['age'])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'age'\n>>>\n")])])]),a("p",[t._v("为了防止报错，我们可以使用下面的方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("print(student.get('age')) \n")])])]),a("p",[t._v("结果就友好多了")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(">>> print(student.get('age'))\nNone\n>>>\n")])])]),a("p",[t._v("dict （字典） 的函数和方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法和函数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("len(dict)")]),t._v(" "),a("td",[t._v("计算字典元素个数")])]),t._v(" "),a("tr",[a("td",[t._v("str(dict)")]),t._v(" "),a("td",[t._v("输出字典可打印的字符串表示")])]),t._v(" "),a("tr",[a("td",[t._v("type(variable)")]),t._v(" "),a("td",[t._v("返回输入的变量类型，如果变量是字典就返回字典类型")])]),t._v(" "),a("tr",[a("td",[t._v("dict.clear()")]),t._v(" "),a("td",[t._v("删除字典内所有元素")])]),t._v(" "),a("tr",[a("td",[t._v("dict.copy()")]),t._v(" "),a("td",[t._v("返回一个字典的浅复制")])]),t._v(" "),a("tr",[a("td",[t._v("dict.values()")]),t._v(" "),a("td",[t._v("以列表返回字典中的所有值")])]),t._v(" "),a("tr",[a("td",[t._v("popitem()")]),t._v(" "),a("td",[t._v("随机返回并删除字典中的一对键和值")])]),t._v(" "),a("tr",[a("td",[t._v("dict.items()")]),t._v(" "),a("td",[t._v("以列表返回可遍历的(键, 值) 元组数组")])])])]),t._v(" "),a("h4",{attrs:{id:"set（集合）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set（集合）"}},[t._v("#")]),t._v(" Set（集合）")]),t._v(" "),a("p",[t._v("集合（set）是一个无序的不重复元素序列。使用大括号 { } 或者 set() 函数创建集合，\n集合的操作基本和dict一样\n如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("students = {'lilei','zhaosi','xiaohong'} #{'lilei','zhaosi','xiaohong'}就是一个集合\n\nset(['lilei','zhaosi','xiaohong']) #set创建集合需要提供一个列表\n\nstudents.add('xiaoming') # 增加元素 结果=> {'zhaosi', 'xiaohong', 'lilei', 'xiaoming'}\nstudents.add('xiaoming') # 再次加入xiaoming结果=> {'zhaosi', 'xiaohong', 'lilei', 'xiaoming'},因为set不允许重复，而xiaoming重复了，所以只会留下一个xiaoming\n\nstudents.remove( 'xiaoming' ) #删除元素 结果=> {'zhaosi', 'xiaohong', 'lilei''}\n")])])])])}),[],!1,null,null,null);v.default=e.exports}}]);